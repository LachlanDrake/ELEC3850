
ELEC3850FinalDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003128  0800e8e0  0800e8e0  0001e8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a08  08011a08  0003027c  2**0
                  CONTENTS
  4 .ARM          00000008  08011a08  08011a08  00021a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a10  08011a10  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a10  08011a10  00021a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a14  08011a14  00021a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08011a18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011114  20000280  08011c94  00030280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20011394  08011c94  00031394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020de4  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004049  00000000  00000000  00051090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  000550e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b20  00000000  00000000  00056e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c54  00000000  00000000  00058938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ce6  00000000  00000000  0007f58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd44d  00000000  00000000  00096272  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001736bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a30  00000000  00000000  0017373c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e8c8 	.word	0x0800e8c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	0800e8c8 	.word	0x0800e8c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e00c      	b.n	8000fc6 <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LCD_IO_WriteMultipleData+0x40>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	8013      	strh	r3, [r2, #0]
    counter--;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
    pData += 2;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1ef      	bne.n	8000fac <LCD_IO_WriteMultipleData+0x14>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	60020000 	.word	0x60020000

08000fdc <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8000fe6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	b292      	uxth	r2, r2
 8000fee:	801a      	strh	r2, [r3, #0]

}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <LCD_IO_ReadData+0x14>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
  
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	60020000 	.word	0x60020000

08001014 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001018:	f7ff ffb6 	bl	8000f88 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 800101c:	2101      	movs	r1, #1
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f9a7 	bl	8001372 <ili9325_WriteReg>
// STEPIEN: Change the shift direction
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_1, 0x0000); /* Set SS and SM bit */
#else
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	2001      	movs	r0, #1
 800102a:	f000 f9a2 	bl	8001372 <ili9325_WriteReg>
#endif
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 800102e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001032:	2002      	movs	r0, #2
 8001034:	f000 f99d 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8001038:	f241 0118 	movw	r1, #4120	; 0x1018
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f998 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8001042:	2100      	movs	r1, #0
 8001044:	2004      	movs	r0, #4
 8001046:	f000 f994 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 800104a:	f240 2102 	movw	r1, #514	; 0x202
 800104e:	2008      	movs	r0, #8
 8001050:	f000 f98f 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8001054:	2100      	movs	r1, #0
 8001056:	2009      	movs	r0, #9
 8001058:	f000 f98b 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 800105c:	2100      	movs	r1, #0
 800105e:	200a      	movs	r0, #10
 8001060:	f000 f987 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8001064:	2100      	movs	r1, #0
 8001066:	200c      	movs	r0, #12
 8001068:	f000 f983 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 800106c:	2100      	movs	r1, #0
 800106e:	200d      	movs	r0, #13
 8001070:	f000 f97f 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8001074:	2100      	movs	r1, #0
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f97b 	bl	8001372 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800107c:	2100      	movs	r1, #0
 800107e:	2010      	movs	r0, #16
 8001080:	f000 f977 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001084:	2100      	movs	r1, #0
 8001086:	2011      	movs	r0, #17
 8001088:	f000 f973 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800108c:	2100      	movs	r1, #0
 800108e:	2012      	movs	r0, #18
 8001090:	f000 f96f 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8001094:	2100      	movs	r1, #0
 8001096:	2013      	movs	r0, #19
 8001098:	f000 f96b 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800109c:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80010a0:	2010      	movs	r0, #16
 80010a2:	f000 f966 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80010a6:	f240 1137 	movw	r1, #311	; 0x137
 80010aa:	2011      	movs	r0, #17
 80010ac:	f000 f961 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80010b0:	f240 1139 	movw	r1, #313	; 0x139
 80010b4:	2012      	movs	r0, #18
 80010b6:	f000 f95c 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 80010ba:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80010be:	2013      	movs	r0, #19
 80010c0:	f000 f957 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80010c4:	2113      	movs	r1, #19
 80010c6:	2029      	movs	r0, #41	; 0x29
 80010c8:	f000 f953 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 80010cc:	2100      	movs	r1, #0
 80010ce:	2020      	movs	r0, #32
 80010d0:	f000 f94f 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 80010d4:	2100      	movs	r1, #0
 80010d6:	2021      	movs	r0, #33	; 0x21
 80010d8:	f000 f94b 	bl	8001372 <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 80010dc:	2107      	movs	r1, #7
 80010de:	2030      	movs	r0, #48	; 0x30
 80010e0:	f000 f947 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 80010e4:	f240 3102 	movw	r1, #770	; 0x302
 80010e8:	2031      	movs	r0, #49	; 0x31
 80010ea:	f000 f942 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 80010ee:	f240 1105 	movw	r1, #261	; 0x105
 80010f2:	2032      	movs	r0, #50	; 0x32
 80010f4:	f000 f93d 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 80010f8:	f240 2106 	movw	r1, #518	; 0x206
 80010fc:	2035      	movs	r0, #53	; 0x35
 80010fe:	f000 f938 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8001102:	f640 0108 	movw	r1, #2056	; 0x808
 8001106:	2036      	movs	r0, #54	; 0x36
 8001108:	f000 f933 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 800110c:	f240 2106 	movw	r1, #518	; 0x206
 8001110:	2037      	movs	r0, #55	; 0x37
 8001112:	f000 f92e 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8001116:	f240 5104 	movw	r1, #1284	; 0x504
 800111a:	2038      	movs	r0, #56	; 0x38
 800111c:	f000 f929 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8001120:	2107      	movs	r1, #7
 8001122:	2039      	movs	r0, #57	; 0x39
 8001124:	f000 f925 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8001128:	f240 1105 	movw	r1, #261	; 0x105
 800112c:	203c      	movs	r0, #60	; 0x3c
 800112e:	f000 f920 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8001132:	f640 0108 	movw	r1, #2056	; 0x808
 8001136:	203d      	movs	r0, #61	; 0x3d
 8001138:	f000 f91b 	bl	8001372 <ili9325_WriteReg>
  HAL_Delay(50); 
 800113c:	2032      	movs	r0, #50	; 0x32
 800113e:	f005 fa81 	bl	8006644 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8001142:	2100      	movs	r1, #0
 8001144:	2050      	movs	r0, #80	; 0x50
 8001146:	f000 f914 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800114a:	21ef      	movs	r1, #239	; 0xef
 800114c:	2051      	movs	r0, #81	; 0x51
 800114e:	f000 f910 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8001152:	2100      	movs	r1, #0
 8001154:	2052      	movs	r0, #82	; 0x52
 8001156:	f000 f90c 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 800115a:	f240 113f 	movw	r1, #319	; 0x13f
 800115e:	2053      	movs	r0, #83	; 0x53
 8001160:	f000 f907 	bl	8001372 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8001164:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8001168:	2060      	movs	r0, #96	; 0x60
 800116a:	f000 f902 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 800116e:	2101      	movs	r1, #1
 8001170:	2061      	movs	r0, #97	; 0x61
 8001172:	f000 f8fe 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8001176:	2100      	movs	r1, #0
 8001178:	206a      	movs	r0, #106	; 0x6a
 800117a:	f000 f8fa 	bl	8001372 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 800117e:	2100      	movs	r1, #0
 8001180:	2080      	movs	r0, #128	; 0x80
 8001182:	f000 f8f6 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8001186:	2100      	movs	r1, #0
 8001188:	2081      	movs	r0, #129	; 0x81
 800118a:	f000 f8f2 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 800118e:	2100      	movs	r1, #0
 8001190:	2082      	movs	r0, #130	; 0x82
 8001192:	f000 f8ee 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8001196:	2100      	movs	r1, #0
 8001198:	2083      	movs	r0, #131	; 0x83
 800119a:	f000 f8ea 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 800119e:	2100      	movs	r1, #0
 80011a0:	2084      	movs	r0, #132	; 0x84
 80011a2:	f000 f8e6 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2085      	movs	r0, #133	; 0x85
 80011aa:	f000 f8e2 	bl	8001372 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 80011ae:	2110      	movs	r1, #16
 80011b0:	2090      	movs	r0, #144	; 0x90
 80011b2:	f000 f8de 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 80011b6:	2100      	movs	r1, #0
 80011b8:	2092      	movs	r0, #146	; 0x92
 80011ba:	f000 f8da 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 80011be:	2103      	movs	r1, #3
 80011c0:	2093      	movs	r0, #147	; 0x93
 80011c2:	f000 f8d6 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 80011c6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80011ca:	2095      	movs	r0, #149	; 0x95
 80011cc:	f000 f8d1 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2097      	movs	r0, #151	; 0x97
 80011d4:	f000 f8cd 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 80011d8:	2100      	movs	r1, #0
 80011da:	2098      	movs	r0, #152	; 0x98
 80011dc:	f000 f8c9 	bl	8001372 <ili9325_WriteReg>
  /* AM=1 (address is updated in vertical writing direction) */
// STEPIEN: Change the direction
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_3, 0x1010);
#else
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80011e0:	f241 0128 	movw	r1, #4136	; 0x1028
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f8c4 	bl	8001372 <ili9325_WriteReg>
#endif
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 80011ea:	f240 1173 	movw	r1, #371	; 0x173
 80011ee:	2007      	movs	r0, #7
 80011f0:	f000 f8bf 	bl	8001372 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 f86d 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80011fc:	2022      	movs	r0, #34	; 0x22
 80011fe:	f7ff feed 	bl	8000fdc <LCD_IO_WriteReg>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800120a:	2100      	movs	r1, #0
 800120c:	2010      	movs	r0, #16
 800120e:	f000 f8b0 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001212:	2100      	movs	r1, #0
 8001214:	2011      	movs	r0, #17
 8001216:	f000 f8ac 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800121a:	2100      	movs	r1, #0
 800121c:	2012      	movs	r0, #18
 800121e:	f000 f8a8 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001222:	2100      	movs	r1, #0
 8001224:	2013      	movs	r0, #19
 8001226:	f000 f8a4 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800122a:	f241 71b0 	movw	r1, #6064	; 0x17b0
 800122e:	2010      	movs	r0, #16
 8001230:	f000 f89f 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001234:	f240 1137 	movw	r1, #311	; 0x137
 8001238:	2011      	movs	r0, #17
 800123a:	f000 f89a 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800123e:	f240 1139 	movw	r1, #313	; 0x139
 8001242:	2012      	movs	r0, #18
 8001244:	f000 f895 	bl	8001372 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001248:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800124c:	2013      	movs	r0, #19
 800124e:	f000 f890 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001252:	2113      	movs	r1, #19
 8001254:	2029      	movs	r0, #41	; 0x29
 8001256:	f000 f88c 	bl	8001372 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 800125a:	f240 1173 	movw	r1, #371	; 0x173
 800125e:	2007      	movs	r0, #7
 8001260:	f000 f887 	bl	8001372 <ili9325_WriteReg>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800126c:	2100      	movs	r1, #0
 800126e:	2010      	movs	r0, #16
 8001270:	f000 f87f 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001274:	2100      	movs	r1, #0
 8001276:	2011      	movs	r0, #17
 8001278:	f000 f87b 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800127c:	2100      	movs	r1, #0
 800127e:	2012      	movs	r0, #18
 8001280:	f000 f877 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001284:	2100      	movs	r1, #0
 8001286:	2013      	movs	r0, #19
 8001288:	f000 f873 	bl	8001372 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 800128c:	2100      	movs	r1, #0
 800128e:	2029      	movs	r0, #41	; 0x29
 8001290:	f000 f86f 	bl	8001372 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8001294:	2100      	movs	r1, #0
 8001296:	2007      	movs	r0, #7
 8001298:	f000 f86b 	bl	8001372 <ili9325_WriteReg>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 return ILI9325_LCD_PIXEL_WIDTH; // STEPIEN: Was (uint16_t)320;
 80012a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
 return ILI9325_LCD_PIXEL_HEIGHT; // STEPIEN: Was (uint16_t)240;
 80012b6:	23f0      	movs	r3, #240	; 0xf0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80012c6:	f7ff fe5f 	bl	8000f88 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f866 	bl	800139c <ili9325_ReadReg>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	460a      	mov	r2, r1
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	4613      	mov	r3, r2
 80012e4:	80bb      	strh	r3, [r7, #4]
// STEPIEN: Swap x and y
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_32, Xpos);
  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
#else
  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	2020      	movs	r0, #32
 80012f2:	f000 f83e 	bl	8001372 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2021      	movs	r0, #33	; 0x21
 80012fc:	f000 f839 	bl	8001372 <ili9325_WriteReg>
#endif
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
 8001312:	460b      	mov	r3, r1
 8001314:	80bb      	strh	r3, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800131a:	88ba      	ldrh	r2, [r7, #4]
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffd8 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001326:	2022      	movs	r0, #34	; 0x22
 8001328:	f7ff fe58 	bl	8000fdc <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 800132c:	1cbb      	adds	r3, r7, #2
 800132e:	2102      	movs	r1, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe31 	bl	8000f98 <LCD_IO_WriteMultipleData>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	460a      	mov	r2, r1
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffbe 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800135a:	2022      	movs	r0, #34	; 0x22
 800135c:	f7ff fe3e 	bl	8000fdc <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8001360:	f7ff fe4c 	bl	8000ffc <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8001364:	f7ff fe4a 	bl	8000ffc <LCD_IO_ReadData>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	460a      	mov	r2, r1
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	4613      	mov	r3, r2
 8001380:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe29 	bl	8000fdc <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe02 	bl	8000f98 <LCD_IO_WriteMultipleData>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ReadReg1, ReadReg2;

  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe17 	bl	8000fdc <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  // return (LCD_IO_ReadData());

  // STEPIEN: Replaced the above to include a dummy read
  ReadReg1=LCD_IO_ReadData();
 80013ae:	f7ff fe25 	bl	8000ffc <LCD_IO_ReadData>
 80013b2:	4603      	mov	r3, r0
 80013b4:	81fb      	strh	r3, [r7, #14]
  ReadReg2=LCD_IO_ReadData();
 80013b6:	f7ff fe21 	bl	8000ffc <LCD_IO_ReadData>
 80013ba:	4603      	mov	r3, r0
 80013bc:	81bb      	strh	r3, [r7, #12]
  // printf("INFO: ili9325_ReadReg(%d)=%#x,%#x\n", LCDReg, ReadReg1, ReadReg2);
  return ReadReg2;
 80013be:	89bb      	ldrh	r3, [r7, #12]
 80013c0:	b29b      	uxth	r3, r3
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80013ca:	b590      	push	{r4, r7, lr}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4604      	mov	r4, r0
 80013d2:	4608      	mov	r0, r1
 80013d4:	4611      	mov	r1, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	4623      	mov	r3, r4
 80013da:	80fb      	strh	r3, [r7, #6]
 80013dc:	4603      	mov	r3, r0
 80013de:	80bb      	strh	r3, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
  ili9325_WriteReg(LCD_REG_82, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
#else
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	425b      	negs	r3, r3
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	883b      	ldrh	r3, [r7, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	33f0      	adds	r3, #240	; 0xf0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	2050      	movs	r0, #80	; 0x50
 80013fc:	f7ff ffb9 	bl	8001372 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8001406:	b29b      	uxth	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	2051      	movs	r0, #81	; 0x51
 800140c:	f7ff ffb1 	bl	8001372 <ili9325_WriteReg>

  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4619      	mov	r1, r3
 8001414:	2052      	movs	r0, #82	; 0x52
 8001416:	f7ff ffac 	bl	8001372 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b29b      	uxth	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	2053      	movs	r0, #83	; 0x53
 800142a:	f7ff ffa2 	bl	8001372 <ili9325_WriteReg>
#endif
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
	...

08001438 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	4611      	mov	r1, r2
 8001444:	461a      	mov	r2, r3
 8001446:	4623      	mov	r3, r4
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	4603      	mov	r3, r0
 800144c:	80bb      	strh	r3, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]
 8001452:	4613      	mov	r3, r2
 8001454:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff38 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001466:	2022      	movs	r0, #34	; 0x22
 8001468:	f7ff fdb8 	bl	8000fdc <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800146c:	2300      	movs	r3, #0
 800146e:	81fb      	strh	r3, [r7, #14]
 8001470:	e007      	b.n	8001482 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	490a      	ldr	r1, [pc, #40]	; (80014a0 <ili9325_DrawHLine+0x68>)
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	3301      	adds	r3, #1
 8001480:	81fb      	strh	r3, [r7, #14]
 8001482:	89fa      	ldrh	r2, [r7, #14]
 8001484:	883b      	ldrh	r3, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3f3      	bcc.n	8001472 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 800148a:	883b      	ldrh	r3, [r7, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4619      	mov	r1, r3
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <ili9325_DrawHLine+0x68>)
 8001492:	f7ff fd81 	bl	8000f98 <LCD_IO_WriteMultipleData>
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000029c 	.word	0x2000029c

080014a4 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	81fb      	strh	r3, [r7, #14]
  /* AM=1 (address is updated in vertical writing direction) */
// STEPIEN: Change the direction
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_3, 0x1018);
#else
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 80014c6:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80014ca:	2003      	movs	r0, #3
 80014cc:	f7ff ff51 	bl	8001372 <ili9325_WriteReg>
#endif

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80014d0:	887a      	ldrh	r2, [r7, #2]
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fefd 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80014dc:	2022      	movs	r0, #34	; 0x22
 80014de:	f7ff fd7d 	bl	8000fdc <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	81fb      	strh	r3, [r7, #14]
 80014e6:	e007      	b.n	80014f8 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <ili9325_DrawVLine+0x7c>)
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	3301      	adds	r3, #1
 80014f6:	81fb      	strh	r3, [r7, #14]
 80014f8:	89fa      	ldrh	r2, [r7, #14]
 80014fa:	883b      	ldrh	r3, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3f3      	bcc.n	80014e8 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001500:	883b      	ldrh	r3, [r7, #0]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <ili9325_DrawVLine+0x7c>)
 8001508:	f7ff fd46 	bl	8000f98 <LCD_IO_WriteMultipleData>
  /* AM=1 (address is updated in vertical writing direction) */
// STEPIEN: Change back the direction
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_3, 0x1010);
#else
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 800150c:	f241 0128 	movw	r1, #4136	; 0x1028
 8001510:	2003      	movs	r0, #3
 8001512:	f7ff ff2e 	bl	8001372 <ili9325_WriteReg>
#endif
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	2000029c 	.word	0x2000029c

08001524 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	80fb      	strh	r3, [r7, #6]
 8001530:	460b      	mov	r3, r1
 8001532:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3302      	adds	r3, #2
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3304      	adds	r3, #4
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	461a      	mov	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4313      	orrs	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	330a      	adds	r3, #10
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	330c      	adds	r3, #12
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	603b      	str	r3, [r7, #0]
  /* AM=1 (address is updated in vertical writing direction) */
// STEPIEN: Change the direction (not tested)
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_3, 0x1030);
#else
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8001586:	f241 0138 	movw	r1, #4152	; 0x1038
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff fef1 	bl	8001372 <ili9325_WriteReg>
#endif

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001590:	88ba      	ldrh	r2, [r7, #4]
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe9d 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800159c:	2022      	movs	r0, #34	; 0x22
 800159e:	f7ff fd1d 	bl	8000fdc <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f7ff fcf5 	bl	8000f98 <LCD_IO_WriteMultipleData>
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
#ifdef ROTATE_LCD
  ili9325_WriteReg(LCD_REG_3, 0x1010);
#else
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80015ae:	f241 0128 	movw	r1, #4136	; 0x1028
 80015b2:	2003      	movs	r0, #3
 80015b4:	f7ff fedd 	bl	8001372 <ili9325_WriteReg>
#endif
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	4603      	mov	r3, r0
 80015d4:	80bb      	strh	r3, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	807b      	strh	r3, [r7, #2]
 80015da:	4613      	mov	r3, r2
 80015dc:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	883a      	ldrh	r2, [r7, #0]
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 80015ec:	88ba      	ldrh	r2, [r7, #4]
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe6f 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80015f8:	2022      	movs	r0, #34	; 0x22
 80015fa:	f7ff fcef 	bl	8000fdc <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4619      	mov	r1, r3
 8001604:	6a38      	ldr	r0, [r7, #32]
 8001606:	f7ff fcc7 	bl	8000f98 <LCD_IO_WriteMultipleData>
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
	...

08001614 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 800161e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8001624:	2100      	movs	r1, #0
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fe55 	bl	80012d6 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800162c:	2022      	movs	r0, #34	; 0x22
 800162e:	f7ff fcd5 	bl	8000fdc <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8001632:	e002      	b.n	800163a <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8001634:	4a05      	ldr	r2, [pc, #20]	; (800164c <ili9325_Clear+0x38>)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	60fa      	str	r2, [r7, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f7      	bne.n	8001634 <ili9325_Clear+0x20>
  }
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	60020000 	.word	0x60020000

08001650 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	70fb      	strb	r3, [r7, #3]
  uint16_t LCD_ID;
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <BSP_LCD_Init+0x88>)
 800165c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001660:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <BSP_LCD_Init+0x88>)
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <BSP_LCD_Init+0x8c>)
 8001666:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <BSP_LCD_Init+0x88>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  // STEPIEN: Use ili9325_drv for controller with ID ILI9325_ID or ILI9328_ID
  LCD_ID = ili9325_drv.ReadID();
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <BSP_LCD_Init+0x90>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	803b      	strh	r3, [r7, #0]
  if ((LCD_ID == ILI9325_ID) || (LCD_ID == ILI9328_ID))
 8001678:	883b      	ldrh	r3, [r7, #0]
 800167a:	f249 3225 	movw	r2, #37669	; 0x9325
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <BSP_LCD_Init+0x3c>
 8001682:	883b      	ldrh	r3, [r7, #0]
 8001684:	f249 3228 	movw	r2, #37672	; 0x9328
 8001688:	4293      	cmp	r3, r2
 800168a:	d10d      	bne.n	80016a8 <BSP_LCD_Init+0x58>
  {
    lcd_drv = &ili9325_drv;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <BSP_LCD_Init+0x94>)
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <BSP_LCD_Init+0x90>)
 8001690:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <BSP_LCD_Init+0x94>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <BSP_LCD_Init+0x8c>)
 800169c:	f000 f84e 	bl	800173c <BSP_LCD_SetFont>

    ret = LCD_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	70fb      	strb	r3, [r7, #3]
      printf("-> %d: ili9325_drv.ReadID() = 0x%04x\n", i++, ili9325_drv.ReadID());
      HAL_Delay(1000);
    }
  }
  
  return ret;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	e012      	b.n	80016ce <BSP_LCD_Init+0x7e>
    int i=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
      printf("-> %d: ili9325_drv.ReadID() = 0x%04x\n", i++, ili9325_drv.ReadID());
 80016ac:	687c      	ldr	r4, [r7, #4]
 80016ae:	1c63      	adds	r3, r4, #1
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <BSP_LCD_Init+0x90>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4798      	blx	r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4621      	mov	r1, r4
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <BSP_LCD_Init+0x98>)
 80016c0:	f00a ff3a 	bl	800c538 <iprintf>
      HAL_Delay(1000);
 80016c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c8:	f004 ffbc 	bl	8006644 <HAL_Delay>
    {
 80016cc:	e7ee      	b.n	80016ac <BSP_LCD_Init+0x5c>
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000dac 	.word	0x20000dac
 80016dc:	20000058 	.word	0x20000058
 80016e0:	20000000 	.word	0x20000000
 80016e4:	2000051c 	.word	0x2000051c
 80016e8:	0800e8e0 	.word	0x0800e8e0

080016ec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <BSP_LCD_GetXSize+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4798      	blx	r3
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000051c 	.word	0x2000051c

08001704 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <BSP_LCD_GetYSize+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	4798      	blx	r3
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000051c 	.word	0x2000051c

0800171c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <BSP_LCD_SetTextColor+0x1c>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000dac 	.word	0x20000dac

0800173c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <BSP_LCD_SetFont+0x1c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6093      	str	r3, [r2, #8]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000dac 	.word	0x20000dac

0800175c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <BSP_LCD_GetFont+0x14>)
 8001762:	689b      	ldr	r3, [r3, #8]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000dac 	.word	0x20000dac

08001774 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <BSP_LCD_Clear+0x64>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <BSP_LCD_Clear+0x64>)
 800178c:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e00d      	b.n	80017b0 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b29c      	uxth	r4, r3
 8001798:	f7ff ffa8 	bl	80016ec <BSP_LCD_GetXSize>
 800179c:	4603      	mov	r3, r0
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f8d7 	bl	8001958 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	f7ff ffa8 	bl	8001704 <BSP_LCD_GetYSize>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d3eb      	bcc.n	8001794 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <BSP_LCD_Clear+0x64>)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <BSP_LCD_Clear+0x64>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ffa7 	bl	800171c <BSP_LCD_SetTextColor>
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000dac 	.word	0x20000dac

080017dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
 80017e6:	460b      	mov	r3, r1
 80017e8:	80bb      	strh	r3, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <BSP_LCD_DisplayChar+0x50>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <BSP_LCD_DisplayChar+0x50>)
 80017fa:	6889      	ldr	r1, [r1, #8]
 80017fc:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80017fe:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <BSP_LCD_DisplayChar+0x50>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	889b      	ldrh	r3, [r3, #4]
 8001808:	3307      	adds	r3, #7
 800180a:	2b00      	cmp	r3, #0
 800180c:	da00      	bge.n	8001810 <BSP_LCD_DisplayChar+0x34>
 800180e:	3307      	adds	r3, #7
 8001810:	10db      	asrs	r3, r3, #3
 8001812:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001816:	441a      	add	r2, r3
 8001818:	88b9      	ldrh	r1, [r7, #4]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f981 	bl	8001b24 <LCD_DrawChar>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000dac 	.word	0x20000dac

08001830 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	81fb      	strh	r3, [r7, #14]
 800183e:	460b      	mov	r3, r1
 8001840:	81bb      	strh	r3, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 8001846:	2301      	movs	r3, #1
 8001848:	83fb      	strh	r3, [r7, #30]
 800184a:	2300      	movs	r3, #0
 800184c:	83bb      	strh	r3, [r7, #28]
  // STEPIEN: xsize not required
  // uint32_t size = 0, xsize = 0;
  uint32_t size = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  uint8_t  *ptr = pText;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001856:	e002      	b.n	800185e <BSP_LCD_DisplayStringAt+0x2e>
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	3301      	adds	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	617a      	str	r2, [r7, #20]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f6      	bne.n	8001858 <BSP_LCD_DisplayStringAt+0x28>
  
  /* Characters number per line */
  // STEPIEN: Not required
  // xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
  
  switch (Mode)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d013      	beq.n	8001898 <BSP_LCD_DisplayStringAt+0x68>
 8001870:	2b03      	cmp	r3, #3
 8001872:	d00e      	beq.n	8001892 <BSP_LCD_DisplayStringAt+0x62>
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11b      	bne.n	80018b0 <BSP_LCD_DisplayStringAt+0x80>
  {
  case CENTER_MODE:
    {
      // STEPIEN: Fixed error in code
      // refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
      refcolumn = Xpos - (size*DrawProp.pFont->Width) / 2;
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <BSP_LCD_DisplayStringAt+0xf4>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	461a      	mov	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fb03 f302 	mul.w	r3, r3, r2
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	b29b      	uxth	r3, r3
 800188a:	89fa      	ldrh	r2, [r7, #14]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	83fb      	strh	r3, [r7, #30]
      break;
 8001890:	e011      	b.n	80018b6 <BSP_LCD_DisplayStringAt+0x86>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	83fb      	strh	r3, [r7, #30]
      break;
 8001896:	e00e      	b.n	80018b6 <BSP_LCD_DisplayStringAt+0x86>
    }
  case RIGHT_MODE:
    {
      // STEPIEN: Fixed error in code
      // refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
      refcolumn =  Xpos - size*DrawProp.pFont->Width;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <BSP_LCD_DisplayStringAt+0xf4>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	889a      	ldrh	r2, [r3, #4]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	fb12 f303 	smulbb	r3, r2, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	89fa      	ldrh	r2, [r7, #14]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	83fb      	strh	r3, [r7, #30]
      break;
 80018ae:	e002      	b.n	80018b6 <BSP_LCD_DisplayStringAt+0x86>
    }    
  default:
    {
      refcolumn = Xpos;
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	83fb      	strh	r3, [r7, #30]
      break;
 80018b4:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80018b6:	e012      	b.n	80018de <BSP_LCD_DisplayStringAt+0xae>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	89b9      	ldrh	r1, [r7, #12]
 80018be:	8bfb      	ldrh	r3, [r7, #30]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff8b 	bl	80017dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <BSP_LCD_DisplayStringAt+0xf4>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	889a      	ldrh	r2, [r3, #4]
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    counter++;
 80018d8:	8bbb      	ldrh	r3, [r7, #28]
 80018da:	3301      	adds	r3, #1
 80018dc:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2dc      	uxtb	r4, r3
 80018ec:	f7ff fefe 	bl	80016ec <BSP_LCD_GetXSize>
 80018f0:	4601      	mov	r1, r0
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <BSP_LCD_DisplayStringAt+0xf4>)
 80018f6:	6892      	ldr	r2, [r2, #8]
 80018f8:	8892      	ldrh	r2, [r2, #4]
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	1acb      	subs	r3, r1, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <BSP_LCD_DisplayStringAt+0xf4>)
 8001904:	6892      	ldr	r2, [r2, #8]
 8001906:	8892      	ldrh	r2, [r2, #4]
 8001908:	4293      	cmp	r3, r2
 800190a:	bf2c      	ite	cs
 800190c:	2301      	movcs	r3, #1
 800190e:	2300      	movcc	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4023      	ands	r3, r4
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ce      	bne.n	80018b8 <BSP_LCD_DisplayStringAt+0x88>
  }
}
 800191a:	bf00      	nop
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	bf00      	nop
 8001924:	20000dac 	.word	0x20000dac

08001928 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 8001934:	f7ff ff12 	bl	800175c <BSP_LCD_GetFont>
 8001938:	4603      	mov	r3, r0
 800193a:	88db      	ldrh	r3, [r3, #6]
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	fb12 f303 	smulbb	r3, r2, r3
 8001942:	b299      	uxth	r1, r3
 8001944:	2303      	movs	r3, #3
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff ff71 	bl	8001830 <BSP_LCD_DisplayStringAt>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	460b      	mov	r3, r1
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <BSP_LCD_DrawHLine+0x6c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <BSP_LCD_DrawHLine+0x6c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a1c      	ldr	r4, [r3, #32]
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <BSP_LCD_DrawHLine+0x70>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b298      	uxth	r0, r3
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	88f9      	ldrh	r1, [r7, #6]
 800198a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800198c:	e015      	b.n	80019ba <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e00e      	b.n	80019b2 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	b29a      	uxth	r2, r3
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4413      	add	r3, r2
 800199c:	b298      	uxth	r0, r3
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <BSP_LCD_DrawHLine+0x70>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f000 f8a0 	bl	8001aec <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d3ec      	bcc.n	8001994 <BSP_LCD_DrawHLine+0x3c>
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000051c 	.word	0x2000051c
 80019c8:	20000dac 	.word	0x20000dac

080019cc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
 80019d6:	460b      	mov	r3, r1
 80019d8:	80bb      	strh	r3, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <BSP_LCD_DrawVLine+0x6c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00a      	beq.n	8001a02 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <BSP_LCD_DrawVLine+0x6c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <BSP_LCD_DrawVLine+0x70>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b298      	uxth	r0, r3
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	88ba      	ldrh	r2, [r7, #4]
 80019fc:	88f9      	ldrh	r1, [r7, #6]
 80019fe:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8001a00:	e015      	b.n	8001a2e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e00e      	b.n	8001a26 <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b299      	uxth	r1, r3
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <BSP_LCD_DrawVLine+0x70>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f866 	bl	8001aec <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3ec      	bcc.n	8001a08 <BSP_LCD_DrawVLine+0x3c>
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000051c 	.word	0x2000051c
 8001a3c:	20000dac 	.word	0x20000dac

08001a40 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	603a      	str	r2, [r7, #0]
 8001a4a:	80fb      	strh	r3, [r7, #6]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3312      	adds	r3, #18
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3314      	adds	r3, #20
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3316      	adds	r3, #22
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	461a      	mov	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	88b9      	ldrh	r1, [r7, #4]
 8001a92:	88f8      	ldrh	r0, [r7, #6]
 8001a94:	f000 f938 	bl	8001d08 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <BSP_LCD_DrawBitmap+0x94>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <BSP_LCD_DrawBitmap+0x94>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	88b9      	ldrh	r1, [r7, #4]
 8001aaa:	88f8      	ldrh	r0, [r7, #6]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001ab0:	f7ff fe1c 	bl	80016ec <BSP_LCD_GetXSize>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29c      	uxth	r4, r3
 8001ab8:	f7ff fe24 	bl	8001704 <BSP_LCD_GetYSize>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f91f 	bl	8001d08 <LCD_SetDisplayWindow>
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000051c 	.word	0x2000051c

08001ad8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <BSP_LCD_DisplayOn+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4798      	blx	r3
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000051c 	.word	0x2000051c

08001aec <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	460b      	mov	r3, r1
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LCD_DrawPixel+0x34>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <LCD_DrawPixel+0x34>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	88b9      	ldrh	r1, [r7, #4]
 8001b12:	88f8      	ldrh	r0, [r7, #6]
 8001b14:	4798      	blx	r3
  }
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000051c 	.word	0x2000051c

08001b24 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	603a      	str	r2, [r7, #0]
 8001b2e:	80fb      	strh	r3, [r7, #6]
 8001b30:	460b      	mov	r3, r1
 8001b32:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	82fb      	strh	r3, [r7, #22]
 8001b44:	2300      	movs	r3, #0
 8001b46:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8001b54:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <LCD_DrawChar+0x1c0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	88db      	ldrh	r3, [r3, #6]
 8001b5a:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8001b5c:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <LCD_DrawChar+0x1c0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	889b      	ldrh	r3, [r3, #4]
 8001b62:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8001b64:	8afa      	ldrh	r2, [r7, #22]
 8001b66:	8abb      	ldrh	r3, [r7, #20]
 8001b68:	fb12 f303 	smulbb	r3, r2, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	331b      	adds	r3, #27
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4a5d      	ldr	r2, [pc, #372]	; (8001ce8 <LCD_DrawChar+0x1c4>)
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8001b7a:	8afb      	ldrh	r3, [r7, #22]
 8001b7c:	8aba      	ldrh	r2, [r7, #20]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	331b      	adds	r3, #27
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	141a      	asrs	r2, r3, #16
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <LCD_DrawChar+0x1c8>)
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <LCD_DrawChar+0x1cc>)
 8001b90:	2236      	movs	r2, #54	; 0x36
 8001b92:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <LCD_DrawChar+0x1d0>)
 8001b96:	8abb      	ldrh	r3, [r7, #20]
 8001b98:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	141a      	asrs	r2, r3, #16
 8001b9e:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <LCD_DrawChar+0x1d4>)
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8001ba4:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <LCD_DrawChar+0x1d8>)
 8001ba6:	8afb      	ldrh	r3, [r7, #22]
 8001ba8:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8001baa:	8afb      	ldrh	r3, [r7, #22]
 8001bac:	141a      	asrs	r2, r3, #16
 8001bae:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <LCD_DrawChar+0x1dc>)
 8001bb0:	b292      	uxth	r2, r2
 8001bb2:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8001bb4:	8abb      	ldrh	r3, [r7, #20]
 8001bb6:	3307      	adds	r3, #7
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da00      	bge.n	8001bbe <LCD_DrawChar+0x9a>
 8001bbc:	3307      	adds	r3, #7
 8001bbe:	10db      	asrs	r3, r3, #3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	8abb      	ldrh	r3, [r7, #20]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	e078      	b.n	8001cc6 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8001bd4:	8abb      	ldrh	r3, [r7, #20]
 8001bd6:	3307      	adds	r3, #7
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da00      	bge.n	8001bde <LCD_DrawChar+0xba>
 8001bdc:	3307      	adds	r3, #7
 8001bde:	10db      	asrs	r3, r3, #3
 8001be0:	461a      	mov	r2, r3
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	fb03 f302 	mul.w	r3, r3, r2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8001bee:	8abb      	ldrh	r3, [r7, #20]
 8001bf0:	3b11      	subs	r3, #17
 8001bf2:	2b07      	cmp	r3, #7
 8001bf4:	d80c      	bhi.n	8001c10 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4313      	orrs	r3, r2
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	3202      	adds	r2, #2
 8001c0a:	7812      	ldrb	r2, [r2, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	3b09      	subs	r3, #9
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d807      	bhi.n	8001c28 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	3201      	adds	r2, #1
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8001c28:	8abb      	ldrh	r3, [r7, #20]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d802      	bhi.n	8001c36 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
 8001c3a:	e03d      	b.n	8001cb8 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8001c3c:	8afa      	ldrh	r2, [r7, #22]
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	8aba      	ldrh	r2, [r7, #20]
 8001c46:	fb02 f203 	mul.w	r2, r2, r3
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	331b      	adds	r3, #27
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8001c54:	8aba      	ldrh	r2, [r7, #20]
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	7cfb      	ldrb	r3, [r7, #19]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	2201      	movs	r2, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <LCD_DrawChar+0x1c0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b2d9      	uxtb	r1, r3
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <LCD_DrawChar+0x1e0>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <LCD_DrawChar+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0a1a      	lsrs	r2, r3, #8
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2d1      	uxtb	r1, r2
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <LCD_DrawChar+0x1e0>)
 8001c8e:	54d1      	strb	r1, [r2, r3]
 8001c90:	e00f      	b.n	8001cb2 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <LCD_DrawChar+0x1c0>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	b2d9      	uxtb	r1, r3
 8001c98:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <LCD_DrawChar+0x1e0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	460a      	mov	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <LCD_DrawChar+0x1c0>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0a1a      	lsrs	r2, r3, #8
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2d1      	uxtb	r1, r2
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <LCD_DrawChar+0x1e0>)
 8001cb0:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	8abb      	ldrh	r3, [r7, #20]
 8001cba:	6a3a      	ldr	r2, [r7, #32]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d3bd      	bcc.n	8001c3c <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	8afb      	ldrh	r3, [r7, #22]
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d382      	bcc.n	8001bd4 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8001cce:	88b9      	ldrh	r1, [r7, #4]
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <LCD_DrawChar+0x1e0>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff feb3 	bl	8001a40 <BSP_LCD_DrawBitmap>
}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000dac 	.word	0x20000dac
 8001ce8:	20000522 	.word	0x20000522
 8001cec:	20000524 	.word	0x20000524
 8001cf0:	2000052a 	.word	0x2000052a
 8001cf4:	20000532 	.word	0x20000532
 8001cf8:	20000534 	.word	0x20000534
 8001cfc:	20000536 	.word	0x20000536
 8001d00:	20000538 	.word	0x20000538
 8001d04:	20000520 	.word	0x20000520

08001d08 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	4611      	mov	r1, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	80fb      	strh	r3, [r7, #6]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80bb      	strh	r3, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	807b      	strh	r3, [r7, #2]
 8001d22:	4613      	mov	r3, r2
 8001d24:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <LCD_SetDisplayWindow+0x40>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <LCD_SetDisplayWindow+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69dc      	ldr	r4, [r3, #28]
 8001d36:	883b      	ldrh	r3, [r7, #0]
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	88b9      	ldrh	r1, [r7, #4]
 8001d3c:	88f8      	ldrh	r0, [r7, #6]
 8001d3e:	47a0      	blx	r4
  }  
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	2000051c 	.word	0x2000051c

08001d4c <TP_Init>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TP_Init(void) 
{ 
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
//  GPIO_Init(Open_TP_IRQ_PORT, &GPIO_InitStructure);  

//  GPIO_SetBits(GPIOI,GPIO_Pin_3);
//    TP_CS(1); 
//    ADS7843_SPI_Init(); 
} 
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
  while(i--);
 8001d68:	bf00      	nop
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1fa      	bne.n	8001d6a <DelayUS+0x10>
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 8001d8a:	1df9      	adds	r1, r7, #7
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d90:	2201      	movs	r2, #1
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <WR_CMD+0x20>)
 8001d94:	f007 fb58 	bl	8009448 <HAL_SPI_Transmit>
} 
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20011114 	.word	0x20011114

08001da4 <RD_AD>:
//          is floating during a read command, which means the the touch panel device
//          could see a random start command bit and start processing it.
//          Note that the touch panel code does very little error checking!

static int RD_AD(void)  
{ 
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
  uint8_t outbuf[2] = {0,0}; // STEPIEN: Data to write to ensure it is not a command.
 8001daa:	2300      	movs	r3, #0
 8001dac:	723b      	strb	r3, [r7, #8]
 8001dae:	2300      	movs	r3, #0
 8001db0:	727b      	strb	r3, [r7, #9]
  uint8_t buf[2];
  int value;
  // HAL_SPI_Receive(&TP_hspi,buf,2,1000); STEPIEN: Replace with the following.
  HAL_SPI_TransmitReceive(&TP_hspi,outbuf,buf,2,1000);
 8001db2:	1d3a      	adds	r2, r7, #4
 8001db4:	f107 0108 	add.w	r1, r7, #8
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	4809      	ldr	r0, [pc, #36]	; (8001de8 <RD_AD+0x44>)
 8001dc2:	f007 fc75 	bl	80096b0 <HAL_SPI_TransmitReceive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 4; // STEPIEN: Was 3 It is 12 bit ADC
 8001dc6:	793b      	ldrb	r3, [r7, #4]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	60fb      	str	r3, [r7, #12]
  return value;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
} 
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20011114 	.word	0x20011114

08001dec <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8001df2:	2200      	movs	r2, #0
 8001df4:	2110      	movs	r1, #16
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <Read_X+0x3c>)
 8001df8:	f005 fe7a 	bl	8007af0 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff ffac 	bl	8001d5a <DelayUS>
  WR_CMD(CHX); 
 8001e02:	2090      	movs	r0, #144	; 0x90
 8001e04:	f7ff ffbc 	bl	8001d80 <WR_CMD>
  DelayUS(1); 
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff ffa6 	bl	8001d5a <DelayUS>
  i=RD_AD(); 
 8001e0e:	f7ff ffc9 	bl	8001da4 <RD_AD>
 8001e12:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8001e14:	2201      	movs	r2, #1
 8001e16:	2110      	movs	r1, #16
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <Read_X+0x3c>)
 8001e1a:	f005 fe69 	bl	8007af0 <HAL_GPIO_WritePin>
  return i;    
 8001e1e:	687b      	ldr	r3, [r7, #4]
} 
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40020800 	.word	0x40020800

08001e2c <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8001e32:	2200      	movs	r2, #0
 8001e34:	2110      	movs	r1, #16
 8001e36:	480c      	ldr	r0, [pc, #48]	; (8001e68 <Read_Y+0x3c>)
 8001e38:	f005 fe5a 	bl	8007af0 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7ff ff8c 	bl	8001d5a <DelayUS>
  WR_CMD(CHY); 
 8001e42:	20d0      	movs	r0, #208	; 0xd0
 8001e44:	f7ff ff9c 	bl	8001d80 <WR_CMD>
  DelayUS(1); 
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff ff86 	bl	8001d5a <DelayUS>
  i=RD_AD(); 
 8001e4e:	f7ff ffa9 	bl	8001da4 <RD_AD>
 8001e52:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8001e54:	2201      	movs	r2, #1
 8001e56:	2110      	movs	r1, #16
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <Read_Y+0x3c>)
 8001e5a:	f005 fe49 	bl	8007af0 <HAL_GPIO_WritePin>
  return i;     
 8001e5e:	687b      	ldr	r3, [r7, #4]
} 
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40020800 	.word	0x40020800

08001e6c <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 8001e76:	f7ff ffb9 	bl	8001dec <Read_X>
 8001e7a:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff ff6c 	bl	8001d5a <DelayUS>
  ady=Read_Y(); 
 8001e82:	f7ff ffd3 	bl	8001e2c <Read_Y>
 8001e86:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	601a      	str	r2, [r3, #0]
  *y=ady; 
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	601a      	str	r2, [r3, #0]
} 
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	80fb      	strh	r3, [r7, #6]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	3b0d      	subs	r3, #13
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	88b9      	ldrh	r1, [r7, #4]
 8001eb4:	220a      	movs	r2, #10
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd4e 	bl	8001958 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	88b9      	ldrh	r1, [r7, #4]
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fd46 	bl	8001958 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 8001ecc:	88bb      	ldrh	r3, [r7, #4]
 8001ece:	3b0d      	subs	r3, #13
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	220a      	movs	r2, #10
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd78 	bl	80019cc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	220a      	movs	r2, #10
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fd70 	bl	80019cc <BSP_LCD_DrawVLine>

}  
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09c      	sub	sp, #112	; 0x70
 8001ef8:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2248      	movs	r2, #72	; 0x48
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f009 fe0a 	bl	800bb20 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 8001f0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ffa8 	bl	8001e6c <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 8001f1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f28:	440b      	add	r3, r1
 8001f2a:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 8001f2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f34:	3309      	adds	r3, #9
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 8001f42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f46:	3301      	adds	r3, #1
 8001f48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	4885      	ldr	r0, [pc, #532]	; (8002164 <Read_Ads7846+0x270>)
 8001f50:	f005 fdb6 	bl	8007ac0 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <Read_Ads7846+0x6e>
 8001f5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d9d4      	bls.n	8001f0c <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 8001f62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	f040 80f6 	bne.w	8002158 <Read_Ads7846+0x264>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	441a      	add	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a7c      	ldr	r2, [pc, #496]	; (8002168 <Read_Ads7846+0x274>)
 8001f78:	fb82 1203 	smull	r1, r2, r2, r3
 8001f7c:	17db      	asrs	r3, r3, #31
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	441a      	add	r2, r3
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a76      	ldr	r2, [pc, #472]	; (8002168 <Read_Ads7846+0x274>)
 8001f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f92:	17db      	asrs	r3, r3, #31
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a71      	ldr	r2, [pc, #452]	; (8002168 <Read_Ads7846+0x274>)
 8001fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa8:	17db      	asrs	r3, r3, #31
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 8001fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8001fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8001fbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 8001fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bfb8      	it	lt
 8001fcc:	425b      	neglt	r3, r3
 8001fce:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8001fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bfb8      	it	lt
 8001fd6:	425b      	neglt	r3, r3
 8001fd8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8001fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bfb8      	it	lt
 8001fe0:	425b      	neglt	r3, r3
 8001fe2:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	dd07      	ble.n	8001ffa <Read_Ads7846+0x106>
 8001fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	dd04      	ble.n	8001ffa <Read_Ads7846+0x106>
 8001ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	dd01      	ble.n	8001ffa <Read_Ads7846+0x106>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e0af      	b.n	800215a <Read_Ads7846+0x266>
   
    if(m0<m1)
 8001ffa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ffe:	429a      	cmp	r2, r3
 8002000:	da17      	bge.n	8002032 <Read_Ads7846+0x13e>
    {
      if(m2<m0) 
 8002002:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002006:	429a      	cmp	r2, r3
 8002008:	da09      	bge.n	800201e <Read_Ads7846+0x12a>
        screen.x=(temp[0]+temp[2])/2;
 800200a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	4413      	add	r3, r2
 8002010:	0fda      	lsrs	r2, r3, #31
 8002012:	4413      	add	r3, r2
 8002014:	105b      	asrs	r3, r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b54      	ldr	r3, [pc, #336]	; (800216c <Read_Ads7846+0x278>)
 800201a:	801a      	strh	r2, [r3, #0]
 800201c:	e020      	b.n	8002060 <Read_Ads7846+0x16c>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 800201e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002022:	4413      	add	r3, r2
 8002024:	0fda      	lsrs	r2, r3, #31
 8002026:	4413      	add	r3, r2
 8002028:	105b      	asrs	r3, r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b4f      	ldr	r3, [pc, #316]	; (800216c <Read_Ads7846+0x278>)
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	e016      	b.n	8002060 <Read_Ads7846+0x16c>
    }
    else if(m2<m1) 
 8002032:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002036:	429a      	cmp	r2, r3
 8002038:	da09      	bge.n	800204e <Read_Ads7846+0x15a>
      screen.x=(temp[0]+temp[2])/2;
 800203a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	4413      	add	r3, r2
 8002040:	0fda      	lsrs	r2, r3, #31
 8002042:	4413      	add	r3, r2
 8002044:	105b      	asrs	r3, r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <Read_Ads7846+0x278>)
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	e008      	b.n	8002060 <Read_Ads7846+0x16c>
    else 
      screen.x=(temp[1]+temp[2])/2;
 800204e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002052:	4413      	add	r3, r2
 8002054:	0fda      	lsrs	r2, r3, #31
 8002056:	4413      	add	r3, r2
 8002058:	105b      	asrs	r3, r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b43      	ldr	r3, [pc, #268]	; (800216c <Read_Ads7846+0x278>)
 800205e:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8002060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	441a      	add	r2, r3
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	4413      	add	r3, r2
 800206a:	4a3f      	ldr	r2, [pc, #252]	; (8002168 <Read_Ads7846+0x274>)
 800206c:	fb82 1203 	smull	r1, r2, r2, r3
 8002070:	17db      	asrs	r3, r3, #31
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8002076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207a:	441a      	add	r2, r3
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	4413      	add	r3, r2
 8002080:	4a39      	ldr	r2, [pc, #228]	; (8002168 <Read_Ads7846+0x274>)
 8002082:	fb82 1203 	smull	r1, r2, r2, r3
 8002086:	17db      	asrs	r3, r3, #31
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 800208c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	441a      	add	r2, r3
 8002092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002094:	4413      	add	r3, r2
 8002096:	4a34      	ldr	r2, [pc, #208]	; (8002168 <Read_Ads7846+0x274>)
 8002098:	fb82 1203 	smull	r1, r2, r2, r3
 800209c:	17db      	asrs	r3, r3, #31
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 80020a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 80020aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 80020b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 80020ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bfb8      	it	lt
 80020c0:	425b      	neglt	r3, r3
 80020c2:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 80020c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bfb8      	it	lt
 80020ca:	425b      	neglt	r3, r3
 80020cc:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 80020ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bfb8      	it	lt
 80020d4:	425b      	neglt	r3, r3
 80020d6:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 80020d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020da:	2b02      	cmp	r3, #2
 80020dc:	dd07      	ble.n	80020ee <Read_Ads7846+0x1fa>
 80020de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	dd04      	ble.n	80020ee <Read_Ads7846+0x1fa>
 80020e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	dd01      	ble.n	80020ee <Read_Ads7846+0x1fa>
 80020ea:	2300      	movs	r3, #0
 80020ec:	e035      	b.n	800215a <Read_Ads7846+0x266>
   
    if(m0<m1)
 80020ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f2:	429a      	cmp	r2, r3
 80020f4:	da17      	bge.n	8002126 <Read_Ads7846+0x232>
    {
      if(m2<m0) 
 80020f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020fa:	429a      	cmp	r2, r3
 80020fc:	da09      	bge.n	8002112 <Read_Ads7846+0x21e>
        screen.y=(temp[0]+temp[2])/2;
 80020fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002102:	4413      	add	r3, r2
 8002104:	0fda      	lsrs	r2, r3, #31
 8002106:	4413      	add	r3, r2
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <Read_Ads7846+0x278>)
 800210e:	805a      	strh	r2, [r3, #2]
 8002110:	e020      	b.n	8002154 <Read_Ads7846+0x260>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 8002112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002116:	4413      	add	r3, r2
 8002118:	0fda      	lsrs	r2, r3, #31
 800211a:	4413      	add	r3, r2
 800211c:	105b      	asrs	r3, r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <Read_Ads7846+0x278>)
 8002122:	805a      	strh	r2, [r3, #2]
 8002124:	e016      	b.n	8002154 <Read_Ads7846+0x260>
      }
    else if(m2<m1) 
 8002126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800212a:	429a      	cmp	r2, r3
 800212c:	da09      	bge.n	8002142 <Read_Ads7846+0x24e>
       screen.y=(temp[0]+temp[2])/2;
 800212e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	4413      	add	r3, r2
 8002134:	0fda      	lsrs	r2, r3, #31
 8002136:	4413      	add	r3, r2
 8002138:	105b      	asrs	r3, r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <Read_Ads7846+0x278>)
 800213e:	805a      	strh	r2, [r3, #2]
 8002140:	e008      	b.n	8002154 <Read_Ads7846+0x260>
    else
       screen.y=(temp[1]+temp[2])/2;
 8002142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	4413      	add	r3, r2
 8002148:	0fda      	lsrs	r2, r3, #31
 800214a:	4413      	add	r3, r2
 800214c:	105b      	asrs	r3, r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <Read_Ads7846+0x278>)
 8002152:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <Read_Ads7846+0x278>)
 8002156:	e000      	b.n	800215a <Read_Ads7846+0x266>
  }
  return 0; 
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3770      	adds	r7, #112	; 0x70
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020800 	.word	0x40020800
 8002168:	55555556 	.word	0x55555556
 800216c:	20000888 	.word	0x20000888

08002170 <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 800217c:	2301      	movs	r3, #1
 800217e:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3308      	adds	r3, #8
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	3204      	adds	r2, #4
 8002192:	8852      	ldrh	r2, [r2, #2]
 8002194:	4611      	mov	r1, r2
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	3208      	adds	r2, #8
 800219a:	8852      	ldrh	r2, [r2, #2]
 800219c:	1a8a      	subs	r2, r1, r2
 800219e:	fb02 f203 	mul.w	r2, r2, r3
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3304      	adds	r3, #4
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3308      	adds	r3, #8
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	1acb      	subs	r3, r1, r3
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	8849      	ldrh	r1, [r1, #2]
 80021b6:	4608      	mov	r0, r1
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	3108      	adds	r1, #8
 80021bc:	8849      	ldrh	r1, [r1, #2]
 80021be:	1a41      	subs	r1, r0, r1
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9ac 	bl	8000524 <__aeabi_i2d>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	f7fe fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
 80021f2:	e145      	b.n	8002480 <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3308      	adds	r3, #8
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	3204      	adds	r2, #4
 8002206:	8852      	ldrh	r2, [r2, #2]
 8002208:	4611      	mov	r1, r2
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	3208      	adds	r2, #8
 800220e:	8852      	ldrh	r2, [r2, #2]
 8002210:	1a8a      	subs	r2, r1, r2
 8002212:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3308      	adds	r3, #8
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	1acb      	subs	r3, r1, r3
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	8849      	ldrh	r1, [r1, #2]
 800222a:	4608      	mov	r0, r1
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	3108      	adds	r1, #8
 8002230:	8849      	ldrh	r1, [r1, #2]
 8002232:	1a41      	subs	r1, r0, r1
 8002234:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f972 	bl	8000524 <__aeabi_i2d>
 8002240:	4603      	mov	r3, r0
 8002242:	460c      	mov	r4, r1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	e9c2 3400 	strd	r3, r4, [r2]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3308      	adds	r3, #8
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	3204      	adds	r2, #4
 800225c:	8812      	ldrh	r2, [r2, #0]
 800225e:	4611      	mov	r1, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	3208      	adds	r2, #8
 8002264:	8812      	ldrh	r2, [r2, #0]
 8002266:	1a8a      	subs	r2, r1, r2
 8002268:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3308      	adds	r3, #8
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	1acb      	subs	r3, r1, r3
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	3104      	adds	r1, #4
 800227e:	8809      	ldrh	r1, [r1, #0]
 8002280:	4608      	mov	r0, r1
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	3108      	adds	r1, #8
 8002286:	8809      	ldrh	r1, [r1, #0]
 8002288:	1a41      	subs	r1, r0, r1
 800228a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f947 	bl	8000524 <__aeabi_i2d>
 8002296:	4603      	mov	r3, r0
 8002298:	460c      	mov	r4, r1
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	e9c2 3402 	strd	r3, r4, [r2, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3308      	adds	r3, #8
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3304      	adds	r3, #4
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	fb03 f202 	mul.w	r2, r3, r2
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3304      	adds	r3, #4
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3308      	adds	r3, #8
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	fb03 f301 	mul.w	r3, r3, r1
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	8852      	ldrh	r2, [r2, #2]
 80022ca:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3308      	adds	r3, #8
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	fb03 f101 	mul.w	r1, r3, r1
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3308      	adds	r3, #8
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	fb03 f300 	mul.w	r3, r3, r0
 80022ee:	1acb      	subs	r3, r1, r3
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	3104      	adds	r1, #4
 80022f4:	8849      	ldrh	r1, [r1, #2]
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80022fa:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3304      	adds	r3, #4
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	fb03 f101 	mul.w	r1, r3, r1
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3304      	adds	r3, #4
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	fb03 f300 	mul.w	r3, r3, r0
 800231c:	1acb      	subs	r3, r1, r3
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	3108      	adds	r1, #8
 8002322:	8849      	ldrh	r1, [r1, #2]
 8002324:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8002328:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f8fa 	bl	8000524 <__aeabi_i2d>
 8002330:	4603      	mov	r3, r0
 8002332:	460c      	mov	r4, r1
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	e9c2 3404 	strd	r3, r4, [r2, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	885b      	ldrh	r3, [r3, #2]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3308      	adds	r3, #8
 8002344:	885b      	ldrh	r3, [r3, #2]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	3204      	adds	r2, #4
 800234c:	8852      	ldrh	r2, [r2, #2]
 800234e:	4611      	mov	r1, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	3208      	adds	r2, #8
 8002354:	8852      	ldrh	r2, [r2, #2]
 8002356:	1a8a      	subs	r2, r1, r2
 8002358:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3304      	adds	r3, #4
 8002360:	885b      	ldrh	r3, [r3, #2]
 8002362:	4619      	mov	r1, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3308      	adds	r3, #8
 8002368:	885b      	ldrh	r3, [r3, #2]
 800236a:	1acb      	subs	r3, r1, r3
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	8849      	ldrh	r1, [r1, #2]
 8002370:	4608      	mov	r0, r1
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	3108      	adds	r1, #8
 8002376:	8849      	ldrh	r1, [r1, #2]
 8002378:	1a41      	subs	r1, r0, r1
 800237a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8cf 	bl	8000524 <__aeabi_i2d>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	e9c2 3406 	strd	r3, r4, [r2, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3308      	adds	r3, #8
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	3204      	adds	r2, #4
 80023a2:	8852      	ldrh	r2, [r2, #2]
 80023a4:	4611      	mov	r1, r2
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	3208      	adds	r2, #8
 80023aa:	8852      	ldrh	r2, [r2, #2]
 80023ac:	1a8a      	subs	r2, r1, r2
 80023ae:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	885b      	ldrh	r3, [r3, #2]
 80023b6:	4619      	mov	r1, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3308      	adds	r3, #8
 80023bc:	885b      	ldrh	r3, [r3, #2]
 80023be:	1acb      	subs	r3, r1, r3
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	3104      	adds	r1, #4
 80023c4:	8809      	ldrh	r1, [r1, #0]
 80023c6:	4608      	mov	r0, r1
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	3108      	adds	r1, #8
 80023cc:	8809      	ldrh	r1, [r1, #0]
 80023ce:	1a41      	subs	r1, r0, r1
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f8a4 	bl	8000524 <__aeabi_i2d>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	e9c2 3408 	strd	r3, r4, [r2, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3308      	adds	r3, #8
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3304      	adds	r3, #4
 80023f2:	885b      	ldrh	r3, [r3, #2]
 80023f4:	fb03 f202 	mul.w	r2, r3, r2
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3304      	adds	r3, #4
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3308      	adds	r3, #8
 8002404:	885b      	ldrh	r3, [r3, #2]
 8002406:	fb03 f301 	mul.w	r3, r3, r1
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	8852      	ldrh	r2, [r2, #2]
 8002410:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3308      	adds	r3, #8
 800241e:	885b      	ldrh	r3, [r3, #2]
 8002420:	fb03 f101 	mul.w	r1, r3, r1
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3308      	adds	r3, #8
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	885b      	ldrh	r3, [r3, #2]
 8002430:	fb03 f300 	mul.w	r3, r3, r0
 8002434:	1acb      	subs	r3, r1, r3
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	3104      	adds	r1, #4
 800243a:	8849      	ldrh	r1, [r1, #2]
 800243c:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8002440:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3304      	adds	r3, #4
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	885b      	ldrh	r3, [r3, #2]
 800244e:	fb03 f101 	mul.w	r1, r3, r1
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3304      	adds	r3, #4
 800245c:	885b      	ldrh	r3, [r3, #2]
 800245e:	fb03 f300 	mul.w	r3, r3, r0
 8002462:	1acb      	subs	r3, r1, r3
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	3108      	adds	r1, #8
 8002468:	8849      	ldrh	r1, [r1, #2]
 800246a:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 800246e:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f857 	bl	8000524 <__aeabi_i2d>
 8002476:	4603      	mov	r3, r0
 8002478:	460c      	mov	r4, r1
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}

0800248a <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 800248a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f7fe fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f040 8091 	bne.w	80025d8 <getDisplayPoint+0x14e>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f82f 	bl	8000524 <__aeabi_i2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4620      	mov	r0, r4
 80024cc:	4629      	mov	r1, r5
 80024ce:	f7fe f893 	bl	80005f8 <__aeabi_dmul>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	4698      	mov	r8, r3
 80024d8:	46a1      	mov	r9, r4
                      (matrixPtr->Bn * screenPtr->y) + 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	885b      	ldrh	r3, [r3, #2]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f81d 	bl	8000524 <__aeabi_i2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4620      	mov	r0, r4
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7fe f881 	bl	80005f8 <__aeabi_dmul>
 80024f6:	4603      	mov	r3, r0
 80024f8:	460c      	mov	r4, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 80024fa:	461a      	mov	r2, r3
 80024fc:	4623      	mov	r3, r4
 80024fe:	4640      	mov	r0, r8
 8002500:	4649      	mov	r1, r9
 8002502:	f7fd fec3 	bl	800028c <__adddf3>
 8002506:	4603      	mov	r3, r0
 8002508:	460c      	mov	r4, r1
 800250a:	4618      	mov	r0, r3
 800250c:	4621      	mov	r1, r4
                       matrixPtr->Cn 
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	f7fd feb8 	bl	800028c <__adddf3>
 800251c:	4603      	mov	r3, r0
 800251e:	460c      	mov	r4, r1
 8002520:	4618      	mov	r0, r3
 8002522:	4621      	mov	r1, r4
                    ) / matrixPtr->Divider ;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800252a:	461a      	mov	r2, r3
 800252c:	4623      	mov	r3, r4
 800252e:	f7fe f98d 	bl	800084c <__aeabi_ddiv>
 8002532:	4603      	mov	r3, r0
 8002534:	460c      	mov	r4, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8002536:	4618      	mov	r0, r3
 8002538:	4621      	mov	r1, r4
 800253a:	f7fe fb35 	bl	8000ba8 <__aeabi_d2uiz>
 800253e:	4603      	mov	r3, r0
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd ffe7 	bl	8000524 <__aeabi_i2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fe f84b 	bl	80005f8 <__aeabi_dmul>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	4698      	mov	r8, r3
 8002568:	46a1      	mov	r9, r4
                      (matrixPtr->En * screenPtr->y) + 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	885b      	ldrh	r3, [r3, #2]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ffd5 	bl	8000524 <__aeabi_i2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fe f839 	bl	80005f8 <__aeabi_dmul>
 8002586:	4603      	mov	r3, r0
 8002588:	460c      	mov	r4, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 800258a:	461a      	mov	r2, r3
 800258c:	4623      	mov	r3, r4
 800258e:	4640      	mov	r0, r8
 8002590:	4649      	mov	r1, r9
 8002592:	f7fd fe7b 	bl	800028c <__adddf3>
 8002596:	4603      	mov	r3, r0
 8002598:	460c      	mov	r4, r1
 800259a:	4618      	mov	r0, r3
 800259c:	4621      	mov	r1, r4
                       matrixPtr->Fn 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 80025a4:	461a      	mov	r2, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	f7fd fe70 	bl	800028c <__adddf3>
 80025ac:	4603      	mov	r3, r0
 80025ae:	460c      	mov	r4, r1
 80025b0:	4618      	mov	r0, r3
 80025b2:	4621      	mov	r1, r4
                    ) / matrixPtr->Divider ;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80025ba:	461a      	mov	r2, r3
 80025bc:	4623      	mov	r3, r4
 80025be:	f7fe f945 	bl	800084c <__aeabi_ddiv>
 80025c2:	4603      	mov	r3, r0
 80025c4:	460c      	mov	r4, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80025c6:	4618      	mov	r0, r3
 80025c8:	4621      	mov	r1, r4
 80025ca:	f7fe faed 	bl	8000ba8 <__aeabi_d2uiz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	805a      	strh	r2, [r3, #2]
 80025d6:	e001      	b.n	80025dc <getDisplayPoint+0x152>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080025e8 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	71fb      	strb	r3, [r7, #7]
 80025f2:	e04b      	b.n	800268c <TouchPanel_Calibrate+0xa4>
  {
    BSP_LCD_SetFont(&Font12);
 80025f4:	482d      	ldr	r0, [pc, #180]	; (80026ac <TouchPanel_Calibrate+0xc4>)
 80025f6:	f7ff f8a1 	bl	800173c <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80025fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025fe:	f7ff f8b9 	bl	8001774 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8002602:	201f      	movs	r0, #31
 8002604:	f7ff f88a 	bl	800171c <BSP_LCD_SetTextColor>
    // STEPIEN: Changed to centre string
    // BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2, 0, (uint8_t *)"Touch crosshair to calibrate", CENTER_MODE);
 8002608:	f7ff f870 	bl	80016ec <BSP_LCD_GetXSize>
 800260c:	4603      	mov	r3, r0
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	b298      	uxth	r0, r3
 8002612:	2301      	movs	r3, #1
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <TouchPanel_Calibrate+0xc8>)
 8002616:	2100      	movs	r1, #0
 8002618:	f7ff f90a 	bl	8001830 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
 800261c:	4825      	ldr	r0, [pc, #148]	; (80026b4 <TouchPanel_Calibrate+0xcc>)
 800261e:	f7ff f88d 	bl	800173c <BSP_LCD_SetFont>
    // STEPIEN: Changed to centre string
    // BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2, (uint8_t*)"Waveshare LCD", CENTER_MODE);
 8002622:	f7ff f863 	bl	80016ec <BSP_LCD_GetXSize>
 8002626:	4603      	mov	r3, r0
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	b29c      	uxth	r4, r3
 800262c:	f7ff f86a 	bl	8001704 <BSP_LCD_GetYSize>
 8002630:	4603      	mov	r3, r0
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	b299      	uxth	r1, r3
 8002636:	2301      	movs	r3, #1
 8002638:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <TouchPanel_Calibrate+0xd0>)
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff f8f8 	bl	8001830 <BSP_LCD_DisplayStringAt>
    HAL_Delay(200);
 8002640:	20c8      	movs	r0, #200	; 0xc8
 8002642:	f003 ffff 	bl	8006644 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <TouchPanel_Calibrate+0xd4>)
 800264a:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <TouchPanel_Calibrate+0xd4>)
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	885b      	ldrh	r3, [r3, #2]
 8002658:	4619      	mov	r1, r3
 800265a:	f7ff fc1f 	bl	8001e9c <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 800265e:	f7ff fc49 	bl	8001ef4 <Read_Ads7846>
 8002662:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f9      	beq.n	800265e <TouchPanel_Calibrate+0x76>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	8811      	ldrh	r1, [r2, #0]
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <TouchPanel_Calibrate+0xd8>)
 8002672:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	8851      	ldrh	r1, [r2, #2]
 800267c:	4a10      	ldr	r2, [pc, #64]	; (80026c0 <TouchPanel_Calibrate+0xd8>)
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	460a      	mov	r2, r1
 8002684:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	3301      	adds	r3, #1
 800268a:	71fb      	strb	r3, [r7, #7]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d9b0      	bls.n	80025f4 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <TouchPanel_Calibrate+0xdc>)
 8002694:	490a      	ldr	r1, [pc, #40]	; (80026c0 <TouchPanel_Calibrate+0xd8>)
 8002696:	4809      	ldr	r0, [pc, #36]	; (80026bc <TouchPanel_Calibrate+0xd4>)
 8002698:	f7ff fd6a 	bl	8002170 <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff f869 	bl	8001774 <BSP_LCD_Clear>
} 
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000048 	.word	0x20000048
 80026b0:	0800e908 	.word	0x0800e908
 80026b4:	20000058 	.word	0x20000058
 80026b8:	0800e928 	.word	0x0800e928
 80026bc:	2000003c 	.word	0x2000003c
 80026c0:	20000dbc 	.word	0x20000dbc
 80026c4:	20000dc8 	.word	0x20000dc8

080026c8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80026ce:	463b      	mov	r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <MX_ADC1_Init+0x98>)
 80026dc:	4a21      	ldr	r2, [pc, #132]	; (8002764 <MX_ADC1_Init+0x9c>)
 80026de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <MX_ADC1_Init+0x98>)
 80026e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <MX_ADC1_Init+0x98>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <MX_ADC1_Init+0x98>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_ADC1_Init+0x98>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MX_ADC1_Init+0x98>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_ADC1_Init+0x98>)
 8002704:	2200      	movs	r2, #0
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_ADC1_Init+0x98>)
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <MX_ADC1_Init+0xa0>)
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_ADC1_Init+0x98>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_ADC1_Init+0x98>)
 8002716:	2201      	movs	r2, #1
 8002718:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_ADC1_Init+0x98>)
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_ADC1_Init+0x98>)
 8002724:	2201      	movs	r2, #1
 8002726:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <MX_ADC1_Init+0x98>)
 800272a:	f003 ffad 	bl	8006688 <HAL_ADC_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002734:	f003 f86a 	bl	800580c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002738:	2305      	movs	r3, #5
 800273a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002744:	463b      	mov	r3, r7
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_ADC1_Init+0x98>)
 800274a:	f004 f8dd 	bl	8006908 <HAL_ADC_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002754:	f003 f85a 	bl	800580c <Error_Handler>
  }

}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000e48 	.word	0x20000e48
 8002764:	40012000 	.word	0x40012000
 8002768:	0f000001 	.word	0x0f000001

0800276c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002772:	463b      	mov	r3, r7
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <MX_ADC2_Init+0x98>)
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <MX_ADC2_Init+0x9c>)
 8002782:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <MX_ADC2_Init+0x98>)
 8002786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800278a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_ADC2_Init+0x98>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <MX_ADC2_Init+0x98>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <MX_ADC2_Init+0x98>)
 800279a:	2201      	movs	r2, #1
 800279c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_ADC2_Init+0x98>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <MX_ADC2_Init+0x98>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <MX_ADC2_Init+0x98>)
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <MX_ADC2_Init+0xa0>)
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_ADC2_Init+0x98>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_ADC2_Init+0x98>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_ADC2_Init+0x98>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_ADC2_Init+0x98>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <MX_ADC2_Init+0x98>)
 80027ce:	f003 ff5b 	bl	8006688 <HAL_ADC_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80027d8:	f003 f818 	bl	800580c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80027dc:	2304      	movs	r3, #4
 80027de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027e8:	463b      	mov	r3, r7
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_ADC2_Init+0x98>)
 80027ee:	f004 f88b 	bl	8006908 <HAL_ADC_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80027f8:	f003 f808 	bl	800580c <Error_Handler>
  }

}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000e00 	.word	0x20000e00
 8002808:	40012100 	.word	0x40012100
 800280c:	0f000001 	.word	0x0f000001

08002810 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_ADC_MspInit+0x198>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d158      	bne.n	80028e4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	4b5d      	ldr	r3, [pc, #372]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a5c      	ldr	r2, [pc, #368]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b56      	ldr	r3, [pc, #344]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a55      	ldr	r2, [pc, #340]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 800286a:	2320      	movs	r3, #32
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286e:	2303      	movs	r3, #3
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	484c      	ldr	r0, [pc, #304]	; (80029b0 <HAL_ADC_MspInit+0x1a0>)
 800287e:	f004 ff85 	bl	800778c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 8002884:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_ADC_MspInit+0x1a8>)
 8002886:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002888:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002894:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800289a:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 800289c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028aa:	4b42      	ldr	r3, [pc, #264]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028b2:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028c0:	4b3c      	ldr	r3, [pc, #240]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028c6:	483b      	ldr	r0, [pc, #236]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028c8:	f004 fbd0 	bl	800706c <HAL_DMA_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80028d2:	f002 ff9b 	bl	800580c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a36      	ldr	r2, [pc, #216]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028da:	639a      	str	r2, [r3, #56]	; 0x38
 80028dc:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_ADC_MspInit+0x1a4>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80028e2:	e05d      	b.n	80029a0 <HAL_ADC_MspInit+0x190>
  else if(adcHandle->Instance==ADC2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a34      	ldr	r2, [pc, #208]	; (80029bc <HAL_ADC_MspInit+0x1ac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d158      	bne.n	80029a0 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 80028f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a26      	ldr	r2, [pc, #152]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_ADC_MspInit+0x19c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Headlight_ADC_Pin;
 8002926:	2310      	movs	r3, #16
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Headlight_ADC_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	481d      	ldr	r0, [pc, #116]	; (80029b0 <HAL_ADC_MspInit+0x1a0>)
 800293a:	f004 ff27 	bl	800778c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002940:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <HAL_ADC_MspInit+0x1b4>)
 8002942:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 800295a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002966:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 800296a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800296e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002976:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 800297a:	2200      	movs	r2, #0
 800297c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002980:	2200      	movs	r2, #0
 8002982:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002984:	480e      	ldr	r0, [pc, #56]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002986:	f004 fb71 	bl	800706c <HAL_DMA_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8002990:	f002 ff3c 	bl	800580c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_ADC_MspInit+0x1b0>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40012000 	.word	0x40012000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	20000e90 	.word	0x20000e90
 80029b8:	40026410 	.word	0x40026410
 80029bc:	40012100 	.word	0x40012100
 80029c0:	20000ef0 	.word	0x20000ef0
 80029c4:	40026440 	.word	0x40026440

080029c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <MX_DMA_Init+0x78>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <MX_DMA_Init+0x78>)
 80029d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <MX_DMA_Init+0x78>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_DMA_Init+0x78>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <MX_DMA_Init+0x78>)
 80029f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_DMA_Init+0x78>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2010      	movs	r0, #16
 8002a0c:	f004 faf7 	bl	8006ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a10:	2010      	movs	r0, #16
 8002a12:	f004 fb10 	bl	8007036 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2038      	movs	r0, #56	; 0x38
 8002a1c:	f004 faef 	bl	8006ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a20:	2038      	movs	r0, #56	; 0x38
 8002a22:	f004 fb08 	bl	8007036 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	203a      	movs	r0, #58	; 0x3a
 8002a2c:	f004 fae7 	bl	8006ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a30:	203a      	movs	r0, #58	; 0x3a
 8002a32:	f004 fb00 	bl	8007036 <HAL_NVIC_EnableIRQ>

}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
 8002a58:	615a      	str	r2, [r3, #20]
 8002a5a:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a5e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002a62:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a66:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <MX_FSMC_Init+0xbc>)
 8002a68:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a7e:	2210      	movs	r2, #16
 8002a80:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 8002ac8:	2328      	movs	r3, #40	; 0x28
 8002aca:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002ad4:	2311      	movs	r3, #17
 8002ad6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4806      	ldr	r0, [pc, #24]	; (8002afc <MX_FSMC_Init+0xb8>)
 8002ae4:	f007 f950 	bl	8009d88 <HAL_SRAM_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002aee:	f002 fe8d 	bl	800580c <Error_Handler>
  }

}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000f50 	.word	0x20000f50
 8002b00:	a0000104 	.word	0xa0000104

08002b04 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_FSMC_MspInit+0x88>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d131      	bne.n	8002b84 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_FSMC_MspInit+0x88>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <HAL_FSMC_MspInit+0x8c>)
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_FSMC_MspInit+0x8c>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6393      	str	r3, [r2, #56]	; 0x38
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_FSMC_MspInit+0x8c>)
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002b42:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002b46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002b54:	230c      	movs	r3, #12
 8002b56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <HAL_FSMC_MspInit+0x90>)
 8002b5e:	f004 fe15 	bl	800778c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002b62:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002b66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002b74:	230c      	movs	r3, #12
 8002b76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4806      	ldr	r0, [pc, #24]	; (8002b98 <HAL_FSMC_MspInit+0x94>)
 8002b7e:	f004 fe05 	bl	800778c <HAL_GPIO_Init>
 8002b82:	e000      	b.n	8002b86 <HAL_FSMC_MspInit+0x82>
    return;
 8002b84:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000088c 	.word	0x2000088c
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40020c00 	.word	0x40020c00

08002b9c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002ba4:	f7ff ffae 	bl	8002b04 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a75      	ldr	r2, [pc, #468]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a67      	ldr	r2, [pc, #412]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <MX_GPIO_Init+0x22c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Right_blinker_Pin|GREEN_Light_Pin|Trig_Pin, GPIO_PIN_RESET);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2143      	movs	r1, #67	; 0x43
 8002c56:	4862      	ldr	r0, [pc, #392]	; (8002de0 <MX_GPIO_Init+0x230>)
 8002c58:	f004 ff4a 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDTP_CS_Pin|Reverse_GPIO_Pin|Forward_GPIO_Pin, GPIO_PIN_RESET);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 7124 	mov.w	r1, #656	; 0x290
 8002c62:	4860      	ldr	r0, [pc, #384]	; (8002de4 <MX_GPIO_Init+0x234>)
 8002c64:	f004 ff44 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_PWM_Pin|Amber_light_Pin, GPIO_PIN_RESET);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f241 0101 	movw	r1, #4097	; 0x1001
 8002c6e:	485e      	ldr	r0, [pc, #376]	; (8002de8 <MX_GPIO_Init+0x238>)
 8002c70:	f004 ff3e 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_Light_GPIO_Port, RED_Light_Pin, GPIO_PIN_RESET);
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c7a:	485c      	ldr	r0, [pc, #368]	; (8002dec <MX_GPIO_Init+0x23c>)
 8002c7c:	f004 ff38 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_blinker_GPIO_Port, Left_blinker_Pin, GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2104      	movs	r1, #4
 8002c84:	485a      	ldr	r0, [pc, #360]	; (8002df0 <MX_GPIO_Init+0x240>)
 8002c86:	f004 ff33 	bl	8007af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4850      	ldr	r0, [pc, #320]	; (8002de0 <MX_GPIO_Init+0x230>)
 8002c9e:	f004 fd75 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Hall_Effect_Pin;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ca6:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <MX_GPIO_Init+0x244>)
 8002ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Hall_Effect_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	484a      	ldr	r0, [pc, #296]	; (8002de0 <MX_GPIO_Init+0x230>)
 8002cb6:	f004 fd69 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Right_blinker_Pin|GREEN_Light_Pin|Trig_Pin;
 8002cba:	2343      	movs	r3, #67	; 0x43
 8002cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4843      	ldr	r0, [pc, #268]	; (8002de0 <MX_GPIO_Init+0x230>)
 8002cd2:	f004 fd5b 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cda:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <MX_GPIO_Init+0x244>)
 8002cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4840      	ldr	r0, [pc, #256]	; (8002dec <MX_GPIO_Init+0x23c>)
 8002cea:	f004 fd4f 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 8002cee:	2310      	movs	r3, #16
 8002cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	4619      	mov	r1, r3
 8002d04:	4837      	ldr	r0, [pc, #220]	; (8002de4 <MX_GPIO_Init+0x234>)
 8002d06:	f004 fd41 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4831      	ldr	r0, [pc, #196]	; (8002de4 <MX_GPIO_Init+0x234>)
 8002d1e:	f004 fd35 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin|Amber_light_Pin;
 8002d22:	f241 0301 	movw	r3, #4097	; 0x1001
 8002d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	482b      	ldr	r0, [pc, #172]	; (8002de8 <MX_GPIO_Init+0x238>)
 8002d3c:	f004 fd26 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Reverse_GPIO_Pin|Forward_GPIO_Pin;
 8002d40:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	4822      	ldr	r0, [pc, #136]	; (8002de4 <MX_GPIO_Init+0x234>)
 8002d5a:	f004 fd17 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4619      	mov	r1, r3
 8002d72:	481e      	ldr	r0, [pc, #120]	; (8002dec <MX_GPIO_Init+0x23c>)
 8002d74:	f004 fd0a 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_Light_Pin;
 8002d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_Light_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4816      	ldr	r0, [pc, #88]	; (8002dec <MX_GPIO_Init+0x23c>)
 8002d92:	f004 fcfb 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Left_blinker_Pin;
 8002d96:	2304      	movs	r3, #4
 8002d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Left_blinker_GPIO_Port, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4810      	ldr	r0, [pc, #64]	; (8002df0 <MX_GPIO_Init+0x240>)
 8002dae:	f004 fced 	bl	800778c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2006      	movs	r0, #6
 8002db8:	f004 f921 	bl	8006ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002dbc:	2006      	movs	r0, #6
 8002dbe:	f004 f93a 	bl	8007036 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2017      	movs	r0, #23
 8002dc8:	f004 f919 	bl	8006ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002dcc:	2017      	movs	r0, #23
 8002dce:	f004 f932 	bl	8007036 <HAL_NVIC_EnableIRQ>

}
 8002dd2:	bf00      	nop
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	10210000 	.word	0x10210000

08002df8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <MX_I2C1_Init+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <MX_I2C1_Init+0x58>)
 8002e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e36:	f004 fe8d 	bl	8007b54 <HAL_I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e40:	f002 fce4 	bl	800580c <Error_Handler>
  }

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000fa0 	.word	0x20000fa0
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	000186a0 	.word	0x000186a0

08002e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <HAL_I2C_MspInit+0x84>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d12b      	bne.n	8002ece <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_I2C_MspInit+0x88>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <HAL_I2C_MspInit+0x88>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_I2C_MspInit+0x88>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002e92:	23c0      	movs	r3, #192	; 0xc0
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e96:	2312      	movs	r3, #18
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <HAL_I2C_MspInit+0x8c>)
 8002eae:	f004 fc6d 	bl	800778c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_I2C_MspInit+0x88>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_I2C_MspInit+0x88>)
 8002ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_I2C_MspInit+0x88>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ece:	bf00      	nop
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40020400 	.word	0x40020400

08002ee4 <lsm9ds1_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm9ds1_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	72fb      	strb	r3, [r7, #11]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685c      	ldr	r4, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6898      	ldr	r0, [r3, #8]
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	7af9      	ldrb	r1, [r7, #11]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	47a0      	blx	r4
 8002f08:	6178      	str	r0, [r7, #20]
  return ret;
 8002f0a:	697b      	ldr	r3, [r7, #20]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}

08002f14 <lsm9ds1_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm9ds1_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	72fb      	strb	r3, [r7, #11]
 8002f24:	4613      	mov	r3, r2
 8002f26:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681c      	ldr	r4, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6898      	ldr	r0, [r3, #8]
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	7af9      	ldrb	r1, [r7, #11]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	47a0      	blx	r4
 8002f38:	6178      	str	r0, [r7, #20]
  return ret;
 8002f3a:	697b      	ldr	r3, [r7, #20]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}

08002f44 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb *0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb *0.122f);
 8002f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f70 <lsm9ds1_from_fs4g_to_mg+0x2c>
 8002f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002f62:	eeb0 0a67 	vmov.f32	s0, s15
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	3df9db23 	.word	0x3df9db23

08002f74 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb *17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb *70.0f);
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002fa0 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8002f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002f92:	eeb0 0a67 	vmov.f32	s0, s15
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	428c0000 	.word	0x428c0000

08002fa4 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb *0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb *0.58f);
 8002fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002fd0 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8002fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	3f147ae1 	.word	0x3f147ae1

08002fd4 <lsm9ds1_gy_full_scale_set>:
  * @param  val    Change the values of "fs_g" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx, lsm9ds1_gy_fs_t val)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G, (uint8_t*)&ctrl_reg1_g, 1);
 8002fe0:	f107 0208 	add.w	r2, r7, #8
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff7b 	bl	8002ee4 <lsm9ds1_read_reg>
 8002fee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <lsm9ds1_gy_full_scale_set+0x42>
    ctrl_reg1_g.fs_g = (uint8_t)val;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	7a3b      	ldrb	r3, [r7, #8]
 8003000:	f362 03c4 	bfi	r3, r2, #3, #2
 8003004:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8003006:	f107 0208 	add.w	r2, r7, #8
 800300a:	2301      	movs	r3, #1
 800300c:	2110      	movs	r1, #16
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff80 	bl	8002f14 <lsm9ds1_write_reg>
 8003014:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg1_g, 1);
  }
  return ret;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <lsm9ds1_imu_data_rate_set>:
  * @param  val    Change the values of "odr_g" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx, lsm9ds1_imu_odr_t val)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G, (uint8_t*)&ctrl_reg1_g, 1);
 800302c:	f107 0210 	add.w	r2, r7, #16
 8003030:	2301      	movs	r3, #1
 8003032:	2110      	movs	r1, #16
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff55 	bl	8002ee4 <lsm9ds1_read_reg>
 800303a:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <lsm9ds1_imu_data_rate_set+0x42>
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	b2da      	uxtb	r2, r3
 800304a:	7c3b      	ldrb	r3, [r7, #16]
 800304c:	f362 1347 	bfi	r3, r2, #5, #3
 8003050:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8003052:	f107 0210 	add.w	r2, r7, #16
 8003056:	2301      	movs	r3, #1
 8003058:	2110      	movs	r1, #16
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ff5a 	bl	8002f14 <lsm9ds1_write_reg>
 8003060:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg1_g, 1);
  }
  if(ret == 0){
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <lsm9ds1_imu_data_rate_set+0x58>
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8003068:	f107 020c 	add.w	r2, r7, #12
 800306c:	2301      	movs	r3, #1
 800306e:	2120      	movs	r1, #32
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff37 	bl	8002ee4 <lsm9ds1_read_reg>
 8003076:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&ctrl_reg6_xl, 1);
  }
  if(ret == 0){
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d110      	bne.n	80030a0 <lsm9ds1_imu_data_rate_set+0x80>
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	b2da      	uxtb	r2, r3
 8003088:	7b3b      	ldrb	r3, [r7, #12]
 800308a:	f362 1347 	bfi	r3, r2, #5, #3
 800308e:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8003090:	f107 020c 	add.w	r2, r7, #12
 8003094:	2301      	movs	r3, #1
 8003096:	2120      	movs	r1, #32
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff3b 	bl	8002f14 <lsm9ds1_write_reg>
 800309e:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg6_xl, 1);
  }
  if(ret == 0){
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <lsm9ds1_imu_data_rate_set+0x96>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030a6:	f107 0208 	add.w	r2, r7, #8
 80030aa:	2301      	movs	r3, #1
 80030ac:	2112      	movs	r1, #18
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff18 	bl	8002ee4 <lsm9ds1_read_reg>
 80030b4:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg3_g, 1);
  }
  if(ret == 0){
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <lsm9ds1_imu_data_rate_set+0xc0>
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	09db      	lsrs	r3, r3, #7
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	7a3b      	ldrb	r3, [r7, #8]
 80030ca:	f362 13c7 	bfi	r3, r2, #7, #1
 80030ce:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030d0:	f107 0208 	add.w	r2, r7, #8
 80030d4:	2301      	movs	r3, #1
 80030d6:	2112      	movs	r1, #18
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff1b 	bl	8002f14 <lsm9ds1_write_reg>
 80030de:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg3_g, 1);
  }

  return ret;
 80030e0:	697b      	ldr	r3, [r7, #20]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <lsm9ds1_xl_full_scale_set>:
  * @param  val    Change the values of "fs_xl" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx, lsm9ds1_xl_fs_t val)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80030f6:	f107 0208 	add.w	r2, r7, #8
 80030fa:	2301      	movs	r3, #1
 80030fc:	2120      	movs	r1, #32
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fef0 	bl	8002ee4 <lsm9ds1_read_reg>
 8003104:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg6_xl, 1);
  if(ret == 0){
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10f      	bne.n	800312c <lsm9ds1_xl_full_scale_set+0x42>
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	b2da      	uxtb	r2, r3
 8003114:	7a3b      	ldrb	r3, [r7, #8]
 8003116:	f362 03c4 	bfi	r3, r2, #3, #2
 800311a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800311c:	f107 0208 	add.w	r2, r7, #8
 8003120:	2301      	movs	r3, #1
 8003122:	2120      	movs	r1, #32
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff fef5 	bl	8002f14 <lsm9ds1_write_reg>
 800312a:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg6_xl, 1);
  }
  return ret;
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b088      	sub	sp, #32
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	4613      	mov	r3, r2
 8003142:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 8003144:	f107 0218 	add.w	r2, r7, #24
 8003148:	2301      	movs	r3, #1
 800314a:	2122      	movs	r1, #34	; 0x22
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f7ff fec9 	bl	8002ee4 <lsm9ds1_read_reg>
 8003152:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <lsm9ds1_block_data_update_set+0x44>
    ctrl_reg8.bdu = (uint8_t)val;
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	b2da      	uxtb	r2, r3
 8003162:	7e3b      	ldrb	r3, [r7, #24]
 8003164:	f362 1386 	bfi	r3, r2, #6, #1
 8003168:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 800316a:	f107 0218 	add.w	r2, r7, #24
 800316e:	2301      	movs	r3, #1
 8003170:	2122      	movs	r1, #34	; 0x22
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f7ff fece 	bl	8002f14 <lsm9ds1_write_reg>
 8003178:	61f8      	str	r0, [r7, #28]
  }
  if(ret == 0){
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <lsm9ds1_block_data_update_set+0x5a>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8003180:	f107 0214 	add.w	r2, r7, #20
 8003184:	2301      	movs	r3, #1
 8003186:	2124      	movs	r1, #36	; 0x24
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff feab 	bl	8002ee4 <lsm9ds1_read_reg>
 800318e:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&ctrl_reg5_m, 1);
  }
  if(ret == 0){
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d119      	bne.n	80031ca <lsm9ds1_block_data_update_set+0x94>
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	43db      	mvns	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	7d3b      	ldrb	r3, [r7, #20]
 80031a4:	f362 13c7 	bfi	r3, r2, #7, #1
 80031a8:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	7d3b      	ldrb	r3, [r7, #20]
 80031b4:	f362 1386 	bfi	r3, r2, #6, #1
 80031b8:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 80031ba:	f107 0214 	add.w	r2, r7, #20
 80031be:	2301      	movs	r3, #1
 80031c0:	2124      	movs	r1, #36	; 0x24
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fea6 	bl	8002f14 <lsm9ds1_write_reg>
 80031c8:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&ctrl_reg5_m, 1);
  }

  return ret;
 80031ca:	69fb      	ldr	r3, [r7, #28]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M, (uint8_t*)&ctrl_reg1_m, 1);
 80031e0:	f107 0210 	add.w	r2, r7, #16
 80031e4:	2301      	movs	r3, #1
 80031e6:	2120      	movs	r1, #32
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fe7b 	bl	8002ee4 <lsm9ds1_read_reg>
 80031ee:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d125      	bne.n	8003242 <lsm9ds1_mag_data_rate_set+0x6e>
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	7c3b      	ldrb	r3, [r7, #16]
 8003202:	f362 0341 	bfi	r3, r2, #1, #1
 8003206:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	b2da      	uxtb	r2, r3
 8003210:	7c3b      	ldrb	r3, [r7, #16]
 8003212:	f362 0384 	bfi	r3, r2, #2, #3
 8003216:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	b2da      	uxtb	r2, r3
 8003222:	7c3b      	ldrb	r3, [r7, #16]
 8003224:	f362 1346 	bfi	r3, r2, #5, #2
 8003228:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 800322a:	7c3b      	ldrb	r3, [r7, #16]
 800322c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003230:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8003232:	f107 0210 	add.w	r2, r7, #16
 8003236:	2301      	movs	r3, #1
 8003238:	2120      	movs	r1, #32
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fe6a 	bl	8002f14 <lsm9ds1_write_reg>
 8003240:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg1_m, 1);
  }
  if(ret == 0){
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <lsm9ds1_mag_data_rate_set+0x84>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8003248:	f107 020c 	add.w	r2, r7, #12
 800324c:	2301      	movs	r3, #1
 800324e:	2122      	movs	r1, #34	; 0x22
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff fe47 	bl	8002ee4 <lsm9ds1_read_reg>
 8003256:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg3_m, 1);
  }
  if(ret == 0){
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d111      	bne.n	8003282 <lsm9ds1_mag_data_rate_set+0xae>
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	b2da      	uxtb	r2, r3
 800326a:	7b3b      	ldrb	r3, [r7, #12]
 800326c:	f362 0301 	bfi	r3, r2, #0, #2
 8003270:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8003272:	f107 020c 	add.w	r2, r7, #12
 8003276:	2301      	movs	r3, #1
 8003278:	2122      	movs	r1, #34	; 0x22
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fe4a 	bl	8002f14 <lsm9ds1_write_reg>
 8003280:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg3_m, 1);
  }
  if(ret == 0){
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <lsm9ds1_mag_data_rate_set+0xc4>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M, (uint8_t*)&ctrl_reg4_m, 1);
 8003288:	f107 0208 	add.w	r2, r7, #8
 800328c:	2301      	movs	r3, #1
 800328e:	2123      	movs	r1, #35	; 0x23
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fe27 	bl	8002ee4 <lsm9ds1_read_reg>
 8003296:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d110      	bne.n	80032c0 <lsm9ds1_mag_data_rate_set+0xec>
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	7a3b      	ldrb	r3, [r7, #8]
 80032aa:	f362 0383 	bfi	r3, r2, #2, #2
 80032ae:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 80032b0:	f107 0208 	add.w	r2, r7, #8
 80032b4:	2301      	movs	r3, #1
 80032b6:	2123      	movs	r1, #35	; 0x23
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fe2b 	bl	8002f14 <lsm9ds1_write_reg>
 80032be:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4_m, 1);
  }
  return ret;
 80032c0:	697b      	ldr	r3, [r7, #20]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <lsm9ds1_mag_full_scale_set>:
  * @param  val    Change the values of "fs" in reg LSM9DS1.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx, lsm9ds1_mag_fs_t val)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M, (uint8_t*)&ctrl_reg2_m, 1);
 80032d6:	f107 0208 	add.w	r2, r7, #8
 80032da:	2301      	movs	r3, #1
 80032dc:	2121      	movs	r1, #33	; 0x21
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fe00 	bl	8002ee4 <lsm9ds1_read_reg>
 80032e4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <lsm9ds1_mag_full_scale_set+0x42>
    ctrl_reg2_m.fs = (uint8_t)val;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	7a3b      	ldrb	r3, [r7, #8]
 80032f6:	f362 1346 	bfi	r3, r2, #5, #2
 80032fa:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 80032fc:	f107 0208 	add.w	r2, r7, #8
 8003300:	2301      	movs	r3, #1
 8003302:	2121      	movs	r1, #33	; 0x21
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff fe05 	bl	8002f14 <lsm9ds1_write_reg>
 800330a:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg2_m, 1);
  }
  return ret;
 800330c:	68fb      	ldr	r3, [r7, #12]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8003320:	2306      	movs	r3, #6
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	2118      	movs	r1, #24
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fddc 	bl	8002ee4 <lsm9ds1_read_reg>
 800332c:	60f8      	str	r0, [r7, #12]
  return ret;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8003342:	2306      	movs	r3, #6
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	2128      	movs	r1, #40	; 0x28
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fdcb 	bl	8002ee4 <lsm9ds1_read_reg>
 800334e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003350:	68fb      	ldr	r3, [r7, #12]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8003364:	2306      	movs	r3, #6
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	2128      	movs	r1, #40	; 0x28
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fdba 	bl	8002ee4 <lsm9ds1_read_reg>
 8003370:	60f8      	str	r0, [r7, #12]
  return ret;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <lsm9ds1_dev_id_get>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  int32_t ret;
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	2301      	movs	r3, #1
 800338c:	210f      	movs	r1, #15
 800338e:	68b8      	ldr	r0, [r7, #8]
 8003390:	f7ff fda8 	bl	8002ee4 <lsm9ds1_read_reg>
 8003394:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&(buff->imu), 1);
  if(ret == 0){
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <lsm9ds1_dev_id_get+0x30>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	2301      	movs	r3, #1
 80033a2:	210f      	movs	r1, #15
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fd9d 	bl	8002ee4 <lsm9ds1_read_reg>
 80033aa:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&(buff->mag), 1);
  }
  return ret;
 80033ac:	697b      	ldr	r3, [r7, #20]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <lsm9ds1_dev_status_get>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t*)&(val->status_imu), 1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 80033c6:	2301      	movs	r3, #1
 80033c8:	2117      	movs	r1, #23
 80033ca:	68b8      	ldr	r0, [r7, #8]
 80033cc:	f7ff fd8a 	bl	8002ee4 <lsm9ds1_read_reg>
 80033d0:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <lsm9ds1_dev_status_get+0x30>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t*)&(val->status_mag), 1);
 80033d8:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 80033da:	2301      	movs	r3, #1
 80033dc:	2127      	movs	r1, #39	; 0x27
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fd80 	bl	8002ee4 <lsm9ds1_read_reg>
 80033e4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80033e6:	697b      	ldr	r3, [r7, #20]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <lsm9ds1_dev_reset_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 80033fe:	f107 0214 	add.w	r2, r7, #20
 8003402:	2301      	movs	r3, #1
 8003404:	2122      	movs	r1, #34	; 0x22
 8003406:	68b8      	ldr	r0, [r7, #8]
 8003408:	f7ff fd6c 	bl	8002ee4 <lsm9ds1_read_reg>
 800340c:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <lsm9ds1_dev_reset_set+0x44>
    ctrl_reg8.sw_reset = (uint8_t)val;
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	7d3b      	ldrb	r3, [r7, #20]
 800341e:	f362 0300 	bfi	r3, r2, #0, #1
 8003422:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8003424:	f107 0214 	add.w	r2, r7, #20
 8003428:	2301      	movs	r3, #1
 800342a:	2122      	movs	r1, #34	; 0x22
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f7ff fd71 	bl	8002f14 <lsm9ds1_write_reg>
 8003432:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&ctrl_reg8, 1);
  }
  if(ret == 0){
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <lsm9ds1_dev_reset_set+0x5a>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 800343a:	f107 0218 	add.w	r2, r7, #24
 800343e:	2301      	movs	r3, #1
 8003440:	2121      	movs	r1, #33	; 0x21
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fd4e 	bl	8002ee4 <lsm9ds1_read_reg>
 8003448:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&ctrl_reg2_m, 1);
  }
  if(ret == 0){
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <lsm9ds1_dev_reset_set+0x80>
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	7e3b      	ldrb	r3, [r7, #24]
 800345a:	f362 0382 	bfi	r3, r2, #2, #1
 800345e:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8003460:	f107 0218 	add.w	r2, r7, #24
 8003464:	2301      	movs	r3, #1
 8003466:	2121      	movs	r1, #33	; 0x21
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff fd53 	bl	8002f14 <lsm9ds1_write_reg>
 800346e:	61f8      	str	r0, [r7, #28]
                            (uint8_t*)&ctrl_reg2_m, 1);
  }

  return ret;
 8003470:	69fb      	ldr	r3, [r7, #28]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <lsm9ds1_dev_reset_get>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag, stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b088      	sub	sp, #32
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8, (uint8_t*)&ctrl_reg8, 1);
 8003486:	f107 0214 	add.w	r2, r7, #20
 800348a:	2301      	movs	r3, #1
 800348c:	2122      	movs	r1, #34	; 0x22
 800348e:	68b8      	ldr	r0, [r7, #8]
 8003490:	f7ff fd28 	bl	8002ee4 <lsm9ds1_read_reg>
 8003494:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d114      	bne.n	80034c6 <lsm9ds1_dev_reset_get+0x4c>
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 800349c:	f107 0218 	add.w	r2, r7, #24
 80034a0:	2301      	movs	r3, #1
 80034a2:	2121      	movs	r1, #33	; 0x21
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fd1d 	bl	8002ee4 <lsm9ds1_read_reg>
 80034aa:	61f8      	str	r0, [r7, #28]
                           (uint8_t*)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 80034ac:	7e3b      	ldrb	r3, [r7, #24]
 80034ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	7d3b      	ldrb	r3, [r7, #20]
 80034b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4313      	orrs	r3, r2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 80034c6:	69fb      	ldr	r3, [r7, #28]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G, (uint8_t*)&ctrl_reg1_g, 1);
 80034dc:	f107 0208 	add.w	r2, r7, #8
 80034e0:	2301      	movs	r3, #1
 80034e2:	2110      	movs	r1, #16
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fcfd 	bl	8002ee4 <lsm9ds1_read_reg>
 80034ea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
    ctrl_reg1_g.bw_g = (uint8_t)val;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	7a3b      	ldrb	r3, [r7, #8]
 80034fc:	f362 0301 	bfi	r3, r2, #0, #2
 8003500:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8003502:	f107 0208 	add.w	r2, r7, #8
 8003506:	2301      	movs	r3, #1
 8003508:	2110      	movs	r1, #16
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fd02 	bl	8002f14 <lsm9ds1_write_reg>
 8003510:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg1_g, 1);
  }
  return ret;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8003528:	f107 0210 	add.w	r2, r7, #16
 800352c:	2301      	movs	r3, #1
 800352e:	2111      	movs	r1, #17
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fcd7 	bl	8002ee4 <lsm9ds1_read_reg>
 8003536:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&ctrl_reg2_g, 1);
  if(ret == 0){
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <lsm9ds1_gy_filter_out_path_set+0x42>
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	b2da      	uxtb	r2, r3
 8003546:	7c3b      	ldrb	r3, [r7, #16]
 8003548:	f362 0301 	bfi	r3, r2, #0, #2
 800354c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 800354e:	f107 0210 	add.w	r2, r7, #16
 8003552:	2301      	movs	r3, #1
 8003554:	2111      	movs	r1, #17
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fcdc 	bl	8002f14 <lsm9ds1_write_reg>
 800355c:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg2_g, 1);
  }
  if(ret == 0){
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <lsm9ds1_gy_filter_out_path_set+0x58>
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8003564:	f107 020c 	add.w	r2, r7, #12
 8003568:	2301      	movs	r3, #1
 800356a:	2112      	movs	r1, #18
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fcb9 	bl	8002ee4 <lsm9ds1_read_reg>
 8003572:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg3_g, 1);
  }
  if(ret == 0){
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d110      	bne.n	800359c <lsm9ds1_gy_filter_out_path_set+0x80>
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4 );
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	b2da      	uxtb	r2, r3
 8003584:	7b3b      	ldrb	r3, [r7, #12]
 8003586:	f362 1386 	bfi	r3, r2, #6, #1
 800358a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800358c:	f107 020c 	add.w	r2, r7, #12
 8003590:	2301      	movs	r3, #1
 8003592:	2112      	movs	r1, #18
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fcbd 	bl	8002f14 <lsm9ds1_write_reg>
 800359a:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg3_g, 1);
  }

  return ret;
 800359c:	697b      	ldr	r3, [r7, #20]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G, (uint8_t*)&ctrl_reg3_g, 1);
 80035b2:	f107 0208 	add.w	r2, r7, #8
 80035b6:	2301      	movs	r3, #1
 80035b8:	2112      	movs	r1, #18
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fc92 	bl	8002ee4 <lsm9ds1_read_reg>
 80035c0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	7a3b      	ldrb	r3, [r7, #8]
 80035d2:	f362 0303 	bfi	r3, r2, #0, #4
 80035d6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80035d8:	f107 0208 	add.w	r2, r7, #8
 80035dc:	2301      	movs	r3, #1
 80035de:	2112      	movs	r1, #18
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fc97 	bl	8002f14 <lsm9ds1_write_reg>
 80035e6:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg3_g, 1);
  }
  return ret;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80035fe:	f107 0208 	add.w	r2, r7, #8
 8003602:	2301      	movs	r3, #1
 8003604:	2120      	movs	r1, #32
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fc6c 	bl	8002ee4 <lsm9ds1_read_reg>
 800360c:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg6_xl, 1);
  if(ret == 0){
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d118      	bne.n	8003646 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	b2da      	uxtb	r2, r3
 800361c:	7a3b      	ldrb	r3, [r7, #8]
 800361e:	f362 0301 	bfi	r3, r2, #0, #2
 8003622:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4 );
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	7a3b      	ldrb	r3, [r7, #8]
 8003630:	f362 0382 	bfi	r3, r2, #2, #1
 8003634:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8003636:	f107 0208 	add.w	r2, r7, #8
 800363a:	2301      	movs	r3, #1
 800363c:	2120      	movs	r1, #32
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fc68 	bl	8002f14 <lsm9ds1_write_reg>
 8003644:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg6_xl, 1);
  }
  return ret;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800365c:	f107 0208 	add.w	r2, r7, #8
 8003660:	2301      	movs	r3, #1
 8003662:	2121      	movs	r1, #33	; 0x21
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fc3d 	bl	8002ee4 <lsm9ds1_read_reg>
 800366a:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg7_xl, 1);
  if(ret == 0){
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <lsm9ds1_xl_filter_out_path_set+0x42>
    ctrl_reg7_xl.fds = (uint8_t)val;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	b2da      	uxtb	r2, r3
 800367a:	7a3b      	ldrb	r3, [r7, #8]
 800367c:	f362 0382 	bfi	r3, r2, #2, #1
 8003680:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8003682:	f107 0208 	add.w	r2, r7, #8
 8003686:	2301      	movs	r3, #1
 8003688:	2121      	movs	r1, #33	; 0x21
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fc42 	bl	8002f14 <lsm9ds1_write_reg>
 8003690:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg7_xl, 1);
  }
  return ret;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80036a8:	f107 0208 	add.w	r2, r7, #8
 80036ac:	2301      	movs	r3, #1
 80036ae:	2121      	movs	r1, #33	; 0x21
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fc17 	bl	8002ee4 <lsm9ds1_read_reg>
 80036b6:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&ctrl_reg7_xl, 1);
  if(ret == 0){
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d118      	bne.n	80036f0 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	7a3b      	ldrb	r3, [r7, #8]
 80036ca:	f362 13c7 	bfi	r3, r2, #7, #1
 80036ce:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	7a3b      	ldrb	r3, [r7, #8]
 80036da:	f362 1346 	bfi	r3, r2, #5, #2
 80036de:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80036e0:	f107 0208 	add.w	r2, r7, #8
 80036e4:	2301      	movs	r3, #1
 80036e6:	2121      	movs	r1, #33	; 0x21
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fc13 	bl	8002f14 <lsm9ds1_write_reg>
 80036ee:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&ctrl_reg7_xl, 1);
  }
  return ret;
 80036f0:	68fb      	ldr	r3, [r7, #12]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003700:	f002 ff2e 	bl	8006560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003704:	f000 f86c 	bl	80037e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003708:	f7ff fa52 	bl	8002bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800370c:	f7ff f95c 	bl	80029c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003710:	f7fe ffda 	bl	80026c8 <MX_ADC1_Init>
  MX_FSMC_Init();
 8003714:	f7ff f996 	bl	8002a44 <MX_FSMC_Init>
  MX_I2C1_Init();
 8003718:	f7ff fb6e 	bl	8002df8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800371c:	f002 fa70 	bl	8005c00 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003720:	f002 fb10 	bl	8005d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003724:	f002 fb84 	bl	8005e30 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003728:	f002 fe14 	bl	8006354 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 800372c:	f002 f876 	bl	800581c <MX_SPI2_Init>
  MX_TIM4_Init();
 8003730:	f002 fbf4 	bl	8005f1c <MX_TIM4_Init>
  MX_ADC2_Init();
 8003734:	f7ff f81a 	bl	800276c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8003738:	f002 fde2 	bl	8006300 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800373c:	f002 fc64 	bl	8006008 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	CalculatorInit();
 8003740:	f001 fad4 	bl	8004cec <CalculatorInit>
	IMU_Init();
 8003744:	f000 ffb0 	bl	80046a8 <IMU_Init>
	HAL_UART_Receive_DMA(&huart2, rx_data, 3);
 8003748:	2203      	movs	r2, #3
 800374a:	4919      	ldr	r1, [pc, #100]	; (80037b0 <main+0xb4>)
 800374c:	4819      	ldr	r0, [pc, #100]	; (80037b4 <main+0xb8>)
 800374e:	f007 fbcb 	bl	800aee8 <HAL_UART_Receive_DMA>
	HAL_ADC_Start_DMA(&hadc1, ADC1_BUFFER, ADC_BUFFER_LEN);
 8003752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003756:	4918      	ldr	r1, [pc, #96]	; (80037b8 <main+0xbc>)
 8003758:	4818      	ldr	r0, [pc, #96]	; (80037bc <main+0xc0>)
 800375a:	f002 ffd9 	bl	8006710 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, ADC2_BUFFER, ADC_BUFFER_LEN);
 800375e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003762:	4917      	ldr	r1, [pc, #92]	; (80037c0 <main+0xc4>)
 8003764:	4817      	ldr	r0, [pc, #92]	; (80037c4 <main+0xc8>)
 8003766:	f002 ffd3 	bl	8006710 <HAL_ADC_Start_DMA>
	//  BSP_LCD_Clear (LCD_COLOR_WHITE);
	//  BSP_LCD_SetFont (&Font24);
	//  BSP_LCD_SetTextColor (LCD_COLOR_BLACK);

	//BSP_LCD_DisplayStringAtLine (2, (uint8_t*) "Hello World");
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800376a:	2100      	movs	r1, #0
 800376c:	4816      	ldr	r0, [pc, #88]	; (80037c8 <main+0xcc>)
 800376e:	f006 fbf7 	bl	8009f60 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 8003772:	4816      	ldr	r0, [pc, #88]	; (80037cc <main+0xd0>)
 8003774:	f006 fb77 	bl	8009e66 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start(&htim3);               //Initialize stm32 timer 3
 8003778:	4815      	ldr	r0, [pc, #84]	; (80037d0 <main+0xd4>)
 800377a:	f006 fb74 	bl	8009e66 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800377e:	2100      	movs	r1, #0
 8003780:	4813      	ldr	r0, [pc, #76]	; (80037d0 <main+0xd4>)
 8003782:	f006 fbed 	bl	8009f60 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);               //Initialize stm32 timer 3
 8003786:	4813      	ldr	r0, [pc, #76]	; (80037d4 <main+0xd8>)
 8003788:	f006 fb6d 	bl	8009e66 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800378c:	2100      	movs	r1, #0
 800378e:	4811      	ldr	r0, [pc, #68]	; (80037d4 <main+0xd8>)
 8003790:	f006 fbe6 	bl	8009f60 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8003794:	4810      	ldr	r0, [pc, #64]	; (80037d8 <main+0xdc>)
 8003796:	f006 fb8a 	bl	8009eae <HAL_TIM_Base_Start_IT>
	stop();
 800379a:	f000 fd21 	bl	80041e0 <stop>

	centreWheels(FORWARD);
 800379e:	2300      	movs	r3, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fc73 	bl	800408c <centreWheels>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		(func_t) (*state)();
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <main+0xe0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4798      	blx	r3
 80037ac:	e7fb      	b.n	80037a6 <main+0xaa>
 80037ae:	bf00      	nop
 80037b0:	200090a0 	.word	0x200090a0
 80037b4:	2001134c 	.word	0x2001134c
 80037b8:	20001088 	.word	0x20001088
 80037bc:	20000e48 	.word	0x20000e48
 80037c0:	200090a4 	.word	0x200090a4
 80037c4:	20000e00 	.word	0x20000e00
 80037c8:	2001122c 	.word	0x2001122c
 80037cc:	2001126c 	.word	0x2001126c
 80037d0:	200111ec 	.word	0x200111ec
 80037d4:	2001116c 	.word	0x2001116c
 80037d8:	200111ac 	.word	0x200111ac
 80037dc:	20000098 	.word	0x20000098

080037e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b094      	sub	sp, #80	; 0x50
 80037e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e6:	f107 0320 	add.w	r3, r7, #32
 80037ea:	2230      	movs	r2, #48	; 0x30
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f008 f996 	bl	800bb20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <SystemClock_Config+0xcc>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	4a27      	ldr	r2, [pc, #156]	; (80038ac <SystemClock_Config+0xcc>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003812:	6413      	str	r3, [r2, #64]	; 0x40
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <SystemClock_Config+0xcc>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	2300      	movs	r3, #0
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <SystemClock_Config+0xd0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a21      	ldr	r2, [pc, #132]	; (80038b0 <SystemClock_Config+0xd0>)
 800382a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <SystemClock_Config+0xd0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800383c:	2302      	movs	r3, #2
 800383e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003840:	2301      	movs	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003844:	2310      	movs	r3, #16
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003848:	2302      	movs	r3, #2
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800384c:	2300      	movs	r3, #0
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003850:	2308      	movs	r3, #8
 8003852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003854:	23a8      	movs	r3, #168	; 0xa8
 8003856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003858:	2302      	movs	r3, #2
 800385a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800385c:	2304      	movs	r3, #4
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003860:	f107 0320 	add.w	r3, r7, #32
 8003864:	4618      	mov	r0, r3
 8003866:	f005 f929 	bl	8008abc <HAL_RCC_OscConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003870:	f001 ffcc 	bl	800580c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003874:	230f      	movs	r3, #15
 8003876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003878:	2302      	movs	r3, #2
 800387a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	2105      	movs	r1, #5
 8003892:	4618      	mov	r0, r3
 8003894:	f005 fb82 	bl	8008f9c <HAL_RCC_ClockConfig>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800389e:	f001 ffb5 	bl	800580c <Error_Handler>
  }
}
 80038a2:	bf00      	nop
 80038a4:	3750      	adds	r7, #80	; 0x50
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40007000 	.word	0x40007000

080038b4 <state1>:

/* USER CODE BEGIN 4 */

//State Machine function definitions
//Wait state
void* state1() {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	//fill in with state instructions, eg drive forward
	stateString=state1String;
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <state1+0x2c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <state1+0x30>)
 80038be:	6013      	str	r3, [r2, #0]
	stop();
 80038c0:	f000 fc8e 	bl	80041e0 <stop>
	speed = 0;
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <state1+0x34>)
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
	getDistance();
 80038cc:	f000 fe64 	bl	8004598 <getDistance>
//	LCD_Print(state1String);
	readIMU();
 80038d0:	f000 ff6a 	bl	80047a8 <readIMU>
	CalculatorProcess();
 80038d4:	f001 faf4 	bl	8004ec0 <CalculatorProcess>
	return 0;
 80038d8:	2300      	movs	r3, #0
	//return nextState;
}
 80038da:	4618      	mov	r0, r3
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000007c 	.word	0x2000007c
 80038e4:	20000094 	.word	0x20000094
 80038e8:	200110a4 	.word	0x200110a4

080038ec <state2>:

//Drive forward state
void* state2() {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	stateString=state2String;
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <state2+0x8c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a21      	ldr	r2, [pc, #132]	; (800397c <state2+0x90>)
 80038f6:	6013      	str	r3, [r2, #0]
	//fill in with state instructions, eg drive forward
	quarterRevs = 0;
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <state2+0x94>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
	//sprintf(state2String, "Forward state- %d cm", (int)stopDist);
	centreWheels(FORWARD);
 80038fe:	2300      	movs	r3, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fbc3 	bl	800408c <centreWheels>
	driveForward();
 8003906:	f000 fb71 	bl	8003fec <driveForward>
	while (distance > (stopDist + 5)) {
 800390a:	e010      	b.n	800392e <state2+0x42>
		if (state != state2) {
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <state2+0x98>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <state2+0x9c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <state2+0x32>
			stop();
 8003916:	f000 fc63 	bl	80041e0 <stop>
			return 0;
 800391a:	2300      	movs	r3, #0
 800391c:	e02a      	b.n	8003974 <state2+0x88>
		}
		centreWheels(FORWARD);
 800391e:	2300      	movs	r3, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fbb3 	bl	800408c <centreWheels>
		getDistance();
 8003926:	f000 fe37 	bl	8004598 <getDistance>
		readIMU();
 800392a:	f000 ff3d 	bl	80047a8 <readIMU>
	while (distance > (stopDist + 5)) {
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <state2+0xa0>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <state2+0xa4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3305      	adds	r3, #5
 800393c:	429a      	cmp	r2, r3
 800393e:	d8e5      	bhi.n	800390c <state2+0x20>
//		LCD_Print(state2String);
	}
	brake(FORWARD);
 8003940:	2300      	movs	r3, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fbf8 	bl	8004138 <brake>
	speed = 0;
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <state2+0xa8>)
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
//	LCD_Print(state2String);
	HAL_Delay(2000);
 8003950:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003954:	f002 fe76 	bl	8006644 <HAL_Delay>
	state = state3;
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <state2+0x98>)
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <state2+0xac>)
 800395c:	601a      	str	r2, [r3, #0]
	storequarterRevs = quarterRevs;
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <state2+0x94>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a0e      	ldr	r2, [pc, #56]	; (800399c <state2+0xb0>)
 8003964:	6013      	str	r3, [r2, #0]
	quarterRevs = 0;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <state2+0x94>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
	stopDist = 0;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <state2+0xa4>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
	return 0;
 8003972:	2300      	movs	r3, #0

}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000080 	.word	0x20000080
 800397c:	20000094 	.word	0x20000094
 8003980:	200008a4 	.word	0x200008a4
 8003984:	20000098 	.word	0x20000098
 8003988:	080038ed 	.word	0x080038ed
 800398c:	2000101c 	.word	0x2000101c
 8003990:	20009088 	.word	0x20009088
 8003994:	200110a4 	.word	0x200110a4
 8003998:	080039a1 	.word	0x080039a1
 800399c:	20011110 	.word	0x20011110

080039a0 <state3>:

//Reverse State
void* state3() {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
	stateString=state3String;
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <state3+0x50>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <state3+0x54>)
 80039aa:	6013      	str	r3, [r2, #0]
	centreWheels(REVERSE);
 80039ac:	2301      	movs	r3, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fb6c 	bl	800408c <centreWheels>
	reverse();
 80039b4:	f000 fb36 	bl	8004024 <reverse>
	while (quarterRevs < storequarterRevs) {
 80039b8:	e007      	b.n	80039ca <state3+0x2a>
		//Add centre wheels for reverse mode?
		getDistance();
 80039ba:	f000 fded 	bl	8004598 <getDistance>
		readIMU();
 80039be:	f000 fef3 	bl	80047a8 <readIMU>
		centreWheels(REVERSE);
 80039c2:	2301      	movs	r3, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fb61 	bl	800408c <centreWheels>
	while (quarterRevs < storequarterRevs) {
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <state3+0x58>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <state3+0x5c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d3f1      	bcc.n	80039ba <state3+0x1a>
//		LCD_Print(state3String);
	}
	brake(REVERSE);
 80039d6:	2301      	movs	r3, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fbad 	bl	8004138 <brake>
	quarterRevs = 0;
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <state3+0x58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
	state = state1;
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <state3+0x60>)
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <state3+0x64>)
 80039e8:	601a      	str	r2, [r3, #0]
	return 0;
 80039ea:	2300      	movs	r3, #0

}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000084 	.word	0x20000084
 80039f4:	20000094 	.word	0x20000094
 80039f8:	200008a4 	.word	0x200008a4
 80039fc:	20011110 	.word	0x20011110
 8003a00:	20000098 	.word	0x20000098
 8003a04:	080038b5 	.word	0x080038b5

08003a08 <state4>:

//Clockwise state
void* state4() {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	stateString=state4String;
 8003a0c:	4b94      	ldr	r3, [pc, #592]	; (8003c60 <state4+0x258>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a94      	ldr	r2, [pc, #592]	; (8003c64 <state4+0x25c>)
 8003a12:	6013      	str	r3, [r2, #0]
//	LCD_Print(state4String);
	readIMU();
 8003a14:	f000 fec8 	bl	80047a8 <readIMU>
	getDistance();
 8003a18:	f000 fdbe 	bl	8004598 <getDistance>
	quarterRevs = 0;
 8003a1c:	4b92      	ldr	r3, [pc, #584]	; (8003c68 <state4+0x260>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

	//First straight
	while (quarterRevs < 65) {
 8003a22:	e01c      	b.n	8003a5e <state4+0x56>
		driveForward();
 8003a24:	f000 fae2 	bl	8003fec <driveForward>
		centreWheels(FORWARD);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb2e 	bl	800408c <centreWheels>
		readIMU();
 8003a30:	f000 feba 	bl	80047a8 <readIMU>
		getDistance();
 8003a34:	f000 fdb0 	bl	8004598 <getDistance>

		if (distance <= 30) {
 8003a38:	4b8c      	ldr	r3, [pc, #560]	; (8003c6c <state4+0x264>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b1e      	cmp	r3, #30
 8003a40:	d806      	bhi.n	8003a50 <state4+0x48>
			quarterRevs = avoidObstacle(RIGHT);
 8003a42:	2301      	movs	r3, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fbf9 	bl	800423c <avoidObstacle>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b86      	ldr	r3, [pc, #536]	; (8003c68 <state4+0x260>)
 8003a4e:	601a      	str	r2, [r3, #0]

		}
//		LCD_Print((uint8_t*) "Clockwise state");
		if (state != state4) {
 8003a50:	4b87      	ldr	r3, [pc, #540]	; (8003c70 <state4+0x268>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a87      	ldr	r2, [pc, #540]	; (8003c74 <state4+0x26c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d001      	beq.n	8003a5e <state4+0x56>
			return 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e0fe      	b.n	8003c5c <state4+0x254>
	while (quarterRevs < 65) {
 8003a5e:	4b82      	ldr	r3, [pc, #520]	; (8003c68 <state4+0x260>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d9de      	bls.n	8003a24 <state4+0x1c>
		}
	}
	brake(FORWARD);
 8003a66:	2300      	movs	r3, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fb65 	bl	8004138 <brake>

	//First turn
	turnRight();
 8003a6e:	f000 fb01 	bl	8004074 <turnRight>
	quarterRevs = 0;
 8003a72:	4b7d      	ldr	r3, [pc, #500]	; (8003c68 <state4+0x260>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 34) {
 8003a78:	e016      	b.n	8003aa8 <state4+0xa0>
		driveForward();
 8003a7a:	f000 fab7 	bl	8003fec <driveForward>
		readIMU();
 8003a7e:	f000 fe93 	bl	80047a8 <readIMU>
		getDistance();
 8003a82:	f000 fd89 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003a86:	e003      	b.n	8003a90 <state4+0x88>
			stop();
 8003a88:	f000 fbaa 	bl	80041e0 <stop>
			getDistance();
 8003a8c:	f000 fd84 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003a90:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <state4+0x264>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b1e      	cmp	r3, #30
 8003a98:	d9f6      	bls.n	8003a88 <state4+0x80>
		}

//		LCD_Print((uint8_t*) "Clockwise state");
		if (state != state4) {
 8003a9a:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <state4+0x268>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	; (8003c74 <state4+0x26c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d001      	beq.n	8003aa8 <state4+0xa0>
			return 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e0d9      	b.n	8003c5c <state4+0x254>
	while (quarterRevs < 34) {
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <state4+0x260>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b21      	cmp	r3, #33	; 0x21
 8003aae:	d9e4      	bls.n	8003a7a <state4+0x72>
		}
	}
	blinkerFlag = 0;
 8003ab0:	4b71      	ldr	r3, [pc, #452]	; (8003c78 <state4+0x270>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

	//Second straight
	centreWheels(FORWARD);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fae7 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003abe:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <state4+0x260>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 15) {
 8003ac4:	e003      	b.n	8003ace <state4+0xc6>
		centreWheels(FORWARD);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fadf 	bl	800408c <centreWheels>
	while (quarterRevs < 15) {
 8003ace:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <state4+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b0e      	cmp	r3, #14
 8003ad4:	d9f7      	bls.n	8003ac6 <state4+0xbe>
	}
	brake(FORWARD);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fb2d 	bl	8004138 <brake>

	//Second turn
	turnRight();
 8003ade:	f000 fac9 	bl	8004074 <turnRight>
	quarterRevs = 0;
 8003ae2:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <state4+0x260>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 32) {
 8003ae8:	e016      	b.n	8003b18 <state4+0x110>
		driveForward();
 8003aea:	f000 fa7f 	bl	8003fec <driveForward>
		readIMU();
 8003aee:	f000 fe5b 	bl	80047a8 <readIMU>
		getDistance();
 8003af2:	f000 fd51 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003af6:	e003      	b.n	8003b00 <state4+0xf8>
			stop();
 8003af8:	f000 fb72 	bl	80041e0 <stop>
			getDistance();
 8003afc:	f000 fd4c 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003b00:	4b5a      	ldr	r3, [pc, #360]	; (8003c6c <state4+0x264>)
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b1e      	cmp	r3, #30
 8003b08:	d9f6      	bls.n	8003af8 <state4+0xf0>
		}

//		LCD_Print((uint8_t*) "Clockwise state");
		if (state != state4) {
 8003b0a:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <state4+0x268>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a59      	ldr	r2, [pc, #356]	; (8003c74 <state4+0x26c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d001      	beq.n	8003b18 <state4+0x110>
			return 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e0a1      	b.n	8003c5c <state4+0x254>
	while (quarterRevs < 32) {
 8003b18:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <state4+0x260>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b1f      	cmp	r3, #31
 8003b1e:	d9e4      	bls.n	8003aea <state4+0xe2>
		}
	}

	blinkerFlag = 0;
 8003b20:	4b55      	ldr	r3, [pc, #340]	; (8003c78 <state4+0x270>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

	//Third straight
	centreWheels(FORWARD);
 8003b26:	2300      	movs	r3, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 faaf 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	; (8003c68 <state4+0x260>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 54) {
 8003b34:	e01f      	b.n	8003b76 <state4+0x16e>
		driveForward();
 8003b36:	f000 fa59 	bl	8003fec <driveForward>
		centreWheels(FORWARD);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 faa5 	bl	800408c <centreWheels>
		readIMU();
 8003b42:	f000 fe31 	bl	80047a8 <readIMU>
		getDistance();
 8003b46:	f000 fd27 	bl	8004598 <getDistance>
		if (distance <= 30) {
 8003b4a:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <state4+0x264>)
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b1e      	cmp	r3, #30
 8003b52:	d806      	bhi.n	8003b62 <state4+0x15a>
			quarterRevs = avoidObstacle(RIGHT);
 8003b54:	2301      	movs	r3, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fb70 	bl	800423c <avoidObstacle>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <state4+0x260>)
 8003b60:	601a      	str	r2, [r3, #0]

		}

		LCD_Print((uint8_t*) "Clockwise state");
 8003b62:	4846      	ldr	r0, [pc, #280]	; (8003c7c <state4+0x274>)
 8003b64:	f001 f860 	bl	8004c28 <LCD_Print>
		if (state != state4) {
 8003b68:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <state4+0x268>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a41      	ldr	r2, [pc, #260]	; (8003c74 <state4+0x26c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d001      	beq.n	8003b76 <state4+0x16e>
			return 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e072      	b.n	8003c5c <state4+0x254>
	while (quarterRevs < 54) {
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <state4+0x260>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b35      	cmp	r3, #53	; 0x35
 8003b7c:	d9db      	bls.n	8003b36 <state4+0x12e>
		}
	}
	stop();
 8003b7e:	f000 fb2f 	bl	80041e0 <stop>
	brake(FORWARD);
 8003b82:	2300      	movs	r3, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fad7 	bl	8004138 <brake>

	//Third turn
	turnRight();
 8003b8a:	f000 fa73 	bl	8004074 <turnRight>
	quarterRevs = 0;
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <state4+0x260>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 32) {
 8003b94:	e016      	b.n	8003bc4 <state4+0x1bc>
		driveForward();
 8003b96:	f000 fa29 	bl	8003fec <driveForward>
		readIMU();
 8003b9a:	f000 fe05 	bl	80047a8 <readIMU>
		getDistance();
 8003b9e:	f000 fcfb 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003ba2:	e003      	b.n	8003bac <state4+0x1a4>
			stop();
 8003ba4:	f000 fb1c 	bl	80041e0 <stop>
			getDistance();
 8003ba8:	f000 fcf6 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <state4+0x264>)
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b1e      	cmp	r3, #30
 8003bb4:	d9f6      	bls.n	8003ba4 <state4+0x19c>
		}

//		LCD_Print((uint8_t*) "Clockwise state");
		if (state != state4) {
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <state4+0x268>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <state4+0x26c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d001      	beq.n	8003bc4 <state4+0x1bc>
			return 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e04b      	b.n	8003c5c <state4+0x254>
	while (quarterRevs < 32) {
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <state4+0x260>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b1f      	cmp	r3, #31
 8003bca:	d9e4      	bls.n	8003b96 <state4+0x18e>
		}
	}

	blinkerFlag = 0;
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <state4+0x270>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

	centreWheels(FORWARD);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fa59 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003bda:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <state4+0x260>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 16) {
 8003be0:	e003      	b.n	8003bea <state4+0x1e2>
		centreWheels(FORWARD);
 8003be2:	2300      	movs	r3, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fa51 	bl	800408c <centreWheels>
	while (quarterRevs < 16) {
 8003bea:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <state4+0x260>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	d9f7      	bls.n	8003be2 <state4+0x1da>
	}

	brake(FORWARD);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fa9f 	bl	8004138 <brake>
	turnRight();
 8003bfa:	f000 fa3b 	bl	8004074 <turnRight>
	quarterRevs = 0;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <state4+0x260>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 32) {
 8003c04:	e016      	b.n	8003c34 <state4+0x22c>
		driveForward();
 8003c06:	f000 f9f1 	bl	8003fec <driveForward>
		readIMU();
 8003c0a:	f000 fdcd 	bl	80047a8 <readIMU>
		getDistance();
 8003c0e:	f000 fcc3 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003c12:	e003      	b.n	8003c1c <state4+0x214>
			stop();
 8003c14:	f000 fae4 	bl	80041e0 <stop>
			getDistance();
 8003c18:	f000 fcbe 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <state4+0x264>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b1e      	cmp	r3, #30
 8003c24:	d9f6      	bls.n	8003c14 <state4+0x20c>
		}

//		LCD_Print((uint8_t*) "Clockwise state");
		if (state != state4) {
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <state4+0x268>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <state4+0x26c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d001      	beq.n	8003c34 <state4+0x22c>
			return 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e013      	b.n	8003c5c <state4+0x254>
	while (quarterRevs < 32) {
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <state4+0x260>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b1f      	cmp	r3, #31
 8003c3a:	d9e4      	bls.n	8003c06 <state4+0x1fe>
		}
	}

	blinkerFlag = 0;
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <state4+0x270>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

	centreWheels(FORWARD);
 8003c42:	2300      	movs	r3, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa21 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <state4+0x260>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

	stop();
 8003c50:	f000 fac6 	bl	80041e0 <stop>
	state = state1;
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <state4+0x268>)
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <state4+0x278>)
 8003c58:	601a      	str	r2, [r3, #0]

	return 0;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000088 	.word	0x20000088
 8003c64:	20000094 	.word	0x20000094
 8003c68:	200008a4 	.word	0x200008a4
 8003c6c:	2000101c 	.word	0x2000101c
 8003c70:	20000098 	.word	0x20000098
 8003c74:	08003a09 	.word	0x08003a09
 8003c78:	20000890 	.word	0x20000890
 8003c7c:	0800e9d8 	.word	0x0800e9d8
 8003c80:	080038b5 	.word	0x080038b5

08003c84 <state5>:

//Anti-clockwise state
void* state5() {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
	stateString=state5String;
 8003c88:	4b95      	ldr	r3, [pc, #596]	; (8003ee0 <state5+0x25c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a95      	ldr	r2, [pc, #596]	; (8003ee4 <state5+0x260>)
 8003c8e:	6013      	str	r3, [r2, #0]
//	LCD_Print(state5String);
	readIMU();
 8003c90:	f000 fd8a 	bl	80047a8 <readIMU>
	getDistance();
 8003c94:	f000 fc80 	bl	8004598 <getDistance>

	//First turn
	turnLeft();
 8003c98:	f000 f9e0 	bl	800405c <turnLeft>
	quarterRevs = 0;
 8003c9c:	4b92      	ldr	r3, [pc, #584]	; (8003ee8 <state5+0x264>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 36) {
 8003ca2:	e016      	b.n	8003cd2 <state5+0x4e>
		driveForward();
 8003ca4:	f000 f9a2 	bl	8003fec <driveForward>
		readIMU();
 8003ca8:	f000 fd7e 	bl	80047a8 <readIMU>
		getDistance();
 8003cac:	f000 fc74 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003cb0:	e003      	b.n	8003cba <state5+0x36>
			stop();
 8003cb2:	f000 fa95 	bl	80041e0 <stop>
			getDistance();
 8003cb6:	f000 fc6f 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003cba:	4b8c      	ldr	r3, [pc, #560]	; (8003eec <state5+0x268>)
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b1e      	cmp	r3, #30
 8003cc2:	d9f6      	bls.n	8003cb2 <state5+0x2e>
		}

//		LCD_Print(state5String);
		if (state != state5) {
 8003cc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ef0 <state5+0x26c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a8a      	ldr	r2, [pc, #552]	; (8003ef4 <state5+0x270>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d001      	beq.n	8003cd2 <state5+0x4e>
			return 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e104      	b.n	8003edc <state5+0x258>
	while (quarterRevs < 36) {
 8003cd2:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <state5+0x264>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b23      	cmp	r3, #35	; 0x23
 8003cd8:	d9e4      	bls.n	8003ca4 <state5+0x20>
		}
	}

	blinkerFlag = 0;
 8003cda:	4b87      	ldr	r3, [pc, #540]	; (8003ef8 <state5+0x274>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

	//First straight
	centreWheels(FORWARD);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f9d2 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003ce8:	4b7f      	ldr	r3, [pc, #508]	; (8003ee8 <state5+0x264>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 14) {
 8003cee:	e003      	b.n	8003cf8 <state5+0x74>
		centreWheels(FORWARD);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f9ca 	bl	800408c <centreWheels>
	while (quarterRevs < 14) {
 8003cf8:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <state5+0x264>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b0d      	cmp	r3, #13
 8003cfe:	d9f7      	bls.n	8003cf0 <state5+0x6c>
//		LCD_Print(state5String);
	}
	stop();
 8003d00:	f000 fa6e 	bl	80041e0 <stop>
	brake(FORWARD);
 8003d04:	2300      	movs	r3, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa16 	bl	8004138 <brake>

	//Second turn
	turnLeft();
 8003d0c:	f000 f9a6 	bl	800405c <turnLeft>
	quarterRevs = 0;
 8003d10:	4b75      	ldr	r3, [pc, #468]	; (8003ee8 <state5+0x264>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 31) {
 8003d16:	e016      	b.n	8003d46 <state5+0xc2>
		driveForward();
 8003d18:	f000 f968 	bl	8003fec <driveForward>
		readIMU();
 8003d1c:	f000 fd44 	bl	80047a8 <readIMU>
		getDistance();
 8003d20:	f000 fc3a 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003d24:	e003      	b.n	8003d2e <state5+0xaa>
			stop();
 8003d26:	f000 fa5b 	bl	80041e0 <stop>
			getDistance();
 8003d2a:	f000 fc35 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003d2e:	4b6f      	ldr	r3, [pc, #444]	; (8003eec <state5+0x268>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b1e      	cmp	r3, #30
 8003d36:	d9f6      	bls.n	8003d26 <state5+0xa2>
		}

//		LCD_Print(state5String);
		if (state != state5) {
 8003d38:	4b6d      	ldr	r3, [pc, #436]	; (8003ef0 <state5+0x26c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6d      	ldr	r2, [pc, #436]	; (8003ef4 <state5+0x270>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d001      	beq.n	8003d46 <state5+0xc2>
			return 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e0ca      	b.n	8003edc <state5+0x258>
	while (quarterRevs < 31) {
 8003d46:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <state5+0x264>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b1e      	cmp	r3, #30
 8003d4c:	d9e4      	bls.n	8003d18 <state5+0x94>
		}
	}
	blinkerFlag = 0;
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <state5+0x274>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

	//Second straight
	centreWheels(FORWARD);
 8003d54:	2300      	movs	r3, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f998 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003d5c:	4b62      	ldr	r3, [pc, #392]	; (8003ee8 <state5+0x264>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 54) {
 8003d62:	e01c      	b.n	8003d9e <state5+0x11a>
		driveForward();
 8003d64:	f000 f942 	bl	8003fec <driveForward>
		centreWheels(FORWARD);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f98e 	bl	800408c <centreWheels>
		readIMU();
 8003d70:	f000 fd1a 	bl	80047a8 <readIMU>
		getDistance();
 8003d74:	f000 fc10 	bl	8004598 <getDistance>
		if (distance <= 30) {
 8003d78:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <state5+0x268>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b1e      	cmp	r3, #30
 8003d80:	d806      	bhi.n	8003d90 <state5+0x10c>
			quarterRevs = avoidObstacle(LEFT);
 8003d82:	2302      	movs	r3, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fa59 	bl	800423c <avoidObstacle>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <state5+0x264>)
 8003d8e:	601a      	str	r2, [r3, #0]

		}
//		LCD_Print(state5String);
		if (state != state5) {
 8003d90:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <state5+0x26c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a57      	ldr	r2, [pc, #348]	; (8003ef4 <state5+0x270>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d001      	beq.n	8003d9e <state5+0x11a>
			return 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e09e      	b.n	8003edc <state5+0x258>
	while (quarterRevs < 54) {
 8003d9e:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <state5+0x264>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b35      	cmp	r3, #53	; 0x35
 8003da4:	d9de      	bls.n	8003d64 <state5+0xe0>
		}
	}
	stop();
 8003da6:	f000 fa1b 	bl	80041e0 <stop>
	brake(FORWARD);
 8003daa:	2300      	movs	r3, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f9c3 	bl	8004138 <brake>

	//Third turn
	turnLeft();
 8003db2:	f000 f953 	bl	800405c <turnLeft>
	quarterRevs = 0;
 8003db6:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <state5+0x264>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 32) {
 8003dbc:	e016      	b.n	8003dec <state5+0x168>
		driveForward();
 8003dbe:	f000 f915 	bl	8003fec <driveForward>
		readIMU();
 8003dc2:	f000 fcf1 	bl	80047a8 <readIMU>
		getDistance();
 8003dc6:	f000 fbe7 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003dca:	e003      	b.n	8003dd4 <state5+0x150>
			stop();
 8003dcc:	f000 fa08 	bl	80041e0 <stop>
			getDistance();
 8003dd0:	f000 fbe2 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <state5+0x268>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b1e      	cmp	r3, #30
 8003ddc:	d9f6      	bls.n	8003dcc <state5+0x148>
		}

//		LCD_Print(state5String);
		if (state != state5) {
 8003dde:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <state5+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a44      	ldr	r2, [pc, #272]	; (8003ef4 <state5+0x270>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d001      	beq.n	8003dec <state5+0x168>
			return 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e077      	b.n	8003edc <state5+0x258>
	while (quarterRevs < 32) {
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <state5+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b1f      	cmp	r3, #31
 8003df2:	d9e4      	bls.n	8003dbe <state5+0x13a>
		}
	}
	blinkerFlag = 0;
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <state5+0x274>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

	//Third straight
	centreWheels(FORWARD);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f945 	bl	800408c <centreWheels>
	quarterRevs = 0;
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <state5+0x264>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 11) {
 8003e08:	e00d      	b.n	8003e26 <state5+0x1a2>
		centreWheels(FORWARD);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f93d 	bl	800408c <centreWheels>
		while (distance <= 30) {
 8003e12:	e003      	b.n	8003e1c <state5+0x198>
			stop();
 8003e14:	f000 f9e4 	bl	80041e0 <stop>
			getDistance();
 8003e18:	f000 fbbe 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003e1c:	4b33      	ldr	r3, [pc, #204]	; (8003eec <state5+0x268>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b1e      	cmp	r3, #30
 8003e24:	d9f6      	bls.n	8003e14 <state5+0x190>
	while (quarterRevs < 11) {
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <state5+0x264>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b0a      	cmp	r3, #10
 8003e2c:	d9ed      	bls.n	8003e0a <state5+0x186>
		}
	}
	brake(FORWARD);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f981 	bl	8004138 <brake>

	//Fourth turn
	turnLeft();
 8003e36:	f000 f911 	bl	800405c <turnLeft>
	quarterRevs = 0;
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <state5+0x264>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
	while (quarterRevs < 30) {
 8003e40:	e016      	b.n	8003e70 <state5+0x1ec>
		driveForward();
 8003e42:	f000 f8d3 	bl	8003fec <driveForward>
		readIMU();
 8003e46:	f000 fcaf 	bl	80047a8 <readIMU>
		getDistance();
 8003e4a:	f000 fba5 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003e4e:	e003      	b.n	8003e58 <state5+0x1d4>
			stop();
 8003e50:	f000 f9c6 	bl	80041e0 <stop>
			getDistance();
 8003e54:	f000 fba0 	bl	8004598 <getDistance>
		while (distance <= 30) {
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <state5+0x268>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b1e      	cmp	r3, #30
 8003e60:	d9f6      	bls.n	8003e50 <state5+0x1cc>
		}

//		LCD_Print(state5String);
		if (state != state5) {
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <state5+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <state5+0x270>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d001      	beq.n	8003e70 <state5+0x1ec>
			return 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e035      	b.n	8003edc <state5+0x258>
	while (quarterRevs < 30) {
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <state5+0x264>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b1d      	cmp	r3, #29
 8003e76:	d9e4      	bls.n	8003e42 <state5+0x1be>
		}
	}
	blinkerFlag = 0;
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <state5+0x274>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
	//Final straight
	while (quarterRevs < 82) {
 8003e7e:	e01c      	b.n	8003eba <state5+0x236>
		driveForward();
 8003e80:	f000 f8b4 	bl	8003fec <driveForward>
		centreWheels(FORWARD);
 8003e84:	2300      	movs	r3, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f900 	bl	800408c <centreWheels>
		readIMU();
 8003e8c:	f000 fc8c 	bl	80047a8 <readIMU>
		getDistance();
 8003e90:	f000 fb82 	bl	8004598 <getDistance>

		if (distance <= 30) {
 8003e94:	4b15      	ldr	r3, [pc, #84]	; (8003eec <state5+0x268>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b1e      	cmp	r3, #30
 8003e9c:	d806      	bhi.n	8003eac <state5+0x228>
			quarterRevs = avoidObstacle(LEFT);
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f9cb 	bl	800423c <avoidObstacle>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <state5+0x264>)
 8003eaa:	601a      	str	r2, [r3, #0]

		}
//		LCD_Print(state5String);
		if (state != state5) {
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <state5+0x26c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a10      	ldr	r2, [pc, #64]	; (8003ef4 <state5+0x270>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d001      	beq.n	8003eba <state5+0x236>
			return 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e010      	b.n	8003edc <state5+0x258>
	while (quarterRevs < 82) {
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <state5+0x264>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b51      	cmp	r3, #81	; 0x51
 8003ec0:	d9de      	bls.n	8003e80 <state5+0x1fc>
		}
	}
	brake(FORWARD);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f937 	bl	8004138 <brake>
	stop();
 8003eca:	f000 f989 	bl	80041e0 <stop>
	quarterRevs = 0;
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <state5+0x264>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
	state = state1;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <state5+0x26c>)
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <state5+0x278>)
 8003ed8:	601a      	str	r2, [r3, #0]
	return 0;
 8003eda:	2300      	movs	r3, #0

}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000008c 	.word	0x2000008c
 8003ee4:	20000094 	.word	0x20000094
 8003ee8:	200008a4 	.word	0x200008a4
 8003eec:	2000101c 	.word	0x2000101c
 8003ef0:	20000098 	.word	0x20000098
 8003ef4:	08003c85 	.word	0x08003c85
 8003ef8:	20000890 	.word	0x20000890
 8003efc:	080038b5 	.word	0x080038b5

08003f00 <state6>:

void* state6() {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	stateString=state6String;
 8003f04:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <state6+0xc8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a30      	ldr	r2, [pc, #192]	; (8003fcc <state6+0xcc>)
 8003f0a:	6013      	str	r3, [r2, #0]
	quarterRevs = 0;
 8003f0c:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <state6+0xd0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
//sprintf(state2String, "Forward state- %d cm", (int)stopDist);
	centreWheels(FORWARD);
 8003f12:	2300      	movs	r3, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f8b9 	bl	800408c <centreWheels>

	while (quarterRevs < trackLight) {               //traffic light distance
 8003f1a:	e012      	b.n	8003f42 <state6+0x42>
		while(distance<30){
			stop();
 8003f1c:	f000 f960 	bl	80041e0 <stop>
			getDistance();
 8003f20:	f000 fb3a 	bl	8004598 <getDistance>
		while(distance<30){
 8003f24:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <state6+0xd4>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b1d      	cmp	r3, #29
 8003f2c:	d9f6      	bls.n	8003f1c <state6+0x1c>
		}
		driveForward();
 8003f2e:	f000 f85d 	bl	8003fec <driveForward>
		centreWheels(FORWARD);
 8003f32:	2300      	movs	r3, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f8a9 	bl	800408c <centreWheels>
		getDistance();
 8003f3a:	f000 fb2d 	bl	8004598 <getDistance>
		readIMU();
 8003f3e:	f000 fc33 	bl	80047a8 <readIMU>
	while (quarterRevs < trackLight) {               //traffic light distance
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <state6+0xd8>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <state6+0xd0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d8e9      	bhi.n	8003f24 <state6+0x24>
//		LCD_Print(state2String);
	}
	if (trafficStop) { //not green
 8003f50:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <state6+0xdc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <state6+0xa0>
		brake(FORWARD);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f8ec 	bl	8004138 <brake>

		while (trafficStop) { //not green
 8003f60:	e003      	b.n	8003f6a <state6+0x6a>
//			LCD_Print(state2String);
			getDistance();
 8003f62:	f000 fb19 	bl	8004598 <getDistance>
			readIMU();
 8003f66:	f000 fc1f 	bl	80047a8 <readIMU>
		while (trafficStop) { //not green
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <state6+0xdc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f7      	bne.n	8003f62 <state6+0x62>
		}
	}

	while (quarterRevs < track) { //Drive to end of track
 8003f72:	e015      	b.n	8003fa0 <state6+0xa0>
		while(distance<30){

					stop();
 8003f74:	f000 f934 	bl	80041e0 <stop>
					getDistance();
 8003f78:	f000 fb0e 	bl	8004598 <getDistance>
					HAL_Delay(100);
 8003f7c:	2064      	movs	r0, #100	; 0x64
 8003f7e:	f002 fb61 	bl	8006644 <HAL_Delay>
		while(distance<30){
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <state6+0xd4>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b1d      	cmp	r3, #29
 8003f8a:	d9f3      	bls.n	8003f74 <state6+0x74>
				}
		driveForward();
 8003f8c:	f000 f82e 	bl	8003fec <driveForward>
		centreWheels(FORWARD);
 8003f90:	2300      	movs	r3, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f87a 	bl	800408c <centreWheels>
		getDistance();
 8003f98:	f000 fafe 	bl	8004598 <getDistance>
		readIMU();
 8003f9c:	f000 fc04 	bl	80047a8 <readIMU>
	while (quarterRevs < track) { //Drive to end of track
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <state6+0xe0>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <state6+0xd0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d8e9      	bhi.n	8003f82 <state6+0x82>
//		LCD_Print(state2String);
	}

	stop();
 8003fae:	f000 f917 	bl	80041e0 <stop>
	brake(FORWARD);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f8bf 	bl	8004138 <brake>
state=state1;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <state6+0xe4>)
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <state6+0xe8>)
 8003fbe:	601a      	str	r2, [r3, #0]
	return 0;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000090 	.word	0x20000090
 8003fcc:	20000094 	.word	0x20000094
 8003fd0:	200008a4 	.word	0x200008a4
 8003fd4:	2000101c 	.word	0x2000101c
 8003fd8:	20009098 	.word	0x20009098
 8003fdc:	20001018 	.word	0x20001018
 8003fe0:	2001110c 	.word	0x2001110c
 8003fe4:	20000098 	.word	0x20000098
 8003fe8:	080038b5 	.word	0x080038b5

08003fec <driveForward>:

//General functions

void driveForward() {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	stopFlag = 0;
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <driveForward+0x2c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	4808      	ldr	r0, [pc, #32]	; (800401c <driveForward+0x30>)
 8003ffc:	f003 fd78 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004000:	2201      	movs	r2, #1
 8004002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004006:	4805      	ldr	r0, [pc, #20]	; (800401c <driveForward+0x30>)
 8004008:	f003 fd72 	bl	8007af0 <HAL_GPIO_WritePin>
	TIM3->CCR1 = DRIVESPEED; //Sets the speed
 800400c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <driveForward+0x34>)
 8004012:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000068 	.word	0x20000068
 800401c:	40020800 	.word	0x40020800
 8004020:	40000400 	.word	0x40000400

08004024 <reverse>:
void reverse() {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
	stopFlag = 0;
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <reverse+0x2c>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //Sets the Direction
 800402e:	2201      	movs	r2, #1
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	4808      	ldr	r0, [pc, #32]	; (8004054 <reverse+0x30>)
 8004034:	f003 fd5c 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <reverse+0x30>)
 8004040:	f003 fd56 	bl	8007af0 <HAL_GPIO_WritePin>
	TIM3->CCR1 = DRIVESPEED; //Sets the speed
 8004044:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <reverse+0x34>)
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000068 	.word	0x20000068
 8004054:	40020800 	.word	0x40020800
 8004058:	40000400 	.word	0x40000400

0800405c <turnLeft>:

void turnLeft() {
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0

//add turn left blinker on
	servo_write(70);
 8004060:	2046      	movs	r0, #70	; 0x46
 8004062:	f000 fac7 	bl	80045f4 <servo_write>
// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	blinkerFlag = LEFT;
 8004066:	2202      	movs	r2, #2
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <turnLeft+0x14>)
 800406a:	601a      	str	r2, [r3, #0]
//add speed control

}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000890 	.word	0x20000890

08004074 <turnRight>:
void turnRight() {
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0

//add turn right blinker on
	servo_write(120);
 8004078:	2078      	movs	r0, #120	; 0x78
 800407a:	f000 fabb 	bl	80045f4 <servo_write>
// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	blinkerFlag = RIGHT;
 800407e:	2201      	movs	r2, #1
 8004080:	4b01      	ldr	r3, [pc, #4]	; (8004088 <turnRight+0x14>)
 8004082:	601a      	str	r2, [r3, #0]
//add speed control
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000890 	.word	0x20000890

0800408c <centreWheels>:
void centreWheels(int direction) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
//servo_write(97);
	blinkerFlag = FORWARD;
 8004094:	2200      	movs	r2, #0
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <centreWheels+0x9c>)
 8004098:	601a      	str	r2, [r3, #0]
	if (direction == FORWARD) {
 800409a:	2200      	movs	r2, #0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d11f      	bne.n	80040e2 <centreWheels+0x56>
		if (averageGyroZ > 1000) {
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <centreWheels+0xa0>)
 80040a4:	edd3 7a00 	vldr	s15, [r3]
 80040a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004130 <centreWheels+0xa4>
 80040ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	dd03      	ble.n	80040be <centreWheels+0x32>
//htim1.Instance->CCR1 =158;
			servo_write(99);
 80040b6:	2063      	movs	r0, #99	; 0x63
 80040b8:	f000 fa9c 	bl	80045f4 <servo_write>
		} else {
//htim1.Instance->CCR1 =157;
			servo_write(96);
		}
	}
}
 80040bc:	e030      	b.n	8004120 <centreWheels+0x94>
		} else if (averageGyroZ < -1000) {
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <centreWheels+0xa0>)
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004134 <centreWheels+0xa8>
 80040c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d0:	d503      	bpl.n	80040da <centreWheels+0x4e>
			servo_write(93);
 80040d2:	205d      	movs	r0, #93	; 0x5d
 80040d4:	f000 fa8e 	bl	80045f4 <servo_write>
}
 80040d8:	e022      	b.n	8004120 <centreWheels+0x94>
			servo_write(96);
 80040da:	2060      	movs	r0, #96	; 0x60
 80040dc:	f000 fa8a 	bl	80045f4 <servo_write>
}
 80040e0:	e01e      	b.n	8004120 <centreWheels+0x94>
		if (averageGyroZ > 1000) {
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <centreWheels+0xa0>)
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004130 <centreWheels+0xa4>
 80040ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f4:	dd03      	ble.n	80040fe <centreWheels+0x72>
			servo_write(93);
 80040f6:	205d      	movs	r0, #93	; 0x5d
 80040f8:	f000 fa7c 	bl	80045f4 <servo_write>
}
 80040fc:	e010      	b.n	8004120 <centreWheels+0x94>
		} else if (averageGyroZ < -1000) {
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <centreWheels+0xa0>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004134 <centreWheels+0xa8>
 8004108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	d503      	bpl.n	800411a <centreWheels+0x8e>
			servo_write(99);
 8004112:	2063      	movs	r0, #99	; 0x63
 8004114:	f000 fa6e 	bl	80045f4 <servo_write>
}
 8004118:	e002      	b.n	8004120 <centreWheels+0x94>
			servo_write(96);
 800411a:	2060      	movs	r0, #96	; 0x60
 800411c:	f000 fa6a 	bl	80045f4 <servo_write>
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000890 	.word	0x20000890
 800412c:	20000cf0 	.word	0x20000cf0
 8004130:	447a0000 	.word	0x447a0000
 8004134:	c47a0000 	.word	0xc47a0000

08004138 <brake>:

void brake(int direction) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	if (direction == FORWARD) {
 8004140:	2200      	movs	r2, #0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4293      	cmp	r3, r2
 8004146:	d10b      	bne.n	8004160 <brake+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //Sets the Direction
 8004148:	2201      	movs	r2, #1
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	481f      	ldr	r0, [pc, #124]	; (80041cc <brake+0x94>)
 800414e:	f003 fccf 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004152:	2200      	movs	r2, #0
 8004154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004158:	481c      	ldr	r0, [pc, #112]	; (80041cc <brake+0x94>)
 800415a:	f003 fcc9 	bl	8007af0 <HAL_GPIO_WritePin>
 800415e:	e00a      	b.n	8004176 <brake+0x3e>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	4819      	ldr	r0, [pc, #100]	; (80041cc <brake+0x94>)
 8004166:	f003 fcc3 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800416a:	2201      	movs	r2, #1
 800416c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004170:	4816      	ldr	r0, [pc, #88]	; (80041cc <brake+0x94>)
 8004172:	f003 fcbd 	bl	8007af0 <HAL_GPIO_WritePin>
	}
	TIM3->CCR1 = 498;
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <brake+0x98>)
 8004178:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(200);
 800417e:	20c8      	movs	r0, #200	; 0xc8
 8004180:	f002 fa60 	bl	8006644 <HAL_Delay>
	TIM3->CCR1 = 0;
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <brake+0x98>)
 8004186:	2200      	movs	r2, #0
 8004188:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
 800418a:	2200      	movs	r2, #0
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	480f      	ldr	r0, [pc, #60]	; (80041cc <brake+0x94>)
 8004190:	f003 fcae 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800419a:	480c      	ldr	r0, [pc, #48]	; (80041cc <brake+0x94>)
 800419c:	f003 fca8 	bl	8007af0 <HAL_GPIO_WritePin>
//Turns off blinkers and headlights
	TIM4->CCR1 = 0;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <brake+0x9c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2101      	movs	r1, #1
 80041aa:	4808      	ldr	r0, [pc, #32]	; (80041cc <brake+0x94>)
 80041ac:	f003 fca0 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041b6:	4808      	ldr	r0, [pc, #32]	; (80041d8 <brake+0xa0>)
 80041b8:	f003 fc9a 	bl	8007af0 <HAL_GPIO_WritePin>
	stopFlag = 1;
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <brake+0xa4>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
//			HAL_Delay(100);
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40020800 	.word	0x40020800
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	20000068 	.word	0x20000068

080041e0 <stop>:

void stop(void) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	stopFlag = 1;
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <stop+0x48>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
	TIM3->CCR1 = 0;
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <stop+0x4c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //Sets the Direction
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	480e      	ldr	r0, [pc, #56]	; (8004230 <stop+0x50>)
 80041f6:	f003 fc7b 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004200:	480b      	ldr	r0, [pc, #44]	; (8004230 <stop+0x50>)
 8004202:	f003 fc75 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8004206:	2200      	movs	r2, #0
 8004208:	2101      	movs	r1, #1
 800420a:	4809      	ldr	r0, [pc, #36]	; (8004230 <stop+0x50>)
 800420c:	f003 fc70 	bl	8007af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004216:	4807      	ldr	r0, [pc, #28]	; (8004234 <stop+0x54>)
 8004218:	f003 fc6a 	bl	8007af0 <HAL_GPIO_WritePin>
	TIM4->CCR1 = 0;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <stop+0x58>)
 800421e:	2200      	movs	r2, #0
 8004220:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000068 	.word	0x20000068
 800422c:	40000400 	.word	0x40000400
 8004230:	40020800 	.word	0x40020800
 8004234:	40020c00 	.word	0x40020c00
 8004238:	40000800 	.word	0x40000800

0800423c <avoidObstacle>:

uint32_t avoidObstacle(int direction) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	uint16_t distanceLimit = 30;
 8004244:	231e      	movs	r3, #30
 8004246:	827b      	strh	r3, [r7, #18]
	int reverseDist, equivDist, straightDist, rightDist, leftDist;
	storequarterRevs = quarterRevs;
 8004248:	4b47      	ldr	r3, [pc, #284]	; (8004368 <avoidObstacle+0x12c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a47      	ldr	r2, [pc, #284]	; (800436c <avoidObstacle+0x130>)
 800424e:	6013      	str	r3, [r2, #0]

	if (distanceLimit <= distanceLim) {
 8004250:	2228      	movs	r2, #40	; 0x28
 8004252:	8a7b      	ldrh	r3, [r7, #18]
 8004254:	4293      	cmp	r3, r2
 8004256:	d803      	bhi.n	8004260 <avoidObstacle+0x24>
		brake(FORWARD);
 8004258:	2300      	movs	r3, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff6c 	bl	8004138 <brake>
	}
	quarterRevs = 0;
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <avoidObstacle+0x12c>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
	reverse();
 8004266:	f7ff fedd 	bl	8004024 <reverse>
	//HAL_Delay(40);
	while (distance <= distanceLim) {
 800426a:	e001      	b.n	8004270 <avoidObstacle+0x34>
		getDistance();
 800426c:	f000 f994 	bl	8004598 <getDistance>
	while (distance <= distanceLim) {
 8004270:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <avoidObstacle+0x134>)
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	2228      	movs	r2, #40	; 0x28
 8004278:	4293      	cmp	r3, r2
 800427a:	d9f7      	bls.n	800426c <avoidObstacle+0x30>

	}
	brake(REVERSE);
 800427c:	2301      	movs	r3, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff5a 	bl	8004138 <brake>
	reverseDist = quarterRevs;
 8004284:	4b38      	ldr	r3, [pc, #224]	; (8004368 <avoidObstacle+0x12c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
	quarterRevs = 0;
 800428a:	4b37      	ldr	r3, [pc, #220]	; (8004368 <avoidObstacle+0x12c>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
	if (direction == RIGHT) {
 8004290:	2201      	movs	r2, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4293      	cmp	r3, r2
 8004296:	d12b      	bne.n	80042f0 <avoidObstacle+0xb4>
		turnRight();
 8004298:	f7ff feec 	bl	8004074 <turnRight>
		driveForward(); // for 5 seconds
 800429c:	f7ff fea6 	bl	8003fec <driveForward>
		HAL_Delay(1500);
 80042a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042a4:	f002 f9ce 	bl	8006644 <HAL_Delay>
		rightDist = quarterRevs;
 80042a8:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <avoidObstacle+0x12c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]
		quarterRevs = 0;
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <avoidObstacle+0x12c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
		turnLeft(); // for 5 seconds
 80042b4:	f7ff fed2 	bl	800405c <turnLeft>
		HAL_Delay(2200);
 80042b8:	f640 0098 	movw	r0, #2200	; 0x898
 80042bc:	f002 f9c2 	bl	8006644 <HAL_Delay>
		leftDist = quarterRevs;
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <avoidObstacle+0x12c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	617b      	str	r3, [r7, #20]
		quarterRevs = 0;
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <avoidObstacle+0x12c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
		turnRight();
 80042cc:	f7ff fed2 	bl	8004074 <turnRight>
		HAL_Delay(1540);
 80042d0:	f240 6004 	movw	r0, #1540	; 0x604
 80042d4:	f002 f9b6 	bl	8006644 <HAL_Delay>
		centreWheels(FORWARD);
 80042d8:	2300      	movs	r3, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fed6 	bl	800408c <centreWheels>
		straightDist = quarterRevs;
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <avoidObstacle+0x12c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	61fb      	str	r3, [r7, #28]
		//HAL_Delay(1600);
		brake(FORWARD);
 80042e6:	2300      	movs	r3, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff25 	bl	8004138 <brake>
 80042ee:	e02a      	b.n	8004346 <avoidObstacle+0x10a>
		//HAL_Delay(20000);
	} else {
		turnLeft();
 80042f0:	f7ff feb4 	bl	800405c <turnLeft>
		driveForward(); // for 5 seconds
 80042f4:	f7ff fe7a 	bl	8003fec <driveForward>
		HAL_Delay(1600);
 80042f8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80042fc:	f002 f9a2 	bl	8006644 <HAL_Delay>
		leftDist = quarterRevs;
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <avoidObstacle+0x12c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	617b      	str	r3, [r7, #20]
		quarterRevs = 0;
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <avoidObstacle+0x12c>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
		turnRight();
 800430c:	f7ff feb2 	bl	8004074 <turnRight>
		rightDist = quarterRevs;
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <avoidObstacle+0x12c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
		quarterRevs = 0;
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <avoidObstacle+0x12c>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
		HAL_Delay(2200);
 800431c:	f640 0098 	movw	r0, #2200	; 0x898
 8004320:	f002 f990 	bl	8006644 <HAL_Delay>
		turnLeft();
 8004324:	f7ff fe9a 	bl	800405c <turnLeft>
		HAL_Delay(1540);
 8004328:	f240 6004 	movw	r0, #1540	; 0x604
 800432c:	f002 f98a 	bl	8006644 <HAL_Delay>
		centreWheels(FORWARD);
 8004330:	2300      	movs	r3, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff feaa 	bl	800408c <centreWheels>
		straightDist = quarterRevs;
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <avoidObstacle+0x12c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61fb      	str	r3, [r7, #28]
		//HAL_Delay(1600);
		brake(FORWARD);
 800433e:	2300      	movs	r3, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fef9 	bl	8004138 <brake>
		//HAL_Delay(20000);
	}

	equivDist = storequarterRevs - reverseDist + leftDist + rightDist
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <avoidObstacle+0x130>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	441a      	add	r2, r3
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	441a      	add	r2, r3
			+ straightDist;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
	equivDist = storequarterRevs - reverseDist + leftDist + rightDist
 800435a:	60bb      	str	r3, [r7, #8]
	return equivDist;
 800435c:	68bb      	ldr	r3, [r7, #8]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200008a4 	.word	0x200008a4
 800436c:	20011110 	.word	0x20011110
 8004370:	2000101c 	.word	0x2000101c

08004374 <HAL_GPIO_EXTI_Callback>:

//Hall effect sensor function definitions
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	80fb      	strh	r3, [r7, #6]
	//Hall effect interrupt
	if (GPIO_Pin == HALL_EFFECT) {
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2220      	movs	r2, #32
 8004382:	4293      	cmp	r3, r2
 8004384:	d127      	bne.n	80043d6 <HAL_GPIO_EXTI_Callback+0x62>
		newTime = HAL_GetTick();
 8004386:	f002 f951 	bl	800662c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	4b4f      	ldr	r3, [pc, #316]	; (80044cc <HAL_GPIO_EXTI_Callback+0x158>)
 800438e:	601a      	str	r2, [r3, #0]
		speed = 49.0 / (newTime - oldTime);	//Calculate speed in m/s, quarter wheel circumference is 49mm
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <HAL_GPIO_EXTI_Callback+0x158>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc f8b2 	bl	8000504 <__aeabi_ui2d>
 80043a0:	4603      	mov	r3, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	461a      	mov	r2, r3
 80043a6:	4623      	mov	r3, r4
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	4949      	ldr	r1, [pc, #292]	; (80044d4 <HAL_GPIO_EXTI_Callback+0x160>)
 80043ae:	f7fc fa4d 	bl	800084c <__aeabi_ddiv>
 80043b2:	4603      	mov	r3, r0
 80043b4:	460c      	mov	r4, r1
 80043b6:	4618      	mov	r0, r3
 80043b8:	4621      	mov	r1, r4
 80043ba:	f7fc fc15 	bl	8000be8 <__aeabi_d2f>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b45      	ldr	r3, [pc, #276]	; (80044d8 <HAL_GPIO_EXTI_Callback+0x164>)
 80043c2:	601a      	str	r2, [r3, #0]
		oldTime = newTime;
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_GPIO_EXTI_Callback+0x158>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a41      	ldr	r2, [pc, #260]	; (80044d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80043ca:	6013      	str	r3, [r2, #0]
		quarterRevs++;
 80043cc:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_GPIO_EXTI_Callback+0x168>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	4a42      	ldr	r2, [pc, #264]	; (80044dc <HAL_GPIO_EXTI_Callback+0x168>)
 80043d4:	6013      	str	r3, [r2, #0]
	}

		if (!stopFlag) {
 80043d6:	4b42      	ldr	r3, [pc, #264]	; (80044e0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d120      	bne.n	8004420 <HAL_GPIO_EXTI_Callback+0xac>
		//			TIM4->CCR1 = 1000;
		//		} else {
		//			TIM4->CCR1 = 100;
		//		}
//				TIM4->CCR1=300*log(headlight);
			TIM4->CCR1= 110*exp(headlight/1000);
 80043de:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_GPIO_EXTI_Callback+0x170>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a41      	ldr	r2, [pc, #260]	; (80044e8 <HAL_GPIO_EXTI_Callback+0x174>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f88a 	bl	8000504 <__aeabi_ui2d>
 80043f0:	4603      	mov	r3, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	ec44 3b10 	vmov	d0, r3, r4
 80043f8:	f00a f872 	bl	800e4e0 <exp>
 80043fc:	ec51 0b10 	vmov	r0, r1, d0
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_GPIO_EXTI_Callback+0x178>)
 8004406:	f7fc f8f7 	bl	80005f8 <__aeabi_dmul>
 800440a:	4603      	mov	r3, r0
 800440c:	460c      	mov	r4, r1
 800440e:	461a      	mov	r2, r3
 8004410:	4623      	mov	r3, r4
 8004412:	4c37      	ldr	r4, [pc, #220]	; (80044f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	f7fc fbc6 	bl	8000ba8 <__aeabi_d2uiz>
 800441c:	4603      	mov	r3, r0
 800441e:	6363      	str	r3, [r4, #52]	; 0x34

			}

	if (GPIO_Pin == ULTRASONIC) {
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	2204      	movs	r2, #4
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_GPIO_EXTI_Callback+0xd8>
		ultraFlag = 0;
 8004428:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <HAL_GPIO_EXTI_Callback+0x180>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
		int time = __HAL_TIM_GET_COUNTER(&htim2);
 800442e:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <HAL_GPIO_EXTI_Callback+0x184>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	60fb      	str	r3, [r7, #12]
		distance = time / 60;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a30      	ldr	r2, [pc, #192]	; (80044fc <HAL_GPIO_EXTI_Callback+0x188>)
 800443a:	fb82 1203 	smull	r1, r2, r2, r3
 800443e:	441a      	add	r2, r3
 8004440:	1152      	asrs	r2, r2, #5
 8004442:	17db      	asrs	r3, r3, #31
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	b29a      	uxth	r2, r3
 8004448:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_GPIO_EXTI_Callback+0x18c>)
 800444a:	801a      	strh	r2, [r3, #0]
	}
	if ((quarterRevs % 4) == 0) {
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_GPIO_EXTI_Callback+0x168>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d134      	bne.n	80044c2 <HAL_GPIO_EXTI_Callback+0x14e>
		if (blinkerFlag == RIGHT && !blinkerOnR) {
 8004458:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_GPIO_EXTI_Callback+0x190>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2201      	movs	r2, #1
 800445e:	4293      	cmp	r3, r2
 8004460:	d10c      	bne.n	800447c <HAL_GPIO_EXTI_Callback+0x108>
 8004462:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_GPIO_EXTI_Callback+0x194>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <HAL_GPIO_EXTI_Callback+0x108>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 800446a:	2201      	movs	r2, #1
 800446c:	2140      	movs	r1, #64	; 0x40
 800446e:	4827      	ldr	r0, [pc, #156]	; (800450c <HAL_GPIO_EXTI_Callback+0x198>)
 8004470:	f003 fb3e 	bl	8007af0 <HAL_GPIO_WritePin>
			blinkerOnR = 1;
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_GPIO_EXTI_Callback+0x194>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e022      	b.n	80044c2 <HAL_GPIO_EXTI_Callback+0x14e>
		} else if (blinkerFlag == LEFT && !blinkerOnL) {
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_GPIO_EXTI_Callback+0x190>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2202      	movs	r2, #2
 8004482:	4293      	cmp	r3, r2
 8004484:	d10c      	bne.n	80044a0 <HAL_GPIO_EXTI_Callback+0x12c>
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <HAL_GPIO_EXTI_Callback+0x12c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800448e:	2201      	movs	r2, #1
 8004490:	2104      	movs	r1, #4
 8004492:	4820      	ldr	r0, [pc, #128]	; (8004514 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004494:	f003 fb2c 	bl	8007af0 <HAL_GPIO_WritePin>
			blinkerOnL = 1;
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_GPIO_EXTI_Callback+0x19c>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e010      	b.n	80044c2 <HAL_GPIO_EXTI_Callback+0x14e>
		} else {
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80044a0:	2200      	movs	r2, #0
 80044a2:	2140      	movs	r1, #64	; 0x40
 80044a4:	4819      	ldr	r0, [pc, #100]	; (800450c <HAL_GPIO_EXTI_Callback+0x198>)
 80044a6:	f003 fb23 	bl	8007af0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2104      	movs	r1, #4
 80044ae:	4819      	ldr	r0, [pc, #100]	; (8004514 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80044b0:	f003 fb1e 	bl	8007af0 <HAL_GPIO_WritePin>
			blinkerOnR = 0;
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <HAL_GPIO_EXTI_Callback+0x194>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
			blinkerOnL = 0;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_GPIO_EXTI_Callback+0x19c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
		}
	}

}
 80044c0:	e7ff      	b.n	80044c2 <HAL_GPIO_EXTI_Callback+0x14e>
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2000089c 	.word	0x2000089c
 80044d0:	200008a0 	.word	0x200008a0
 80044d4:	40488000 	.word	0x40488000
 80044d8:	200110a4 	.word	0x200110a4
 80044dc:	200008a4 	.word	0x200008a4
 80044e0:	20000068 	.word	0x20000068
 80044e4:	20000064 	.word	0x20000064
 80044e8:	10624dd3 	.word	0x10624dd3
 80044ec:	405b8000 	.word	0x405b8000
 80044f0:	40000800 	.word	0x40000800
 80044f4:	200008a8 	.word	0x200008a8
 80044f8:	2001126c 	.word	0x2001126c
 80044fc:	88888889 	.word	0x88888889
 8004500:	2000101c 	.word	0x2000101c
 8004504:	20000890 	.word	0x20000890
 8004508:	20000894 	.word	0x20000894
 800450c:	40021000 	.word	0x40021000
 8004510:	20000898 	.word	0x20000898
 8004514:	40020c00 	.word	0x40020c00

08004518 <Read_HCSR04>:

//Ultrasonic function definitions
uint32_t Read_HCSR04() {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	uint32_t local_time = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
	uint32_t local_time1 = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	603b      	str	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);	// pull the trig pin high
 8004526:	2201      	movs	r2, #1
 8004528:	2102      	movs	r1, #2
 800452a:	481a      	ldr	r0, [pc, #104]	; (8004594 <Read_HCSR04+0x7c>)
 800452c:	f003 fae0 	bl	8007af0 <HAL_GPIO_WritePin>
	delay_us(10);										// wait for 10 us
 8004530:	200a      	movs	r0, #10
 8004532:	f000 f847 	bl	80045c4 <delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);// pull the trig pin low
 8004536:	2200      	movs	r2, #0
 8004538:	2102      	movs	r1, #2
 800453a:	4816      	ldr	r0, [pc, #88]	; (8004594 <Read_HCSR04+0x7c>)
 800453c:	f003 fad8 	bl	8007af0 <HAL_GPIO_WritePin>

	// wait for the echo pin to go high

	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))) {
 8004540:	e00d      	b.n	800455e <Read_HCSR04+0x46>
		local_time1++;									// increment local time
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	603b      	str	r3, [r7, #0]
		delay_us(1);									// every 1 us
 8004548:	2001      	movs	r0, #1
 800454a:	f000 f83b 	bl	80045c4 <delay_us>
		if (local_time1 > 60000) {
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004554:	4293      	cmp	r3, r2
 8004556:	d902      	bls.n	800455e <Read_HCSR04+0x46>
			return 60000;
 8004558:	f64e 2360 	movw	r3, #60000	; 0xea60
 800455c:	e015      	b.n	800458a <Read_HCSR04+0x72>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))) {
 800455e:	2104      	movs	r1, #4
 8004560:	480c      	ldr	r0, [pc, #48]	; (8004594 <Read_HCSR04+0x7c>)
 8004562:	f003 faad 	bl	8007ac0 <HAL_GPIO_ReadPin>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ea      	beq.n	8004542 <Read_HCSR04+0x2a>
		}
	}

	while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))			// while the pin is high
 800456c:	e005      	b.n	800457a <Read_HCSR04+0x62>
	{
		local_time++;									// increment local time
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3301      	adds	r3, #1
 8004572:	607b      	str	r3, [r7, #4]
		delay_us(1);									// every 1 us
 8004574:	2001      	movs	r0, #1
 8004576:	f000 f825 	bl	80045c4 <delay_us>
	while (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))			// while the pin is high
 800457a:	2104      	movs	r1, #4
 800457c:	4805      	ldr	r0, [pc, #20]	; (8004594 <Read_HCSR04+0x7c>)
 800457e:	f003 fa9f 	bl	8007ac0 <HAL_GPIO_ReadPin>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f2      	bne.n	800456e <Read_HCSR04+0x56>

	}

	return local_time;
 8004588:	687b      	ldr	r3, [r7, #4]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <getDistance>:
//		ultraFlag = 1;
//	}
//
//}

void getDistance(void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	uint32_t sensor_time = Read_HCSR04();			// get the high time
 800459e:	f7ff ffbb 	bl	8004518 <Read_HCSR04>
 80045a2:	6078      	str	r0, [r7, #4]
	distance = sensor_time / 60;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <getDistance+0x24>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <getDistance+0x28>)
 80045b2:	801a      	strh	r2, [r3, #0]
	return;
 80045b4:	bf00      	nop
}
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	88888889 	.word	0x88888889
 80045c0:	2000101c 	.word	0x2000101c

080045c4 <delay_us>:

void delay_us(uint16_t us) {
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <delay_us+0x2c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80045d6:	bf00      	nop
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <delay_us+0x2c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3f9      	bcc.n	80045d8 <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	2001126c 	.word	0x2001126c

080045f4 <servo_write>:

//Servo function defs
void servo_write(int angle) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
	htim1.Instance->CCR1 = map(0, 180, 50, 250, angle);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	23fa      	movs	r3, #250	; 0xfa
 8004602:	2232      	movs	r2, #50	; 0x32
 8004604:	21b4      	movs	r1, #180	; 0xb4
 8004606:	2000      	movs	r0, #0
 8004608:	f000 f80a 	bl	8004620 <map>
 800460c:	4602      	mov	r2, r0
 800460e:	4b03      	ldr	r3, [pc, #12]	; (800461c <servo_write+0x28>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	2001122c 	.word	0x2001122c

08004620 <map>:

int map(int st1, int fn1, int st2, int fn2, int value) {
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
	return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 800462e:	6a3a      	ldr	r2, [r7, #32]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb ff75 	bl	8000524 <__aeabi_i2d>
 800463a:	4604      	mov	r4, r0
 800463c:	460d      	mov	r5, r1
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff6d 	bl	8000524 <__aeabi_i2d>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4620      	mov	r0, r4
 8004650:	4629      	mov	r1, r5
 8004652:	f7fc f8fb 	bl	800084c <__aeabi_ddiv>
 8004656:	4603      	mov	r3, r0
 8004658:	460c      	mov	r4, r1
 800465a:	4625      	mov	r5, r4
 800465c:	461c      	mov	r4, r3
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	4618      	mov	r0, r3
 8004666:	f7fb ff5d 	bl	8000524 <__aeabi_i2d>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fb ffc1 	bl	80005f8 <__aeabi_dmul>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
 800467a:	4625      	mov	r5, r4
 800467c:	461c      	mov	r4, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fb ff50 	bl	8000524 <__aeabi_i2d>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4620      	mov	r0, r4
 800468a:	4629      	mov	r1, r5
 800468c:	f7fb fdfe 	bl	800028c <__adddf3>
 8004690:	4603      	mov	r3, r0
 8004692:	460c      	mov	r4, r1
 8004694:	4618      	mov	r0, r3
 8004696:	4621      	mov	r1, r4
 8004698:	f7fc fa5e 	bl	8000b58 <__aeabi_d2iz>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080046a8 <IMU_Init>:

//IMU Functions
void IMU_Init(void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0

	/* Initialize inertial sensors (IMU) driver interface */
	dev_ctx_imu.write_reg = platform_write_imu;
 80046ac:	4b33      	ldr	r3, [pc, #204]	; (800477c <IMU_Init+0xd4>)
 80046ae:	4a34      	ldr	r2, [pc, #208]	; (8004780 <IMU_Init+0xd8>)
 80046b0:	601a      	str	r2, [r3, #0]
	dev_ctx_imu.read_reg = platform_read_imu;
 80046b2:	4b32      	ldr	r3, [pc, #200]	; (800477c <IMU_Init+0xd4>)
 80046b4:	4a33      	ldr	r2, [pc, #204]	; (8004784 <IMU_Init+0xdc>)
 80046b6:	605a      	str	r2, [r3, #4]
	dev_ctx_imu.handle = (void*) &imu_bus;
 80046b8:	4b30      	ldr	r3, [pc, #192]	; (800477c <IMU_Init+0xd4>)
 80046ba:	4a33      	ldr	r2, [pc, #204]	; (8004788 <IMU_Init+0xe0>)
 80046bc:	609a      	str	r2, [r3, #8]

	/* Initialize magnetic sensors driver interface */
	dev_ctx_mag.write_reg = platform_write_mag;
 80046be:	4b33      	ldr	r3, [pc, #204]	; (800478c <IMU_Init+0xe4>)
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <IMU_Init+0xe8>)
 80046c2:	601a      	str	r2, [r3, #0]
	dev_ctx_mag.read_reg = platform_read_mag;
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <IMU_Init+0xe4>)
 80046c6:	4a33      	ldr	r2, [pc, #204]	; (8004794 <IMU_Init+0xec>)
 80046c8:	605a      	str	r2, [r3, #4]
	dev_ctx_mag.handle = (void*) &mag_bus;
 80046ca:	4b30      	ldr	r3, [pc, #192]	; (800478c <IMU_Init+0xe4>)
 80046cc:	4a32      	ldr	r2, [pc, #200]	; (8004798 <IMU_Init+0xf0>)
 80046ce:	609a      	str	r2, [r3, #8]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80046d0:	2014      	movs	r0, #20
 80046d2:	f000 fa35 	bl	8004b40 <platform_delay>

	/* Check device ID */
	lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 80046d6:	4a31      	ldr	r2, [pc, #196]	; (800479c <IMU_Init+0xf4>)
 80046d8:	4928      	ldr	r1, [pc, #160]	; (800477c <IMU_Init+0xd4>)
 80046da:	482c      	ldr	r0, [pc, #176]	; (800478c <IMU_Init+0xe4>)
 80046dc:	f7fe fe4e 	bl	800337c <lsm9ds1_dev_id_get>
	if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
 80046e0:	4b2e      	ldr	r3, [pc, #184]	; (800479c <IMU_Init+0xf4>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b68      	cmp	r3, #104	; 0x68
 80046e6:	d103      	bne.n	80046f0 <IMU_Init+0x48>
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <IMU_Init+0xf4>)
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b3d      	cmp	r3, #61	; 0x3d
 80046ee:	d003      	beq.n	80046f8 <IMU_Init+0x50>
		while (1) {
			/* manage here device not found */
			LCD_Print((uint8_t*) "IMU NOT FOUND");
 80046f0:	482b      	ldr	r0, [pc, #172]	; (80047a0 <IMU_Init+0xf8>)
 80046f2:	f000 fa99 	bl	8004c28 <LCD_Print>
 80046f6:	e7fb      	b.n	80046f0 <IMU_Init+0x48>
		}
	}
	/* Restore default configuration */
	lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 80046f8:	2201      	movs	r2, #1
 80046fa:	4920      	ldr	r1, [pc, #128]	; (800477c <IMU_Init+0xd4>)
 80046fc:	4823      	ldr	r0, [pc, #140]	; (800478c <IMU_Init+0xe4>)
 80046fe:	f7fe fe77 	bl	80033f0 <lsm9ds1_dev_reset_set>
	do {
		lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8004702:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <IMU_Init+0xfc>)
 8004704:	491d      	ldr	r1, [pc, #116]	; (800477c <IMU_Init+0xd4>)
 8004706:	4821      	ldr	r0, [pc, #132]	; (800478c <IMU_Init+0xe4>)
 8004708:	f7fe feb7 	bl	800347a <lsm9ds1_dev_reset_get>
	} while (rst);
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <IMU_Init+0xfc>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f6      	bne.n	8004702 <IMU_Init+0x5a>

	/* Enable Block Data Update */
	lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8004714:	2201      	movs	r2, #1
 8004716:	4919      	ldr	r1, [pc, #100]	; (800477c <IMU_Init+0xd4>)
 8004718:	481c      	ldr	r0, [pc, #112]	; (800478c <IMU_Init+0xe4>)
 800471a:	f7fe fd0c 	bl	8003136 <lsm9ds1_block_data_update_set>

	/* Set full scale */
	lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800471e:	2102      	movs	r1, #2
 8004720:	4816      	ldr	r0, [pc, #88]	; (800477c <IMU_Init+0xd4>)
 8004722:	f7fe fce2 	bl	80030ea <lsm9ds1_xl_full_scale_set>
	lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8004726:	2103      	movs	r1, #3
 8004728:	4814      	ldr	r0, [pc, #80]	; (800477c <IMU_Init+0xd4>)
 800472a:	f7fe fc53 	bl	8002fd4 <lsm9ds1_gy_full_scale_set>
	lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800472e:	2103      	movs	r1, #3
 8004730:	4816      	ldr	r0, [pc, #88]	; (800478c <IMU_Init+0xe4>)
 8004732:	f7fe fdca 	bl	80032ca <lsm9ds1_mag_full_scale_set>

	/* Configure filtering chain - See datasheet for filtering chain details */
	/* Accelerometer filtering chain */
	lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8004736:	2100      	movs	r1, #0
 8004738:	4810      	ldr	r0, [pc, #64]	; (800477c <IMU_Init+0xd4>)
 800473a:	f7fe ff5a 	bl	80035f2 <lsm9ds1_xl_filter_aalias_bandwidth_set>
	lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 800473e:	2110      	movs	r1, #16
 8004740:	480e      	ldr	r0, [pc, #56]	; (800477c <IMU_Init+0xd4>)
 8004742:	f7fe ffab 	bl	800369c <lsm9ds1_xl_filter_lp_bandwidth_set>
	lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8004746:	2100      	movs	r1, #0
 8004748:	480c      	ldr	r0, [pc, #48]	; (800477c <IMU_Init+0xd4>)
 800474a:	f7fe ff81 	bl	8003650 <lsm9ds1_xl_filter_out_path_set>
	/* Gyroscope filtering chain */
	lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 800474e:	2103      	movs	r1, #3
 8004750:	480a      	ldr	r0, [pc, #40]	; (800477c <IMU_Init+0xd4>)
 8004752:	f7fe febd 	bl	80034d0 <lsm9ds1_gy_filter_lp_bandwidth_set>
	lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 8004756:	2105      	movs	r1, #5
 8004758:	4808      	ldr	r0, [pc, #32]	; (800477c <IMU_Init+0xd4>)
 800475a:	f7fe ff24 	bl	80035a6 <lsm9ds1_gy_filter_hp_bandwidth_set>
	lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 800475e:	2112      	movs	r1, #18
 8004760:	4806      	ldr	r0, [pc, #24]	; (800477c <IMU_Init+0xd4>)
 8004762:	f7fe fedb 	bl	800351c <lsm9ds1_gy_filter_out_path_set>

	/* Set Output Data Rate / Power mode */
	lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 8004766:	2122      	movs	r1, #34	; 0x22
 8004768:	4804      	ldr	r0, [pc, #16]	; (800477c <IMU_Init+0xd4>)
 800476a:	f7fe fc59 	bl	8003020 <lsm9ds1_imu_data_rate_set>
	lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 800476e:	2134      	movs	r1, #52	; 0x34
 8004770:	4806      	ldr	r0, [pc, #24]	; (800478c <IMU_Init+0xe4>)
 8004772:	f7fe fd2f 	bl	80031d4 <lsm9ds1_mag_data_rate_set>

}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000cd8 	.word	0x20000cd8
 8004780:	08004a21 	.word	0x08004a21
 8004784:	08004ab1 	.word	0x08004ab1
 8004788:	20000074 	.word	0x20000074
 800478c:	20000ce4 	.word	0x20000ce4
 8004790:	08004a65 	.word	0x08004a65
 8004794:	08004af5 	.word	0x08004af5
 8004798:	2000006c 	.word	0x2000006c
 800479c:	200008e8 	.word	0x200008e8
 80047a0:	0800e9e8 	.word	0x0800e9e8
 80047a4:	200008ee 	.word	0x200008ee

080047a8 <readIMU>:

void readIMU() {
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b092      	sub	sp, #72	; 0x48
 80047ae:	af0a      	add	r7, sp, #40	; 0x28
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 80047b0:	4a8e      	ldr	r2, [pc, #568]	; (80049ec <readIMU+0x244>)
 80047b2:	498f      	ldr	r1, [pc, #572]	; (80049f0 <readIMU+0x248>)
 80047b4:	488f      	ldr	r0, [pc, #572]	; (80049f4 <readIMU+0x24c>)
 80047b6:	f7fe fdfe 	bl	80033b6 <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 80047ba:	4b8c      	ldr	r3, [pc, #560]	; (80049ec <readIMU+0x244>)
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80ba 	beq.w	800493e <readIMU+0x196>
 80047ca:	4b88      	ldr	r3, [pc, #544]	; (80049ec <readIMU+0x244>)
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80b2 	beq.w	800493e <readIMU+0x196>
		/* Read imu data */
		memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
 80047da:	2206      	movs	r2, #6
 80047dc:	2100      	movs	r1, #0
 80047de:	4886      	ldr	r0, [pc, #536]	; (80049f8 <readIMU+0x250>)
 80047e0:	f007 f99e 	bl	800bb20 <memset>
		memset(data_raw_angular_rate.u8bit, 0x00, 3 * sizeof(int16_t));
 80047e4:	2206      	movs	r2, #6
 80047e6:	2100      	movs	r1, #0
 80047e8:	4884      	ldr	r0, [pc, #528]	; (80049fc <readIMU+0x254>)
 80047ea:	f007 f999 	bl	800bb20 <memset>

		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration.u8bit);
 80047ee:	4982      	ldr	r1, [pc, #520]	; (80049f8 <readIMU+0x250>)
 80047f0:	487f      	ldr	r0, [pc, #508]	; (80049f0 <readIMU+0x248>)
 80047f2:	f7fe fda1 	bl	8003338 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate.u8bit);
 80047f6:	4981      	ldr	r1, [pc, #516]	; (80049fc <readIMU+0x254>)
 80047f8:	487d      	ldr	r0, [pc, #500]	; (80049f0 <readIMU+0x248>)
 80047fa:	f7fe fd8c 	bl	8003316 <lsm9ds1_angular_rate_raw_get>

		acceleration_mg[0] = lsm9ds1_from_fs4g_to_mg(
 80047fe:	4b7e      	ldr	r3, [pc, #504]	; (80049f8 <readIMU+0x250>)
 8004800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fb9d 	bl	8002f44 <lsm9ds1_from_fs4g_to_mg>
 800480a:	eef0 7a40 	vmov.f32	s15, s0
 800480e:	4b7c      	ldr	r3, [pc, #496]	; (8004a00 <readIMU+0x258>)
 8004810:	edc3 7a00 	vstr	s15, [r3]
				data_raw_acceleration.i16bit[0]);
		acceleration_mg[1] = lsm9ds1_from_fs4g_to_mg(
 8004814:	4b78      	ldr	r3, [pc, #480]	; (80049f8 <readIMU+0x250>)
 8004816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fb92 	bl	8002f44 <lsm9ds1_from_fs4g_to_mg>
 8004820:	eef0 7a40 	vmov.f32	s15, s0
 8004824:	4b76      	ldr	r3, [pc, #472]	; (8004a00 <readIMU+0x258>)
 8004826:	edc3 7a01 	vstr	s15, [r3, #4]
				data_raw_acceleration.i16bit[1]);
		acceleration_mg[2] = lsm9ds1_from_fs4g_to_mg(
 800482a:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <readIMU+0x250>)
 800482c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe fb87 	bl	8002f44 <lsm9ds1_from_fs4g_to_mg>
 8004836:	eef0 7a40 	vmov.f32	s15, s0
 800483a:	4b71      	ldr	r3, [pc, #452]	; (8004a00 <readIMU+0x258>)
 800483c:	edc3 7a02 	vstr	s15, [r3, #8]
				data_raw_acceleration.i16bit[2]);

		angular_rate_mdps[0] = lsm9ds1_from_fs2000dps_to_mdps(
 8004840:	4b6e      	ldr	r3, [pc, #440]	; (80049fc <readIMU+0x254>)
 8004842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fb94 	bl	8002f74 <lsm9ds1_from_fs2000dps_to_mdps>
 800484c:	eef0 7a40 	vmov.f32	s15, s0
 8004850:	4b6c      	ldr	r3, [pc, #432]	; (8004a04 <readIMU+0x25c>)
 8004852:	edc3 7a00 	vstr	s15, [r3]
				data_raw_angular_rate.i16bit[0]);
		angular_rate_mdps[1] = lsm9ds1_from_fs2000dps_to_mdps(
 8004856:	4b69      	ldr	r3, [pc, #420]	; (80049fc <readIMU+0x254>)
 8004858:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fb89 	bl	8002f74 <lsm9ds1_from_fs2000dps_to_mdps>
 8004862:	eef0 7a40 	vmov.f32	s15, s0
 8004866:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <readIMU+0x25c>)
 8004868:	edc3 7a01 	vstr	s15, [r3, #4]
				data_raw_angular_rate.i16bit[1]);
		//angular_rate_mdps[2] = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
		float gyroTotal = 0, gyroZValue;
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
		int i = 0, N = 10;
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	230a      	movs	r3, #10
 8004878:	617b      	str	r3, [r7, #20]
		for (i = 0; i < N; i++) {
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e012      	b.n	80048a6 <readIMU+0xfe>
			gyroZValue = lsm9ds1_from_fs2000dps_to_mdps(
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <readIMU+0x254>)
 8004882:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fb74 	bl	8002f74 <lsm9ds1_from_fs2000dps_to_mdps>
 800488c:	ed87 0a04 	vstr	s0, [r7, #16]
					data_raw_angular_rate.i16bit[2]);
			gyroTotal += gyroZValue;
 8004890:	ed97 7a07 	vldr	s14, [r7, #28]
 8004894:	edd7 7a04 	vldr	s15, [r7, #16]
 8004898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489c:	edc7 7a07 	vstr	s15, [r7, #28]
		for (i = 0; i < N; i++) {
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	dbe8      	blt.n	8004880 <readIMU+0xd8>

		}
		averageGyroZ = gyroTotal / N;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c0:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <readIMU+0x260>)
 80048c2:	edc3 7a00 	vstr	s15, [r3]

		sprintf((char*) tx_buffer,
				"IMU - [mg]:%4.2f\t%4.2f\t%4.2f\t[mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80048c6:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <readIMU+0x258>)
 80048c8:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) tx_buffer,
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fe3c 	bl	8000548 <__aeabi_f2d>
 80048d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80048d4:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <readIMU+0x258>)
 80048d6:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) tx_buffer,
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fb fe35 	bl	8000548 <__aeabi_f2d>
 80048de:	4604      	mov	r4, r0
 80048e0:	460d      	mov	r5, r1
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80048e2:	4b47      	ldr	r3, [pc, #284]	; (8004a00 <readIMU+0x258>)
 80048e4:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) tx_buffer,
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fb fe2e 	bl	8000548 <__aeabi_f2d>
 80048ec:	4680      	mov	r8, r0
 80048ee:	4689      	mov	r9, r1
				angular_rate_mdps[0], angular_rate_mdps[1],
 80048f0:	4b44      	ldr	r3, [pc, #272]	; (8004a04 <readIMU+0x25c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) tx_buffer,
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fb fe27 	bl	8000548 <__aeabi_f2d>
 80048fa:	4682      	mov	sl, r0
 80048fc:	468b      	mov	fp, r1
				angular_rate_mdps[0], angular_rate_mdps[1],
 80048fe:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <readIMU+0x25c>)
 8004900:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) tx_buffer,
 8004902:	4618      	mov	r0, r3
 8004904:	f7fb fe20 	bl	8000548 <__aeabi_f2d>
 8004908:	e9c7 0100 	strd	r0, r1, [r7]
				angular_rate_mdps[2]);
 800490c:	4b3d      	ldr	r3, [pc, #244]	; (8004a04 <readIMU+0x25c>)
 800490e:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) tx_buffer,
 8004910:	4618      	mov	r0, r3
 8004912:	f7fb fe19 	bl	8000548 <__aeabi_f2d>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800491e:	ed97 7b00 	vldr	d7, [r7]
 8004922:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004926:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800492a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800492e:	e9cd 4500 	strd	r4, r5, [sp]
 8004932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004936:	4935      	ldr	r1, [pc, #212]	; (8004a0c <readIMU+0x264>)
 8004938:	4835      	ldr	r0, [pc, #212]	; (8004a10 <readIMU+0x268>)
 800493a:	f007 fe25 	bl	800c588 <siprintf>
		// tx_com(tx_buffer, strlen((char const*)tx_buffer));
	}

	if (reg.status_mag.zyxda) {
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <readIMU+0x244>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d049      	beq.n	80049e0 <readIMU+0x238>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field.u8bit, 0x00, 3 * sizeof(int16_t));
 800494c:	2206      	movs	r2, #6
 800494e:	2100      	movs	r1, #0
 8004950:	4830      	ldr	r0, [pc, #192]	; (8004a14 <readIMU+0x26c>)
 8004952:	f007 f8e5 	bl	800bb20 <memset>

		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field.u8bit);
 8004956:	492f      	ldr	r1, [pc, #188]	; (8004a14 <readIMU+0x26c>)
 8004958:	4826      	ldr	r0, [pc, #152]	; (80049f4 <readIMU+0x24c>)
 800495a:	f7fe fcfe 	bl	800335a <lsm9ds1_magnetic_raw_get>

		magnetic_field_mgauss[0] = lsm9ds1_from_fs16gauss_to_mG(
 800495e:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <readIMU+0x26c>)
 8004960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fb1d 	bl	8002fa4 <lsm9ds1_from_fs16gauss_to_mG>
 800496a:	eef0 7a40 	vmov.f32	s15, s0
 800496e:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <readIMU+0x270>)
 8004970:	edc3 7a00 	vstr	s15, [r3]
				data_raw_magnetic_field.i16bit[0]);
		magnetic_field_mgauss[1] = lsm9ds1_from_fs16gauss_to_mG(
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <readIMU+0x26c>)
 8004976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fb12 	bl	8002fa4 <lsm9ds1_from_fs16gauss_to_mG>
 8004980:	eef0 7a40 	vmov.f32	s15, s0
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <readIMU+0x270>)
 8004986:	edc3 7a01 	vstr	s15, [r3, #4]
				data_raw_magnetic_field.i16bit[1]);
		magnetic_field_mgauss[2] = lsm9ds1_from_fs16gauss_to_mG(
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <readIMU+0x26c>)
 800498c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fb07 	bl	8002fa4 <lsm9ds1_from_fs16gauss_to_mG>
 8004996:	eef0 7a40 	vmov.f32	s15, s0
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <readIMU+0x270>)
 800499c:	edc3 7a02 	vstr	s15, [r3, #8]
				data_raw_magnetic_field.i16bit[2]);

		sprintf((char*) tx_buffer, "MAG - [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
				magnetic_field_mgauss[0], magnetic_field_mgauss[1],
 80049a0:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <readIMU+0x270>)
 80049a2:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) tx_buffer, "MAG - [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb fdcf 	bl	8000548 <__aeabi_f2d>
 80049aa:	4680      	mov	r8, r0
 80049ac:	4689      	mov	r9, r1
				magnetic_field_mgauss[0], magnetic_field_mgauss[1],
 80049ae:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <readIMU+0x270>)
 80049b0:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) tx_buffer, "MAG - [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fdc8 	bl	8000548 <__aeabi_f2d>
 80049b8:	4604      	mov	r4, r0
 80049ba:	460d      	mov	r5, r1
				magnetic_field_mgauss[2]);
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <readIMU+0x270>)
 80049be:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) tx_buffer, "MAG - [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fdc1 	bl	8000548 <__aeabi_f2d>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049ce:	e9cd 4500 	strd	r4, r5, [sp]
 80049d2:	4642      	mov	r2, r8
 80049d4:	464b      	mov	r3, r9
 80049d6:	4911      	ldr	r1, [pc, #68]	; (8004a1c <readIMU+0x274>)
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <readIMU+0x268>)
 80049da:	f007 fdd5 	bl	800c588 <siprintf>
		// tx_com(tx_buffer, strlen((char const*)tx_buffer));
	}
	return;
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
}
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ea:	bf00      	nop
 80049ec:	200008ec 	.word	0x200008ec
 80049f0:	20000cd8 	.word	0x20000cd8
 80049f4:	20000ce4 	.word	0x20000ce4
 80049f8:	200008ac 	.word	0x200008ac
 80049fc:	200008b4 	.word	0x200008b4
 8004a00:	200008c4 	.word	0x200008c4
 8004a04:	200008d0 	.word	0x200008d0
 8004a08:	20000cf0 	.word	0x20000cf0
 8004a0c:	0800e9f8 	.word	0x0800e9f8
 8004a10:	200008f0 	.word	0x200008f0
 8004a14:	200008bc 	.word	0x200008bc
 8004a18:	200008dc 	.word	0x200008dc
 8004a1c:	0800ea30 	.word	0x0800ea30

08004a20 <platform_write_imu>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write_imu(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af04      	add	r7, sp, #16
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	72fb      	strb	r3, [r7, #11]
 8004a30:	4613      	mov	r3, r2
 8004a32:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*) handle;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	617b      	str	r3, [r7, #20]

	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	791b      	ldrb	r3, [r3, #4]
 8004a40:	b299      	uxth	r1, r3
 8004a42:	7afb      	ldrb	r3, [r7, #11]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a4a:	9302      	str	r3, [sp, #8]
 8004a4c:	893b      	ldrh	r3, [r7, #8]
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2301      	movs	r3, #1
 8004a56:	f003 f9b5 	bl	8007dc4 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <platform_write_mag>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write_mag(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af04      	add	r7, sp, #16
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	460b      	mov	r3, r1
 8004a72:	72fb      	strb	r3, [r7, #11]
 8004a74:	4613      	mov	r3, r2
 8004a76:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*) handle;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	617b      	str	r3, [r7, #20]

	/* Write multiple command */
	reg |= 0x80;
 8004a7c:	7afb      	ldrb	r3, [r7, #11]
 8004a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a82:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	791b      	ldrb	r3, [r3, #4]
 8004a8c:	b299      	uxth	r1, r3
 8004a8e:	7afb      	ldrb	r3, [r7, #11]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	893b      	ldrh	r3, [r7, #8]
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f003 f98f 	bl	8007dc4 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <platform_read_imu>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af04      	add	r7, sp, #16
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	461a      	mov	r2, r3
 8004abc:	460b      	mov	r3, r1
 8004abe:	72fb      	strb	r3, [r7, #11]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*) handle;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	617b      	str	r3, [r7, #20]

	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	791b      	ldrb	r3, [r3, #4]
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ada:	9302      	str	r3, [sp, #8]
 8004adc:	893b      	ldrh	r3, [r7, #8]
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f003 fa67 	bl	8007fb8 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

	return 0;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <platform_read_mag>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af04      	add	r7, sp, #16
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	461a      	mov	r2, r3
 8004b00:	460b      	mov	r3, r1
 8004b02:	72fb      	strb	r3, [r7, #11]
 8004b04:	4613      	mov	r3, r2
 8004b06:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*) handle;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	617b      	str	r3, [r7, #20]

	/* Read multiple command */
	reg |= 0x80;
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
 8004b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	b299      	uxth	r1, r3
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2301      	movs	r3, #1
 8004b32:	f003 fa41 	bl	8007fb8 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <platform_delay>:
 * @brief  platform specific delay (platform dependent)
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 fd7b 	bl	8006644 <HAL_Delay>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_ADC_ConvHalfCpltCallback>:
/*
 * @brief  platform specific initialization (platform dependent)
 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]

}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	ADC_VALUE = ((float) ADC1_BUFFER[0] / 4095) * 9200;
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_ADC_ConvCpltCallback+0x54>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b80:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004bc4 <HAL_ADC_ConvCpltCallback+0x58>
 8004b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b88:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004bc8 <HAL_ADC_ConvCpltCallback+0x5c>
 8004b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b94:	ee17 2a90 	vmov	r2, s15
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_ADC_ConvCpltCallback+0x60>)
 8004b9a:	601a      	str	r2, [r3, #0]
	headlight = ((float) ADC2_BUFFER[0]);
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <HAL_ADC_ConvCpltCallback+0x64>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bac:	ee17 2a90 	vmov	r2, s15
 8004bb0:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_ADC_ConvCpltCallback+0x68>)
 8004bb2:	601a      	str	r2, [r3, #0]
	//HAL_ADC_Stop_DMA(&hadc1);

}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20001088 	.word	0x20001088
 8004bc4:	457ff000 	.word	0x457ff000
 8004bc8:	460fc000 	.word	0x460fc000
 8004bcc:	20000060 	.word	0x20000060
 8004bd0:	200090a4 	.word	0x200090a4
 8004bd4:	20000064 	.word	0x20000064

08004bd8 <BSP_TP_Init>:

uint8_t BSP_TP_Init(void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
	// Initialise the interface and calibrate
	TP_Init(); // This is an empty function since done by STM32CubeMX
 8004bdc:	f7fd f8b6 	bl	8001d4c <TP_Init>
	TouchPanel_Calibrate();
 8004be0:	f7fd fd02 	bl	80025e8 <TouchPanel_Calibrate>

	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <BSP_TP_GetDisplayPoint>:

uint8_t BSP_TP_GetDisplayPoint(Coordinate *pDisplay) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	Coordinate *pScreen;

	pScreen = Read_Ads7846();
 8004bf4:	f7fd f97e 	bl	8001ef4 <Read_Ads7846>
 8004bf8:	60f8      	str	r0, [r7, #12]
	if (pScreen == NULL) {
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <BSP_TP_GetDisplayPoint+0x18>
		return 1; // Error reading the touch panel
 8004c00:	2301      	movs	r3, #1
 8004c02:	e00a      	b.n	8004c1a <BSP_TP_GetDisplayPoint+0x2e>
	}
	if (getDisplayPoint(pDisplay, pScreen, &matrix) == DISABLE) {
 8004c04:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <BSP_TP_GetDisplayPoint+0x38>)
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fd fc3e 	bl	800248a <getDisplayPoint>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <BSP_TP_GetDisplayPoint+0x2c>
		return 1; // Error in LCD
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <BSP_TP_GetDisplayPoint+0x2e>
	}
	return 0;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000dc8 	.word	0x20000dc8

08004c28 <LCD_Print>:

//LCD Functions
void LCD_Print(uint8_t *stateString) {
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	//countLcd++;
	BSP_LCD_DisplayStringAtLine(0, stateString);
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	2000      	movs	r0, #0
 8004c34:	f7fc fe78 	bl	8001928 <BSP_LCD_DisplayStringAtLine>
	sprintf(string2, "Speed: %.4f m/s", speed);
 8004c38:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <LCD_Print+0x9c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb fc83 	bl	8000548 <__aeabi_f2d>
 8004c42:	4603      	mov	r3, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	461a      	mov	r2, r3
 8004c48:	4623      	mov	r3, r4
 8004c4a:	491f      	ldr	r1, [pc, #124]	; (8004cc8 <LCD_Print+0xa0>)
 8004c4c:	481f      	ldr	r0, [pc, #124]	; (8004ccc <LCD_Print+0xa4>)
 8004c4e:	f007 fc9b 	bl	800c588 <siprintf>
	BSP_LCD_DisplayStringAt(160, 75, (uint8_t*) string2, 0);
 8004c52:	2300      	movs	r3, #0
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <LCD_Print+0xa4>)
 8004c56:	214b      	movs	r1, #75	; 0x4b
 8004c58:	20a0      	movs	r0, #160	; 0xa0
 8004c5a:	f7fc fde9 	bl	8001830 <BSP_LCD_DisplayStringAt>
	//HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, ADC_BUFFER_LEN);
	sprintf(buffer, "Bat. Capacity: %4d %%", (int) batCap);
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <LCD_Print+0xa8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	491b      	ldr	r1, [pc, #108]	; (8004cd4 <LCD_Print+0xac>)
 8004c66:	481c      	ldr	r0, [pc, #112]	; (8004cd8 <LCD_Print+0xb0>)
 8004c68:	f007 fc8e 	bl	800c588 <siprintf>
	BSP_LCD_DisplayStringAt(160, 95, (uint8_t*) buffer, 0);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <LCD_Print+0xb0>)
 8004c70:	215f      	movs	r1, #95	; 0x5f
 8004c72:	20a0      	movs	r0, #160	; 0xa0
 8004c74:	f7fc fddc 	bl	8001830 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "Distance: %4d cm", distance);
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <LCD_Print+0xb4>)
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <LCD_Print+0xb8>)
 8004c82:	4815      	ldr	r0, [pc, #84]	; (8004cd8 <LCD_Print+0xb0>)
 8004c84:	f007 fc80 	bl	800c588 <siprintf>
	BSP_LCD_DisplayStringAt(160, 115, (uint8_t*) buffer, 0);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <LCD_Print+0xb0>)
 8004c8c:	2173      	movs	r1, #115	; 0x73
 8004c8e:	20a0      	movs	r0, #160	; 0xa0
 8004c90:	f7fc fdce 	bl	8001830 <BSP_LCD_DisplayStringAt>
	//	sprintf(buffer, "GYR x [mdps]:%4.2f", angular_rate_mdps[0]);
	//	BSP_LCD_DisplayStringAt(160,175,(uint8_t*)buffer,0);
	//	sprintf(buffer, "GYR y [mdps]:%4.2f", angular_rate_mdps[1]);
	//	BSP_LCD_DisplayStringAt(160,135,(uint8_t*)buffer,0);
	sprintf(buffer, "GYR z [mdps]:%4.2f", averageGyroZ);
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <LCD_Print+0xbc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fc55 	bl	8000548 <__aeabi_f2d>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	4910      	ldr	r1, [pc, #64]	; (8004ce8 <LCD_Print+0xc0>)
 8004ca8:	480b      	ldr	r0, [pc, #44]	; (8004cd8 <LCD_Print+0xb0>)
 8004caa:	f007 fc6d 	bl	800c588 <siprintf>
	BSP_LCD_DisplayStringAt(160, 155, (uint8_t*) buffer, 0);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <LCD_Print+0xb0>)
 8004cb2:	219b      	movs	r1, #155	; 0x9b
 8004cb4:	20a0      	movs	r0, #160	; 0xa0
 8004cb6:	f7fc fdbb 	bl	8001830 <BSP_LCD_DisplayStringAt>
	//	BSP_LCD_DisplayStringAtLine (5, (uint8_t*)buffer);
	//	sprintf(buffer, "MAG y [mG]:%4.2f", magnetic_field_mgauss[1]);
	//	BSP_LCD_DisplayStringAtLine (6, (uint8_t*)buffer);
	//	sprintf(buffer, "MAG z [mG]:%4.2f", magnetic_field_mgauss[2]);
	//	BSP_LCD_DisplayStringAtLine (7, (uint8_t*)buffer);
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200110a4 	.word	0x200110a4
 8004cc8:	0800ea50 	.word	0x0800ea50
 8004ccc:	20000ffc 	.word	0x20000ffc
 8004cd0:	20009090 	.word	0x20009090
 8004cd4:	0800ea60 	.word	0x0800ea60
 8004cd8:	20001024 	.word	0x20001024
 8004cdc:	2000101c 	.word	0x2000101c
 8004ce0:	0800ea78 	.word	0x0800ea78
 8004ce4:	20000cf0 	.word	0x20000cf0
 8004ce8:	0800ea8c 	.word	0x0800ea8c

08004cec <CalculatorInit>:

void CalculatorInit(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
	// STEPIEN: Assume horizontal display

	// Initialize and turn on LCD and calibrate the touch panel
	BSP_LCD_Init();
 8004cf0:	f7fc fcae 	bl	8001650 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();
 8004cf4:	f7fc fef0 	bl	8001ad8 <BSP_LCD_DisplayOn>
	BSP_TP_Init();
 8004cf8:	f7ff ff6e 	bl	8004bd8 <BSP_TP_Init>

	// Display welcome message
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8004cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004d00:	f7fc fd38 	bl	8001774 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8004d04:	4862      	ldr	r0, [pc, #392]	; (8004e90 <CalculatorInit+0x1a4>)
 8004d06:	f7fc fd19 	bl	800173c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fc fd06 	bl	800171c <BSP_LCD_SetTextColor>
	//  BSP_LCD_FillRect (215, 200, 30, 30);
	//  BSP_LCD_SetTextColor (LCD_COLOR_YELLOW);
	//  BSP_LCD_FillRect (250, 200, 30, 30);
	//

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8004d10:	201f      	movs	r0, #31
 8004d12:	f7fc fd03 	bl	800171c <BSP_LCD_SetTextColor>

	//LEFT HALF
	BSP_LCD_DrawHLine(2, 39, 150);
 8004d16:	2296      	movs	r2, #150	; 0x96
 8004d18:	2127      	movs	r1, #39	; 0x27
 8004d1a:	2002      	movs	r0, #2
 8004d1c:	f7fc fe1c 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(2, 59, 150);
 8004d20:	2296      	movs	r2, #150	; 0x96
 8004d22:	213b      	movs	r1, #59	; 0x3b
 8004d24:	2002      	movs	r0, #2
 8004d26:	f7fc fe17 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(2, 149, 150);
 8004d2a:	2296      	movs	r2, #150	; 0x96
 8004d2c:	2195      	movs	r1, #149	; 0x95
 8004d2e:	2002      	movs	r0, #2
 8004d30:	f7fc fe12 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(2, 169, 150);
 8004d34:	2296      	movs	r2, #150	; 0x96
 8004d36:	21a9      	movs	r1, #169	; 0xa9
 8004d38:	2002      	movs	r0, #2
 8004d3a:	f7fc fe0d 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(2, 227, 150);
 8004d3e:	2296      	movs	r2, #150	; 0x96
 8004d40:	21e3      	movs	r1, #227	; 0xe3
 8004d42:	2002      	movs	r0, #2
 8004d44:	f7fc fe08 	bl	8001958 <BSP_LCD_DrawHLine>

	//Draw Vertical Lines for Button Grid
	BSP_LCD_DrawVLine(52, 60, 89);
 8004d48:	2259      	movs	r2, #89	; 0x59
 8004d4a:	213c      	movs	r1, #60	; 0x3c
 8004d4c:	2034      	movs	r0, #52	; 0x34
 8004d4e:	f7fc fe3d 	bl	80019cc <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine(102, 60, 89);
 8004d52:	2259      	movs	r2, #89	; 0x59
 8004d54:	213c      	movs	r1, #60	; 0x3c
 8004d56:	2066      	movs	r0, #102	; 0x66
 8004d58:	f7fc fe38 	bl	80019cc <BSP_LCD_DrawVLine>
	BSP_LCD_DrawHLine(2, 105, 150);
 8004d5c:	2296      	movs	r2, #150	; 0x96
 8004d5e:	2169      	movs	r1, #105	; 0x69
 8004d60:	2002      	movs	r0, #2
 8004d62:	f7fc fdf9 	bl	8001958 <BSP_LCD_DrawHLine>

	//BUTTON
	BSP_LCD_DrawVLine(2, 39, 189);
 8004d66:	22bd      	movs	r2, #189	; 0xbd
 8004d68:	2127      	movs	r1, #39	; 0x27
 8004d6a:	2002      	movs	r0, #2
 8004d6c:	f7fc fe2e 	bl	80019cc <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine(151, 39, 189);
 8004d70:	22bd      	movs	r2, #189	; 0xbd
 8004d72:	2127      	movs	r1, #39	; 0x27
 8004d74:	2097      	movs	r0, #151	; 0x97
 8004d76:	f7fc fe29 	bl	80019cc <BSP_LCD_DrawVLine>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f7fc fcce 	bl	800171c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(23, 77, "1", 0);
 8004d80:	2300      	movs	r3, #0
 8004d82:	4a44      	ldr	r2, [pc, #272]	; (8004e94 <CalculatorInit+0x1a8>)
 8004d84:	214d      	movs	r1, #77	; 0x4d
 8004d86:	2017      	movs	r0, #23
 8004d88:	f7fc fd52 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(23, 122, "4", 0);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4a42      	ldr	r2, [pc, #264]	; (8004e98 <CalculatorInit+0x1ac>)
 8004d90:	217a      	movs	r1, #122	; 0x7a
 8004d92:	2017      	movs	r0, #23
 8004d94:	f7fc fd4c 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(73, 77, "2", 0);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <CalculatorInit+0x1b0>)
 8004d9c:	214d      	movs	r1, #77	; 0x4d
 8004d9e:	2049      	movs	r0, #73	; 0x49
 8004da0:	f7fc fd46 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(73, 122, "5", 0);
 8004da4:	2300      	movs	r3, #0
 8004da6:	4a3e      	ldr	r2, [pc, #248]	; (8004ea0 <CalculatorInit+0x1b4>)
 8004da8:	217a      	movs	r1, #122	; 0x7a
 8004daa:	2049      	movs	r0, #73	; 0x49
 8004dac:	f7fc fd40 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(123, 77, "3", 0);
 8004db0:	2300      	movs	r3, #0
 8004db2:	4a3c      	ldr	r2, [pc, #240]	; (8004ea4 <CalculatorInit+0x1b8>)
 8004db4:	214d      	movs	r1, #77	; 0x4d
 8004db6:	207b      	movs	r0, #123	; 0x7b
 8004db8:	f7fc fd3a 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(123, 122, "6", 0);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ea8 <CalculatorInit+0x1bc>)
 8004dc0:	217a      	movs	r1, #122	; 0x7a
 8004dc2:	207b      	movs	r0, #123	; 0x7b
 8004dc4:	f7fc fd34 	bl	8001830 <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(4, 45, "States:", 0);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4a38      	ldr	r2, [pc, #224]	; (8004eac <CalculatorInit+0x1c0>)
 8004dcc:	212d      	movs	r1, #45	; 0x2d
 8004dce:	2004      	movs	r0, #4
 8004dd0:	f7fc fd2e 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(4, 155, "Travel Map:", 0);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4a36      	ldr	r2, [pc, #216]	; (8004eb0 <CalculatorInit+0x1c4>)
 8004dd8:	219b      	movs	r1, #155	; 0x9b
 8004dda:	2004      	movs	r0, #4
 8004ddc:	f7fc fd28 	bl	8001830 <BSP_LCD_DisplayStringAt>

	//  //RIGHT HALF
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8004de0:	201f      	movs	r0, #31
 8004de2:	f7fc fc9b 	bl	800171c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawHLine(158, 39, 159);
 8004de6:	229f      	movs	r2, #159	; 0x9f
 8004de8:	2127      	movs	r1, #39	; 0x27
 8004dea:	209e      	movs	r0, #158	; 0x9e
 8004dec:	f7fc fdb4 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 227, 159);
 8004df0:	229f      	movs	r2, #159	; 0x9f
 8004df2:	21e3      	movs	r1, #227	; 0xe3
 8004df4:	209e      	movs	r0, #158	; 0x9e
 8004df6:	f7fc fdaf 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 70, 159);
 8004dfa:	229f      	movs	r2, #159	; 0x9f
 8004dfc:	2146      	movs	r1, #70	; 0x46
 8004dfe:	209e      	movs	r0, #158	; 0x9e
 8004e00:	f7fc fdaa 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 110, 159);
 8004e04:	229f      	movs	r2, #159	; 0x9f
 8004e06:	216e      	movs	r1, #110	; 0x6e
 8004e08:	209e      	movs	r0, #158	; 0x9e
 8004e0a:	f7fc fda5 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 150, 159);
 8004e0e:	229f      	movs	r2, #159	; 0x9f
 8004e10:	2196      	movs	r1, #150	; 0x96
 8004e12:	209e      	movs	r0, #158	; 0x9e
 8004e14:	f7fc fda0 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 190, 159);
 8004e18:	229f      	movs	r2, #159	; 0x9f
 8004e1a:	21be      	movs	r1, #190	; 0xbe
 8004e1c:	209e      	movs	r0, #158	; 0x9e
 8004e1e:	f7fc fd9b 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 90, 159);
 8004e22:	229f      	movs	r2, #159	; 0x9f
 8004e24:	215a      	movs	r1, #90	; 0x5a
 8004e26:	209e      	movs	r0, #158	; 0x9e
 8004e28:	f7fc fd96 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 130, 159);
 8004e2c:	229f      	movs	r2, #159	; 0x9f
 8004e2e:	2182      	movs	r1, #130	; 0x82
 8004e30:	209e      	movs	r0, #158	; 0x9e
 8004e32:	f7fc fd91 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 170, 159);
 8004e36:	229f      	movs	r2, #159	; 0x9f
 8004e38:	21aa      	movs	r1, #170	; 0xaa
 8004e3a:	209e      	movs	r0, #158	; 0x9e
 8004e3c:	f7fc fd8c 	bl	8001958 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(158, 210, 159);
 8004e40:	229f      	movs	r2, #159	; 0x9f
 8004e42:	21d2      	movs	r1, #210	; 0xd2
 8004e44:	209e      	movs	r0, #158	; 0x9e
 8004e46:	f7fc fd87 	bl	8001958 <BSP_LCD_DrawHLine>
	//
	//Draw Vertical Lines for status bar
	BSP_LCD_DrawVLine(158, 39, 189);
 8004e4a:	22bd      	movs	r2, #189	; 0xbd
 8004e4c:	2127      	movs	r1, #39	; 0x27
 8004e4e:	209e      	movs	r0, #158	; 0x9e
 8004e50:	f7fc fdbc 	bl	80019cc <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine(317, 39, 189);
 8004e54:	22bd      	movs	r2, #189	; 0xbd
 8004e56:	2127      	movs	r1, #39	; 0x27
 8004e58:	f240 103d 	movw	r0, #317	; 0x13d
 8004e5c:	f7fc fdb6 	bl	80019cc <BSP_LCD_DrawVLine>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7fc fc5b 	bl	800171c <BSP_LCD_SetTextColor>

	BSP_LCD_SetFont(&Font16);
 8004e66:	4813      	ldr	r0, [pc, #76]	; (8004eb4 <CalculatorInit+0x1c8>)
 8004e68:	f7fc fc68 	bl	800173c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(203, 49, "Status", 0);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <CalculatorInit+0x1cc>)
 8004e70:	2131      	movs	r1, #49	; 0x31
 8004e72:	20cb      	movs	r0, #203	; 0xcb
 8004e74:	f7fc fcdc 	bl	8001830 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8004e78:	4805      	ldr	r0, [pc, #20]	; (8004e90 <CalculatorInit+0x1a4>)
 8004e7a:	f7fc fc5f 	bl	800173c <BSP_LCD_SetFont>
	//	BSP_LCD_DisplayStringAt(160,95,"Distance: 400cm",0);
	//	BSP_LCD_DisplayStringAt(160,175,"Motor Current: 2mA",0);
	//	BSP_LCD_DisplayStringAt(160,135,"Direction: North",0);
	//	BSP_LCD_DisplayStringAt(160,155,"Orientation:AClockwise",0);
	//	BSP_LCD_DisplayStringAt(160,175,"Bat. Voltage: 1234 mV",0);
	BSP_LCD_DisplayStringAt(160, 195, " ", 0);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <CalculatorInit+0x1d0>)
 8004e82:	21c3      	movs	r1, #195	; 0xc3
 8004e84:	20a0      	movs	r0, #160	; 0xa0
 8004e86:	f7fc fcd3 	bl	8001830 <BSP_LCD_DisplayStringAt>

	//BSP_LCD_SetFont (&Font8);
	//BSP_LCD_DisplayStringAt(1,228,"Battery Voltage value: ",0);
	//BSP_LCD_SetFont (&Font12);
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000048 	.word	0x20000048
 8004e94:	0800eaa0 	.word	0x0800eaa0
 8004e98:	0800eaa4 	.word	0x0800eaa4
 8004e9c:	0800eaa8 	.word	0x0800eaa8
 8004ea0:	0800eaac 	.word	0x0800eaac
 8004ea4:	0800eab0 	.word	0x0800eab0
 8004ea8:	0800eab4 	.word	0x0800eab4
 8004eac:	0800eab8 	.word	0x0800eab8
 8004eb0:	0800eac0 	.word	0x0800eac0
 8004eb4:	20000050 	.word	0x20000050
 8004eb8:	0800eacc 	.word	0x0800eacc
 8004ebc:	0800ead4 	.word	0x0800ead4

08004ec0 <CalculatorProcess>:
		displayEntryX += 6 * (length);
	}
}
;

void CalculatorProcess(void) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0

	static uint16_t shift = 0; //help to switch button display and whether we compute inverse trig functions or not (extensions to fit more functionality in a small screen)
	static uint16_t deg = 1; //flag to help user to use trig functions for degrees or radian answer conversion before computing. (does not apply to hyperbolic functions)
	static uint16_t eq = 0; //equal symbol flag to help clear screen when taking user input after computing an answer

	if (resetFlag == 0) {
 8004ec4:	4bba      	ldr	r3, [pc, #744]	; (80051b0 <CalculatorProcess+0x2f0>)
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10f      	bne.n	8004eec <CalculatorProcess+0x2c>
		tokens = (uint8_t**) malloc(sizeof(uint8_t*) * 159); //allocate memory on first pass
 8004ecc:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8004ed0:	f006 fe1e 	bl	800bb10 <malloc>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4bb6      	ldr	r3, [pc, #728]	; (80051b4 <CalculatorProcess+0x2f4>)
 8004eda:	601a      	str	r2, [r3, #0]
		memset(token, '\0', sizeof(token));
 8004edc:	229f      	movs	r2, #159	; 0x9f
 8004ede:	2100      	movs	r1, #0
 8004ee0:	48b5      	ldr	r0, [pc, #724]	; (80051b8 <CalculatorProcess+0x2f8>)
 8004ee2:	f006 fe1d 	bl	800bb20 <memset>
		resetFlag = 1;
 8004ee6:	4bb2      	ldr	r3, [pc, #712]	; (80051b0 <CalculatorProcess+0x2f0>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	801a      	strh	r2, [r3, #0]

	//
	//	BSP_LCD_DrawVLine (52, 60, 89);
	//	    BSP_LCD_DrawVLine (102, 60, 89);
	//	    BSP_LCD_DrawHLine (2, 105, 150);
	if (BSP_TP_GetDisplayPoint(&display) == 0) { // if touched
 8004eec:	48b3      	ldr	r0, [pc, #716]	; (80051bc <CalculatorProcess+0x2fc>)
 8004eee:	f7ff fe7d 	bl	8004bec <BSP_TP_GetDisplayPoint>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 821c 	bne.w	8005332 <CalculatorProcess+0x472>
		if ((display.x >= 2) && (display.x <= 51) && (display.y >= 60)
 8004efa:	4bb0      	ldr	r3, [pc, #704]	; (80051bc <CalculatorProcess+0x2fc>)
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d967      	bls.n	8004fd2 <CalculatorProcess+0x112>
 8004f02:	4bae      	ldr	r3, [pc, #696]	; (80051bc <CalculatorProcess+0x2fc>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	2b33      	cmp	r3, #51	; 0x33
 8004f08:	d863      	bhi.n	8004fd2 <CalculatorProcess+0x112>
 8004f0a:	4bac      	ldr	r3, [pc, #688]	; (80051bc <CalculatorProcess+0x2fc>)
 8004f0c:	885b      	ldrh	r3, [r3, #2]
 8004f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8004f10:	d95f      	bls.n	8004fd2 <CalculatorProcess+0x112>
				&& (display.y <= 105)) {
 8004f12:	4baa      	ldr	r3, [pc, #680]	; (80051bc <CalculatorProcess+0x2fc>)
 8004f14:	885b      	ldrh	r3, [r3, #2]
 8004f16:	2b69      	cmp	r3, #105	; 0x69
 8004f18:	d85b      	bhi.n	8004fd2 <CalculatorProcess+0x112>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f7fc fbfe 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "10cm", 0);
 8004f20:	2300      	movs	r3, #0
 8004f22:	4aa7      	ldr	r2, [pc, #668]	; (80051c0 <CalculatorProcess+0x300>)
 8004f24:	214d      	movs	r1, #77	; 0x4d
 8004f26:	2017      	movs	r0, #23
 8004f28:	f7fc fc82 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 77, "20cm", 0);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4aa5      	ldr	r2, [pc, #660]	; (80051c4 <CalculatorProcess+0x304>)
 8004f30:	214d      	movs	r1, #77	; 0x4d
 8004f32:	2049      	movs	r0, #73	; 0x49
 8004f34:	f7fc fc7c 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 77, "30cm", 0);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4aa3      	ldr	r2, [pc, #652]	; (80051c8 <CalculatorProcess+0x308>)
 8004f3c:	214d      	movs	r1, #77	; 0x4d
 8004f3e:	207b      	movs	r0, #123	; 0x7b
 8004f40:	f7fc fc76 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "40cm", 0);
 8004f44:	2300      	movs	r3, #0
 8004f46:	4aa1      	ldr	r2, [pc, #644]	; (80051cc <CalculatorProcess+0x30c>)
 8004f48:	217a      	movs	r1, #122	; 0x7a
 8004f4a:	2017      	movs	r0, #23
 8004f4c:	f7fc fc70 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 122, "50cm", 0);
 8004f50:	2300      	movs	r3, #0
 8004f52:	4a9f      	ldr	r2, [pc, #636]	; (80051d0 <CalculatorProcess+0x310>)
 8004f54:	217a      	movs	r1, #122	; 0x7a
 8004f56:	2049      	movs	r0, #73	; 0x49
 8004f58:	f7fc fc6a 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 122, "60cm", 0);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4a9d      	ldr	r2, [pc, #628]	; (80051d4 <CalculatorProcess+0x314>)
 8004f60:	217a      	movs	r1, #122	; 0x7a
 8004f62:	207b      	movs	r0, #123	; 0x7b
 8004f64:	f7fc fc64 	bl	8001830 <BSP_LCD_DisplayStringAt>
			HAL_Delay(800);
 8004f68:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004f6c:	f001 fb6a 	bl	8006644 <HAL_Delay>
			while (distSelect() == 1) {
 8004f70:	bf00      	nop
 8004f72:	f000 fad1 	bl	8005518 <distSelect>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d0fa      	beq.n	8004f72 <CalculatorProcess+0xb2>
			//			else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 60)&& (display.y <= 105)) stopDist=20;
			//			else if ((display.x >= 102) && (display.x <= 150) && (display.y >= 60)&& (display.y <= 105)) stopDist=30;
			//			else if ((display.x >= 2) && (display.x <= 51) && (display.y >= 106)&& (display.y <= 149)) stopDist=40;
			//			else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 106)&& (display.y <= 149)) stopDist=50;
			//			else if ((display.x >= 102) && (display.x <= 150)&& (display.y >= 106) && (display.y <= 149)) stopDist=60;
			state = state2;
 8004f7c:	4b96      	ldr	r3, [pc, #600]	; (80051d8 <CalculatorProcess+0x318>)
 8004f7e:	4a97      	ldr	r2, [pc, #604]	; (80051dc <CalculatorProcess+0x31c>)
 8004f80:	601a      	str	r2, [r3, #0]

			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004f82:	2000      	movs	r0, #0
 8004f84:	f7fc fbca 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "1   ", 0);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4a95      	ldr	r2, [pc, #596]	; (80051e0 <CalculatorProcess+0x320>)
 8004f8c:	214d      	movs	r1, #77	; 0x4d
 8004f8e:	2017      	movs	r0, #23
 8004f90:	f7fc fc4e 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 77, "2   ", 0);
 8004f94:	2300      	movs	r3, #0
 8004f96:	4a93      	ldr	r2, [pc, #588]	; (80051e4 <CalculatorProcess+0x324>)
 8004f98:	214d      	movs	r1, #77	; 0x4d
 8004f9a:	2049      	movs	r0, #73	; 0x49
 8004f9c:	f7fc fc48 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "4   ", 0);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4a91      	ldr	r2, [pc, #580]	; (80051e8 <CalculatorProcess+0x328>)
 8004fa4:	217a      	movs	r1, #122	; 0x7a
 8004fa6:	2017      	movs	r0, #23
 8004fa8:	f7fc fc42 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 122, "5   ", 0);
 8004fac:	2300      	movs	r3, #0
 8004fae:	4a8f      	ldr	r2, [pc, #572]	; (80051ec <CalculatorProcess+0x32c>)
 8004fb0:	217a      	movs	r1, #122	; 0x7a
 8004fb2:	2049      	movs	r0, #73	; 0x49
 8004fb4:	f7fc fc3c 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 77, "3   ", 0);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4a8d      	ldr	r2, [pc, #564]	; (80051f0 <CalculatorProcess+0x330>)
 8004fbc:	214d      	movs	r1, #77	; 0x4d
 8004fbe:	207b      	movs	r0, #123	; 0x7b
 8004fc0:	f7fc fc36 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 122, "6   ", 0);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4a8b      	ldr	r2, [pc, #556]	; (80051f4 <CalculatorProcess+0x334>)
 8004fc8:	217a      	movs	r1, #122	; 0x7a
 8004fca:	207b      	movs	r0, #123	; 0x7b
 8004fcc:	f7fc fc30 	bl	8001830 <BSP_LCD_DisplayStringAt>
			return 0;
 8004fd0:	e1b2      	b.n	8005338 <CalculatorProcess+0x478>
		} else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 60)
 8004fd2:	4b7a      	ldr	r3, [pc, #488]	; (80051bc <CalculatorProcess+0x2fc>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	2b33      	cmp	r3, #51	; 0x33
 8004fd8:	d93a      	bls.n	8005050 <CalculatorProcess+0x190>
 8004fda:	4b78      	ldr	r3, [pc, #480]	; (80051bc <CalculatorProcess+0x2fc>)
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	2b65      	cmp	r3, #101	; 0x65
 8004fe0:	d836      	bhi.n	8005050 <CalculatorProcess+0x190>
 8004fe2:	4b76      	ldr	r3, [pc, #472]	; (80051bc <CalculatorProcess+0x2fc>)
 8004fe4:	885b      	ldrh	r3, [r3, #2]
 8004fe6:	2b3b      	cmp	r3, #59	; 0x3b
 8004fe8:	d932      	bls.n	8005050 <CalculatorProcess+0x190>
				&& (display.y <= 105)) {
 8004fea:	4b74      	ldr	r3, [pc, #464]	; (80051bc <CalculatorProcess+0x2fc>)
 8004fec:	885b      	ldrh	r3, [r3, #2]
 8004fee:	2b69      	cmp	r3, #105	; 0x69
 8004ff0:	d82e      	bhi.n	8005050 <CalculatorProcess+0x190>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8004ff2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004ff6:	f7fc fb91 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(73, 77, "2", 0);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4a7e      	ldr	r2, [pc, #504]	; (80051f8 <CalculatorProcess+0x338>)
 8004ffe:	214d      	movs	r1, #77	; 0x4d
 8005000:	2049      	movs	r0, #73	; 0x49
 8005002:	f7fc fc15 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005006:	2000      	movs	r0, #0
 8005008:	f7fc fb88 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "1", 0);
 800500c:	2300      	movs	r3, #0
 800500e:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <CalculatorProcess+0x33c>)
 8005010:	214d      	movs	r1, #77	; 0x4d
 8005012:	2017      	movs	r0, #23
 8005014:	f7fc fc0c 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "4", 0);
 8005018:	2300      	movs	r3, #0
 800501a:	4a79      	ldr	r2, [pc, #484]	; (8005200 <CalculatorProcess+0x340>)
 800501c:	217a      	movs	r1, #122	; 0x7a
 800501e:	2017      	movs	r0, #23
 8005020:	f7fc fc06 	bl	8001830 <BSP_LCD_DisplayStringAt>

			BSP_LCD_DisplayStringAt(73, 122, "5", 0);
 8005024:	2300      	movs	r3, #0
 8005026:	4a77      	ldr	r2, [pc, #476]	; (8005204 <CalculatorProcess+0x344>)
 8005028:	217a      	movs	r1, #122	; 0x7a
 800502a:	2049      	movs	r0, #73	; 0x49
 800502c:	f7fc fc00 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 77, "3", 0);
 8005030:	2300      	movs	r3, #0
 8005032:	4a75      	ldr	r2, [pc, #468]	; (8005208 <CalculatorProcess+0x348>)
 8005034:	214d      	movs	r1, #77	; 0x4d
 8005036:	207b      	movs	r0, #123	; 0x7b
 8005038:	f7fc fbfa 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 122, "6", 0);
 800503c:	2300      	movs	r3, #0
 800503e:	4a73      	ldr	r2, [pc, #460]	; (800520c <CalculatorProcess+0x34c>)
 8005040:	217a      	movs	r1, #122	; 0x7a
 8005042:	207b      	movs	r0, #123	; 0x7b
 8005044:	f7fc fbf4 	bl	8001830 <BSP_LCD_DisplayStringAt>
			state = state4;
 8005048:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <CalculatorProcess+0x318>)
 800504a:	4a71      	ldr	r2, [pc, #452]	; (8005210 <CalculatorProcess+0x350>)
 800504c:	601a      	str	r2, [r3, #0]
			return 0;
 800504e:	e173      	b.n	8005338 <CalculatorProcess+0x478>
		} else if ((display.x >= 102) && (display.x <= 150) && (display.y >= 60)
 8005050:	4b5a      	ldr	r3, [pc, #360]	; (80051bc <CalculatorProcess+0x2fc>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2b65      	cmp	r3, #101	; 0x65
 8005056:	d93a      	bls.n	80050ce <CalculatorProcess+0x20e>
 8005058:	4b58      	ldr	r3, [pc, #352]	; (80051bc <CalculatorProcess+0x2fc>)
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	2b96      	cmp	r3, #150	; 0x96
 800505e:	d836      	bhi.n	80050ce <CalculatorProcess+0x20e>
 8005060:	4b56      	ldr	r3, [pc, #344]	; (80051bc <CalculatorProcess+0x2fc>)
 8005062:	885b      	ldrh	r3, [r3, #2]
 8005064:	2b3b      	cmp	r3, #59	; 0x3b
 8005066:	d932      	bls.n	80050ce <CalculatorProcess+0x20e>
				&& (display.y <= 105)) {
 8005068:	4b54      	ldr	r3, [pc, #336]	; (80051bc <CalculatorProcess+0x2fc>)
 800506a:	885b      	ldrh	r3, [r3, #2]
 800506c:	2b69      	cmp	r3, #105	; 0x69
 800506e:	d82e      	bhi.n	80050ce <CalculatorProcess+0x20e>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005070:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005074:	f7fc fb52 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(123, 77, "3", 0);
 8005078:	2300      	movs	r3, #0
 800507a:	4a63      	ldr	r2, [pc, #396]	; (8005208 <CalculatorProcess+0x348>)
 800507c:	214d      	movs	r1, #77	; 0x4d
 800507e:	207b      	movs	r0, #123	; 0x7b
 8005080:	f7fc fbd6 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005084:	2000      	movs	r0, #0
 8005086:	f7fc fb49 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "1", 0);
 800508a:	2300      	movs	r3, #0
 800508c:	4a5b      	ldr	r2, [pc, #364]	; (80051fc <CalculatorProcess+0x33c>)
 800508e:	214d      	movs	r1, #77	; 0x4d
 8005090:	2017      	movs	r0, #23
 8005092:	f7fc fbcd 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "4", 0);
 8005096:	2300      	movs	r3, #0
 8005098:	4a59      	ldr	r2, [pc, #356]	; (8005200 <CalculatorProcess+0x340>)
 800509a:	217a      	movs	r1, #122	; 0x7a
 800509c:	2017      	movs	r0, #23
 800509e:	f7fc fbc7 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 77, "2", 0);
 80050a2:	2300      	movs	r3, #0
 80050a4:	4a54      	ldr	r2, [pc, #336]	; (80051f8 <CalculatorProcess+0x338>)
 80050a6:	214d      	movs	r1, #77	; 0x4d
 80050a8:	2049      	movs	r0, #73	; 0x49
 80050aa:	f7fc fbc1 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 122, "5", 0);
 80050ae:	2300      	movs	r3, #0
 80050b0:	4a54      	ldr	r2, [pc, #336]	; (8005204 <CalculatorProcess+0x344>)
 80050b2:	217a      	movs	r1, #122	; 0x7a
 80050b4:	2049      	movs	r0, #73	; 0x49
 80050b6:	f7fc fbbb 	bl	8001830 <BSP_LCD_DisplayStringAt>

			BSP_LCD_DisplayStringAt(123, 122, "6", 0);
 80050ba:	2300      	movs	r3, #0
 80050bc:	4a53      	ldr	r2, [pc, #332]	; (800520c <CalculatorProcess+0x34c>)
 80050be:	217a      	movs	r1, #122	; 0x7a
 80050c0:	207b      	movs	r0, #123	; 0x7b
 80050c2:	f7fc fbb5 	bl	8001830 <BSP_LCD_DisplayStringAt>
			state = state5;
 80050c6:	4b44      	ldr	r3, [pc, #272]	; (80051d8 <CalculatorProcess+0x318>)
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <CalculatorProcess+0x354>)
 80050ca:	601a      	str	r2, [r3, #0]
			return 0;
 80050cc:	e134      	b.n	8005338 <CalculatorProcess+0x478>
		} else if ((display.x >= 2) && (display.x <= 51) && (display.y >= 106)
 80050ce:	4b3b      	ldr	r3, [pc, #236]	; (80051bc <CalculatorProcess+0x2fc>)
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	f240 80b6 	bls.w	8005244 <CalculatorProcess+0x384>
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <CalculatorProcess+0x2fc>)
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	2b33      	cmp	r3, #51	; 0x33
 80050de:	f200 80b1 	bhi.w	8005244 <CalculatorProcess+0x384>
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <CalculatorProcess+0x2fc>)
 80050e4:	885b      	ldrh	r3, [r3, #2]
 80050e6:	2b69      	cmp	r3, #105	; 0x69
 80050e8:	f240 80ac 	bls.w	8005244 <CalculatorProcess+0x384>
				&& (display.y <= 149)) {
 80050ec:	4b33      	ldr	r3, [pc, #204]	; (80051bc <CalculatorProcess+0x2fc>)
 80050ee:	885b      	ldrh	r3, [r3, #2]
 80050f0:	2b95      	cmp	r3, #149	; 0x95
 80050f2:	f200 80a7 	bhi.w	8005244 <CalculatorProcess+0x384>
//			BSP_LCD_SetTextColor(LCD_COLOR_RED);
//			BSP_LCD_DisplayStringAt(23, 122, "4", 0);
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fc fb10 	bl	800171c <BSP_LCD_SetTextColor>
						BSP_LCD_DisplayStringAt(23, 77, "long", 0);
 80050fc:	2300      	movs	r3, #0
 80050fe:	4a46      	ldr	r2, [pc, #280]	; (8005218 <CalculatorProcess+0x358>)
 8005100:	214d      	movs	r1, #77	; 0x4d
 8005102:	2017      	movs	r0, #23
 8005104:	f7fc fb94 	bl	8001830 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(73, 77, "short", 0);
 8005108:	2300      	movs	r3, #0
 800510a:	4a44      	ldr	r2, [pc, #272]	; (800521c <CalculatorProcess+0x35c>)
 800510c:	214d      	movs	r1, #77	; 0x4d
 800510e:	2049      	movs	r0, #73	; 0x49
 8005110:	f7fc fb8e 	bl	8001830 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(123, 77, "diag", 0);
 8005114:	2300      	movs	r3, #0
 8005116:	4a42      	ldr	r2, [pc, #264]	; (8005220 <CalculatorProcess+0x360>)
 8005118:	214d      	movs	r1, #77	; 0x4d
 800511a:	207b      	movs	r0, #123	; 0x7b
 800511c:	f7fc fb88 	bl	8001830 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(23, 122, "T4", 0);
 8005120:	2300      	movs	r3, #0
 8005122:	4a40      	ldr	r2, [pc, #256]	; (8005224 <CalculatorProcess+0x364>)
 8005124:	217a      	movs	r1, #122	; 0x7a
 8005126:	2017      	movs	r0, #23
 8005128:	f7fc fb82 	bl	8001830 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(73, 122, "T5", 0);
 800512c:	2300      	movs	r3, #0
 800512e:	4a3e      	ldr	r2, [pc, #248]	; (8005228 <CalculatorProcess+0x368>)
 8005130:	217a      	movs	r1, #122	; 0x7a
 8005132:	2049      	movs	r0, #73	; 0x49
 8005134:	f7fc fb7c 	bl	8001830 <BSP_LCD_DisplayStringAt>
						BSP_LCD_DisplayStringAt(123, 122, "T6", 0);
 8005138:	2300      	movs	r3, #0
 800513a:	4a3c      	ldr	r2, [pc, #240]	; (800522c <CalculatorProcess+0x36c>)
 800513c:	217a      	movs	r1, #122	; 0x7a
 800513e:	207b      	movs	r0, #123	; 0x7b
 8005140:	f7fc fb76 	bl	8001830 <BSP_LCD_DisplayStringAt>
						HAL_Delay(800);
 8005144:	f44f 7048 	mov.w	r0, #800	; 0x320
 8005148:	f001 fa7c 	bl	8006644 <HAL_Delay>
						while (trackSelect() == 1) {
 800514c:	bf00      	nop
 800514e:	f000 f903 	bl	8005358 <trackSelect>
 8005152:	4603      	mov	r3, r0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d0fa      	beq.n	800514e <CalculatorProcess+0x28e>
						}
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005158:	2000      	movs	r0, #0
 800515a:	f7fc fadf 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "1   ", 0);
 800515e:	2300      	movs	r3, #0
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <CalculatorProcess+0x320>)
 8005162:	214d      	movs	r1, #77	; 0x4d
 8005164:	2017      	movs	r0, #23
 8005166:	f7fc fb63 	bl	8001830 <BSP_LCD_DisplayStringAt>

			BSP_LCD_DisplayStringAt(73, 77, "2    ", 0);
 800516a:	2300      	movs	r3, #0
 800516c:	4a30      	ldr	r2, [pc, #192]	; (8005230 <CalculatorProcess+0x370>)
 800516e:	214d      	movs	r1, #77	; 0x4d
 8005170:	2049      	movs	r0, #73	; 0x49
 8005172:	f7fc fb5d 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 122, "5 ", 0);
 8005176:	2300      	movs	r3, #0
 8005178:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <CalculatorProcess+0x374>)
 800517a:	217a      	movs	r1, #122	; 0x7a
 800517c:	2049      	movs	r0, #73	; 0x49
 800517e:	f7fc fb57 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 77, "3   ", 0);
 8005182:	2300      	movs	r3, #0
 8005184:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <CalculatorProcess+0x330>)
 8005186:	214d      	movs	r1, #77	; 0x4d
 8005188:	207b      	movs	r0, #123	; 0x7b
 800518a:	f7fc fb51 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "4 ", 0);
 800518e:	2300      	movs	r3, #0
 8005190:	4a29      	ldr	r2, [pc, #164]	; (8005238 <CalculatorProcess+0x378>)
 8005192:	217a      	movs	r1, #122	; 0x7a
 8005194:	2017      	movs	r0, #23
 8005196:	f7fc fb4b 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 122, "6 ", 0);
 800519a:	2300      	movs	r3, #0
 800519c:	4a27      	ldr	r2, [pc, #156]	; (800523c <CalculatorProcess+0x37c>)
 800519e:	217a      	movs	r1, #122	; 0x7a
 80051a0:	207b      	movs	r0, #123	; 0x7b
 80051a2:	f7fc fb45 	bl	8001830 <BSP_LCD_DisplayStringAt>
			state = state6;
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <CalculatorProcess+0x318>)
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <CalculatorProcess+0x380>)
 80051aa:	601a      	str	r2, [r3, #0]
			return 0;
 80051ac:	e0c4      	b.n	8005338 <CalculatorProcess+0x478>
 80051ae:	bf00      	nop
 80051b0:	20000cf8 	.word	0x20000cf8
 80051b4:	20000cfc 	.word	0x20000cfc
 80051b8:	20000d00 	.word	0x20000d00
 80051bc:	20000db8 	.word	0x20000db8
 80051c0:	0800eaf0 	.word	0x0800eaf0
 80051c4:	0800eaf8 	.word	0x0800eaf8
 80051c8:	0800eb00 	.word	0x0800eb00
 80051cc:	0800eb08 	.word	0x0800eb08
 80051d0:	0800eb10 	.word	0x0800eb10
 80051d4:	0800eb18 	.word	0x0800eb18
 80051d8:	20000098 	.word	0x20000098
 80051dc:	080038ed 	.word	0x080038ed
 80051e0:	0800eb20 	.word	0x0800eb20
 80051e4:	0800eb28 	.word	0x0800eb28
 80051e8:	0800eb30 	.word	0x0800eb30
 80051ec:	0800eb38 	.word	0x0800eb38
 80051f0:	0800eb40 	.word	0x0800eb40
 80051f4:	0800eb48 	.word	0x0800eb48
 80051f8:	0800eaa8 	.word	0x0800eaa8
 80051fc:	0800eaa0 	.word	0x0800eaa0
 8005200:	0800eaa4 	.word	0x0800eaa4
 8005204:	0800eaac 	.word	0x0800eaac
 8005208:	0800eab0 	.word	0x0800eab0
 800520c:	0800eab4 	.word	0x0800eab4
 8005210:	08003a09 	.word	0x08003a09
 8005214:	08003c85 	.word	0x08003c85
 8005218:	0800eb50 	.word	0x0800eb50
 800521c:	0800eb58 	.word	0x0800eb58
 8005220:	0800eb60 	.word	0x0800eb60
 8005224:	0800eb68 	.word	0x0800eb68
 8005228:	0800eb6c 	.word	0x0800eb6c
 800522c:	0800eb70 	.word	0x0800eb70
 8005230:	0800eb74 	.word	0x0800eb74
 8005234:	0800eb7c 	.word	0x0800eb7c
 8005238:	0800eb80 	.word	0x0800eb80
 800523c:	0800eb84 	.word	0x0800eb84
 8005240:	08003f01 	.word	0x08003f01
		} else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 106)
 8005244:	4b3d      	ldr	r3, [pc, #244]	; (800533c <CalculatorProcess+0x47c>)
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	2b33      	cmp	r3, #51	; 0x33
 800524a:	d937      	bls.n	80052bc <CalculatorProcess+0x3fc>
 800524c:	4b3b      	ldr	r3, [pc, #236]	; (800533c <CalculatorProcess+0x47c>)
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	2b65      	cmp	r3, #101	; 0x65
 8005252:	d833      	bhi.n	80052bc <CalculatorProcess+0x3fc>
 8005254:	4b39      	ldr	r3, [pc, #228]	; (800533c <CalculatorProcess+0x47c>)
 8005256:	885b      	ldrh	r3, [r3, #2]
 8005258:	2b69      	cmp	r3, #105	; 0x69
 800525a:	d92f      	bls.n	80052bc <CalculatorProcess+0x3fc>
				&& (display.y <= 149)) {
 800525c:	4b37      	ldr	r3, [pc, #220]	; (800533c <CalculatorProcess+0x47c>)
 800525e:	885b      	ldrh	r3, [r3, #2]
 8005260:	2b95      	cmp	r3, #149	; 0x95
 8005262:	d82b      	bhi.n	80052bc <CalculatorProcess+0x3fc>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005264:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005268:	f7fc fa58 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(73, 122, "5", 0);
 800526c:	2300      	movs	r3, #0
 800526e:	4a34      	ldr	r2, [pc, #208]	; (8005340 <CalculatorProcess+0x480>)
 8005270:	217a      	movs	r1, #122	; 0x7a
 8005272:	2049      	movs	r0, #73	; 0x49
 8005274:	f7fc fadc 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005278:	2000      	movs	r0, #0
 800527a:	f7fc fa4f 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "1", 0);
 800527e:	2300      	movs	r3, #0
 8005280:	4a30      	ldr	r2, [pc, #192]	; (8005344 <CalculatorProcess+0x484>)
 8005282:	214d      	movs	r1, #77	; 0x4d
 8005284:	2017      	movs	r0, #23
 8005286:	f7fc fad3 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "4", 0);
 800528a:	2300      	movs	r3, #0
 800528c:	4a2e      	ldr	r2, [pc, #184]	; (8005348 <CalculatorProcess+0x488>)
 800528e:	217a      	movs	r1, #122	; 0x7a
 8005290:	2017      	movs	r0, #23
 8005292:	f7fc facd 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 77, "2", 0);
 8005296:	2300      	movs	r3, #0
 8005298:	4a2c      	ldr	r2, [pc, #176]	; (800534c <CalculatorProcess+0x48c>)
 800529a:	214d      	movs	r1, #77	; 0x4d
 800529c:	2049      	movs	r0, #73	; 0x49
 800529e:	f7fc fac7 	bl	8001830 <BSP_LCD_DisplayStringAt>

			BSP_LCD_DisplayStringAt(123, 77, "3", 0);
 80052a2:	2300      	movs	r3, #0
 80052a4:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <CalculatorProcess+0x490>)
 80052a6:	214d      	movs	r1, #77	; 0x4d
 80052a8:	207b      	movs	r0, #123	; 0x7b
 80052aa:	f7fc fac1 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 122, "6", 0);
 80052ae:	2300      	movs	r3, #0
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <CalculatorProcess+0x494>)
 80052b2:	217a      	movs	r1, #122	; 0x7a
 80052b4:	207b      	movs	r0, #123	; 0x7b
 80052b6:	f7fc fabb 	bl	8001830 <BSP_LCD_DisplayStringAt>
 80052ba:	e03a      	b.n	8005332 <CalculatorProcess+0x472>
		} else if ((display.x >= 102) && (display.x <= 150)
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <CalculatorProcess+0x47c>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	2b65      	cmp	r3, #101	; 0x65
 80052c2:	d936      	bls.n	8005332 <CalculatorProcess+0x472>
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <CalculatorProcess+0x47c>)
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	2b96      	cmp	r3, #150	; 0x96
 80052ca:	d832      	bhi.n	8005332 <CalculatorProcess+0x472>
				&& (display.y >= 106) && (display.y <= 149)) {
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <CalculatorProcess+0x47c>)
 80052ce:	885b      	ldrh	r3, [r3, #2]
 80052d0:	2b69      	cmp	r3, #105	; 0x69
 80052d2:	d92e      	bls.n	8005332 <CalculatorProcess+0x472>
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <CalculatorProcess+0x47c>)
 80052d6:	885b      	ldrh	r3, [r3, #2]
 80052d8:	2b95      	cmp	r3, #149	; 0x95
 80052da:	d82a      	bhi.n	8005332 <CalculatorProcess+0x472>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80052dc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80052e0:	f7fc fa1c 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(123, 122, "6", 0);
 80052e4:	2300      	movs	r3, #0
 80052e6:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <CalculatorProcess+0x494>)
 80052e8:	217a      	movs	r1, #122	; 0x7a
 80052ea:	207b      	movs	r0, #123	; 0x7b
 80052ec:	f7fc faa0 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80052f0:	2000      	movs	r0, #0
 80052f2:	f7fc fa13 	bl	800171c <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(23, 77, "1", 0);
 80052f6:	2300      	movs	r3, #0
 80052f8:	4a12      	ldr	r2, [pc, #72]	; (8005344 <CalculatorProcess+0x484>)
 80052fa:	214d      	movs	r1, #77	; 0x4d
 80052fc:	2017      	movs	r0, #23
 80052fe:	f7fc fa97 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(23, 122, "4", 0);
 8005302:	2300      	movs	r3, #0
 8005304:	4a10      	ldr	r2, [pc, #64]	; (8005348 <CalculatorProcess+0x488>)
 8005306:	217a      	movs	r1, #122	; 0x7a
 8005308:	2017      	movs	r0, #23
 800530a:	f7fc fa91 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 77, "2", 0);
 800530e:	2300      	movs	r3, #0
 8005310:	4a0e      	ldr	r2, [pc, #56]	; (800534c <CalculatorProcess+0x48c>)
 8005312:	214d      	movs	r1, #77	; 0x4d
 8005314:	2049      	movs	r0, #73	; 0x49
 8005316:	f7fc fa8b 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(73, 122, "5", 0);
 800531a:	2300      	movs	r3, #0
 800531c:	4a08      	ldr	r2, [pc, #32]	; (8005340 <CalculatorProcess+0x480>)
 800531e:	217a      	movs	r1, #122	; 0x7a
 8005320:	2049      	movs	r0, #73	; 0x49
 8005322:	f7fc fa85 	bl	8001830 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(123, 77, "3", 0);
 8005326:	2300      	movs	r3, #0
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <CalculatorProcess+0x490>)
 800532a:	214d      	movs	r1, #77	; 0x4d
 800532c:	207b      	movs	r0, #123	; 0x7b
 800532e:	f7fc fa7f 	bl	8001830 <BSP_LCD_DisplayStringAt>

		}
	}
	HAL_Delay(100);
 8005332:	2064      	movs	r0, #100	; 0x64
 8005334:	f001 f986 	bl	8006644 <HAL_Delay>
}
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000db8 	.word	0x20000db8
 8005340:	0800eaac 	.word	0x0800eaac
 8005344:	0800eaa0 	.word	0x0800eaa0
 8005348:	0800eaa4 	.word	0x0800eaa4
 800534c:	0800eaa8 	.word	0x0800eaa8
 8005350:	0800eab0 	.word	0x0800eab0
 8005354:	0800eab4 	.word	0x0800eab4

08005358 <trackSelect>:

int trackSelect() {
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
	int a = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
	if (BSP_TP_GetDisplayPoint(&display) == 0) {
 8005362:	4869      	ldr	r0, [pc, #420]	; (8005508 <trackSelect+0x1b0>)
 8005364:	f7ff fc42 	bl	8004bec <BSP_TP_GetDisplayPoint>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 80ba 	bne.w	80054e4 <trackSelect+0x18c>
		if ((display.x >= 2) && (display.x <= 51) && (display.y >= 60)
 8005370:	4b65      	ldr	r3, [pc, #404]	; (8005508 <trackSelect+0x1b0>)
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d924      	bls.n	80053c2 <trackSelect+0x6a>
 8005378:	4b63      	ldr	r3, [pc, #396]	; (8005508 <trackSelect+0x1b0>)
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	2b33      	cmp	r3, #51	; 0x33
 800537e:	d820      	bhi.n	80053c2 <trackSelect+0x6a>
 8005380:	4b61      	ldr	r3, [pc, #388]	; (8005508 <trackSelect+0x1b0>)
 8005382:	885b      	ldrh	r3, [r3, #2]
 8005384:	2b3b      	cmp	r3, #59	; 0x3b
 8005386:	d91c      	bls.n	80053c2 <trackSelect+0x6a>
				&& (display.y <= 105)){
 8005388:	4b5f      	ldr	r3, [pc, #380]	; (8005508 <trackSelect+0x1b0>)
 800538a:	885b      	ldrh	r3, [r3, #2]
 800538c:	2b69      	cmp	r3, #105	; 0x69
 800538e:	d818      	bhi.n	80053c2 <trackSelect+0x6a>
			track = TRACKONE;
 8005390:	2350      	movs	r3, #80	; 0x50
 8005392:	b29a      	uxth	r2, r3
 8005394:	4b5d      	ldr	r3, [pc, #372]	; (800550c <trackSelect+0x1b4>)
 8005396:	801a      	strh	r2, [r3, #0]
		trackLight = track*0.45;}
 8005398:	4b5c      	ldr	r3, [pc, #368]	; (800550c <trackSelect+0x1b4>)
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f8c1 	bl	8000524 <__aeabi_i2d>
 80053a2:	a355      	add	r3, pc, #340	; (adr r3, 80054f8 <trackSelect+0x1a0>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f926 	bl	80005f8 <__aeabi_dmul>
 80053ac:	4603      	mov	r3, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	4618      	mov	r0, r3
 80053b2:	4621      	mov	r1, r4
 80053b4:	f7fb fbf8 	bl	8000ba8 <__aeabi_d2uiz>
 80053b8:	4603      	mov	r3, r0
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	4b54      	ldr	r3, [pc, #336]	; (8005510 <trackSelect+0x1b8>)
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e092      	b.n	80054e8 <trackSelect+0x190>
		else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 60)
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <trackSelect+0x1b0>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	2b33      	cmp	r3, #51	; 0x33
 80053c8:	d924      	bls.n	8005414 <trackSelect+0xbc>
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <trackSelect+0x1b0>)
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	2b65      	cmp	r3, #101	; 0x65
 80053d0:	d820      	bhi.n	8005414 <trackSelect+0xbc>
 80053d2:	4b4d      	ldr	r3, [pc, #308]	; (8005508 <trackSelect+0x1b0>)
 80053d4:	885b      	ldrh	r3, [r3, #2]
 80053d6:	2b3b      	cmp	r3, #59	; 0x3b
 80053d8:	d91c      	bls.n	8005414 <trackSelect+0xbc>
				&& (display.y <= 105)){
 80053da:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <trackSelect+0x1b0>)
 80053dc:	885b      	ldrh	r3, [r3, #2]
 80053de:	2b69      	cmp	r3, #105	; 0x69
 80053e0:	d818      	bhi.n	8005414 <trackSelect+0xbc>
			track = TRACKTWO;
 80053e2:	232d      	movs	r3, #45	; 0x2d
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	4b49      	ldr	r3, [pc, #292]	; (800550c <trackSelect+0x1b4>)
 80053e8:	801a      	strh	r2, [r3, #0]
		trackLight = 0.4*track;}
 80053ea:	4b48      	ldr	r3, [pc, #288]	; (800550c <trackSelect+0x1b4>)
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fb f898 	bl	8000524 <__aeabi_i2d>
 80053f4:	a342      	add	r3, pc, #264	; (adr r3, 8005500 <trackSelect+0x1a8>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f7fb f8fd 	bl	80005f8 <__aeabi_dmul>
 80053fe:	4603      	mov	r3, r0
 8005400:	460c      	mov	r4, r1
 8005402:	4618      	mov	r0, r3
 8005404:	4621      	mov	r1, r4
 8005406:	f7fb fbcf 	bl	8000ba8 <__aeabi_d2uiz>
 800540a:	4603      	mov	r3, r0
 800540c:	b29a      	uxth	r2, r3
 800540e:	4b40      	ldr	r3, [pc, #256]	; (8005510 <trackSelect+0x1b8>)
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	e069      	b.n	80054e8 <trackSelect+0x190>
		else if ((display.x >= 102) && (display.x <= 150) && (display.y >= 60)
 8005414:	4b3c      	ldr	r3, [pc, #240]	; (8005508 <trackSelect+0x1b0>)
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	2b65      	cmp	r3, #101	; 0x65
 800541a:	d924      	bls.n	8005466 <trackSelect+0x10e>
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <trackSelect+0x1b0>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2b96      	cmp	r3, #150	; 0x96
 8005422:	d820      	bhi.n	8005466 <trackSelect+0x10e>
 8005424:	4b38      	ldr	r3, [pc, #224]	; (8005508 <trackSelect+0x1b0>)
 8005426:	885b      	ldrh	r3, [r3, #2]
 8005428:	2b3b      	cmp	r3, #59	; 0x3b
 800542a:	d91c      	bls.n	8005466 <trackSelect+0x10e>
				&& (display.y <= 105)){
 800542c:	4b36      	ldr	r3, [pc, #216]	; (8005508 <trackSelect+0x1b0>)
 800542e:	885b      	ldrh	r3, [r3, #2]
 8005430:	2b69      	cmp	r3, #105	; 0x69
 8005432:	d818      	bhi.n	8005466 <trackSelect+0x10e>
			track = TRACKTHREE;
 8005434:	234b      	movs	r3, #75	; 0x4b
 8005436:	b29a      	uxth	r2, r3
 8005438:	4b34      	ldr	r3, [pc, #208]	; (800550c <trackSelect+0x1b4>)
 800543a:	801a      	strh	r2, [r3, #0]
		trackLight = track*0.5;}
 800543c:	4b33      	ldr	r3, [pc, #204]	; (800550c <trackSelect+0x1b4>)
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7fb f86f 	bl	8000524 <__aeabi_i2d>
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	4b32      	ldr	r3, [pc, #200]	; (8005514 <trackSelect+0x1bc>)
 800544c:	f7fb f8d4 	bl	80005f8 <__aeabi_dmul>
 8005450:	4603      	mov	r3, r0
 8005452:	460c      	mov	r4, r1
 8005454:	4618      	mov	r0, r3
 8005456:	4621      	mov	r1, r4
 8005458:	f7fb fba6 	bl	8000ba8 <__aeabi_d2uiz>
 800545c:	4603      	mov	r3, r0
 800545e:	b29a      	uxth	r2, r3
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <trackSelect+0x1b8>)
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e040      	b.n	80054e8 <trackSelect+0x190>
		else if ((display.x >= 2) && (display.x <= 51) && (display.y >= 106)
 8005466:	4b28      	ldr	r3, [pc, #160]	; (8005508 <trackSelect+0x1b0>)
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d910      	bls.n	8005490 <trackSelect+0x138>
 800546e:	4b26      	ldr	r3, [pc, #152]	; (8005508 <trackSelect+0x1b0>)
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	2b33      	cmp	r3, #51	; 0x33
 8005474:	d80c      	bhi.n	8005490 <trackSelect+0x138>
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <trackSelect+0x1b0>)
 8005478:	885b      	ldrh	r3, [r3, #2]
 800547a:	2b69      	cmp	r3, #105	; 0x69
 800547c:	d908      	bls.n	8005490 <trackSelect+0x138>
				&& (display.y <= 149)){
 800547e:	4b22      	ldr	r3, [pc, #136]	; (8005508 <trackSelect+0x1b0>)
 8005480:	885b      	ldrh	r3, [r3, #2]
 8005482:	2b95      	cmp	r3, #149	; 0x95
 8005484:	d804      	bhi.n	8005490 <trackSelect+0x138>
			track = TRACKFOUR;}
 8005486:	231e      	movs	r3, #30
 8005488:	b29a      	uxth	r2, r3
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <trackSelect+0x1b4>)
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e02b      	b.n	80054e8 <trackSelect+0x190>
		else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 106)
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <trackSelect+0x1b0>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	2b33      	cmp	r3, #51	; 0x33
 8005496:	d910      	bls.n	80054ba <trackSelect+0x162>
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <trackSelect+0x1b0>)
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	2b65      	cmp	r3, #101	; 0x65
 800549e:	d80c      	bhi.n	80054ba <trackSelect+0x162>
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <trackSelect+0x1b0>)
 80054a2:	885b      	ldrh	r3, [r3, #2]
 80054a4:	2b69      	cmp	r3, #105	; 0x69
 80054a6:	d908      	bls.n	80054ba <trackSelect+0x162>
				&& (display.y <= 149)){
 80054a8:	4b17      	ldr	r3, [pc, #92]	; (8005508 <trackSelect+0x1b0>)
 80054aa:	885b      	ldrh	r3, [r3, #2]
 80054ac:	2b95      	cmp	r3, #149	; 0x95
 80054ae:	d804      	bhi.n	80054ba <trackSelect+0x162>
			track = TRACKFIVE;}
 80054b0:	231e      	movs	r3, #30
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	4b15      	ldr	r3, [pc, #84]	; (800550c <trackSelect+0x1b4>)
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e016      	b.n	80054e8 <trackSelect+0x190>
		else if ((display.x >= 102) && (display.x <= 150) && (display.y >= 106)
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <trackSelect+0x1b0>)
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	2b65      	cmp	r3, #101	; 0x65
 80054c0:	d912      	bls.n	80054e8 <trackSelect+0x190>
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <trackSelect+0x1b0>)
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	2b96      	cmp	r3, #150	; 0x96
 80054c8:	d80e      	bhi.n	80054e8 <trackSelect+0x190>
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <trackSelect+0x1b0>)
 80054cc:	885b      	ldrh	r3, [r3, #2]
 80054ce:	2b69      	cmp	r3, #105	; 0x69
 80054d0:	d90a      	bls.n	80054e8 <trackSelect+0x190>
				&& (display.y <= 149)){
 80054d2:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <trackSelect+0x1b0>)
 80054d4:	885b      	ldrh	r3, [r3, #2]
 80054d6:	2b95      	cmp	r3, #149	; 0x95
 80054d8:	d806      	bhi.n	80054e8 <trackSelect+0x190>
			track = TRACKSIX;}
 80054da:	231e      	movs	r3, #30
 80054dc:	b29a      	uxth	r2, r3
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <trackSelect+0x1b4>)
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e001      	b.n	80054e8 <trackSelect+0x190>
	} else {
		a = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	607b      	str	r3, [r7, #4]
	}

	return a;
 80054e8:	687b      	ldr	r3, [r7, #4]

}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop
 80054f4:	f3af 8000 	nop.w
 80054f8:	cccccccd 	.word	0xcccccccd
 80054fc:	3fdccccc 	.word	0x3fdccccc
 8005500:	9999999a 	.word	0x9999999a
 8005504:	3fd99999 	.word	0x3fd99999
 8005508:	20000db8 	.word	0x20000db8
 800550c:	2001110c 	.word	0x2001110c
 8005510:	20009098 	.word	0x20009098
 8005514:	3fe00000 	.word	0x3fe00000

08005518 <distSelect>:

int distSelect(){
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	int a = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	607b      	str	r3, [r7, #4]
		if (BSP_TP_GetDisplayPoint(&display) == 0) {
 8005522:	4842      	ldr	r0, [pc, #264]	; (800562c <distSelect+0x114>)
 8005524:	f7ff fb62 	bl	8004bec <BSP_TP_GetDisplayPoint>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d177      	bne.n	800561e <distSelect+0x106>
			if ((display.x >= 2) && (display.x <= 51) && (display.y >= 60)
 800552e:	4b3f      	ldr	r3, [pc, #252]	; (800562c <distSelect+0x114>)
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d90f      	bls.n	8005556 <distSelect+0x3e>
 8005536:	4b3d      	ldr	r3, [pc, #244]	; (800562c <distSelect+0x114>)
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2b33      	cmp	r3, #51	; 0x33
 800553c:	d80b      	bhi.n	8005556 <distSelect+0x3e>
 800553e:	4b3b      	ldr	r3, [pc, #236]	; (800562c <distSelect+0x114>)
 8005540:	885b      	ldrh	r3, [r3, #2]
 8005542:	2b3b      	cmp	r3, #59	; 0x3b
 8005544:	d907      	bls.n	8005556 <distSelect+0x3e>
					&& (display.y <= 105))
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <distSelect+0x114>)
 8005548:	885b      	ldrh	r3, [r3, #2]
 800554a:	2b69      	cmp	r3, #105	; 0x69
 800554c:	d803      	bhi.n	8005556 <distSelect+0x3e>
				stopDist = 20;
 800554e:	4b38      	ldr	r3, [pc, #224]	; (8005630 <distSelect+0x118>)
 8005550:	2214      	movs	r2, #20
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e065      	b.n	8005622 <distSelect+0x10a>
			else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 60)
 8005556:	4b35      	ldr	r3, [pc, #212]	; (800562c <distSelect+0x114>)
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	2b33      	cmp	r3, #51	; 0x33
 800555c:	d90f      	bls.n	800557e <distSelect+0x66>
 800555e:	4b33      	ldr	r3, [pc, #204]	; (800562c <distSelect+0x114>)
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	2b65      	cmp	r3, #101	; 0x65
 8005564:	d80b      	bhi.n	800557e <distSelect+0x66>
 8005566:	4b31      	ldr	r3, [pc, #196]	; (800562c <distSelect+0x114>)
 8005568:	885b      	ldrh	r3, [r3, #2]
 800556a:	2b3b      	cmp	r3, #59	; 0x3b
 800556c:	d907      	bls.n	800557e <distSelect+0x66>
					&& (display.y <= 105))
 800556e:	4b2f      	ldr	r3, [pc, #188]	; (800562c <distSelect+0x114>)
 8005570:	885b      	ldrh	r3, [r3, #2]
 8005572:	2b69      	cmp	r3, #105	; 0x69
 8005574:	d803      	bhi.n	800557e <distSelect+0x66>
				stopDist = 25;
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <distSelect+0x118>)
 8005578:	2219      	movs	r2, #25
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e051      	b.n	8005622 <distSelect+0x10a>
			else if ((display.x >= 102) && (display.x <= 150) && (display.y >= 60)
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <distSelect+0x114>)
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	2b65      	cmp	r3, #101	; 0x65
 8005584:	d90f      	bls.n	80055a6 <distSelect+0x8e>
 8005586:	4b29      	ldr	r3, [pc, #164]	; (800562c <distSelect+0x114>)
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	2b96      	cmp	r3, #150	; 0x96
 800558c:	d80b      	bhi.n	80055a6 <distSelect+0x8e>
 800558e:	4b27      	ldr	r3, [pc, #156]	; (800562c <distSelect+0x114>)
 8005590:	885b      	ldrh	r3, [r3, #2]
 8005592:	2b3b      	cmp	r3, #59	; 0x3b
 8005594:	d907      	bls.n	80055a6 <distSelect+0x8e>
					&& (display.y <= 105))
 8005596:	4b25      	ldr	r3, [pc, #148]	; (800562c <distSelect+0x114>)
 8005598:	885b      	ldrh	r3, [r3, #2]
 800559a:	2b69      	cmp	r3, #105	; 0x69
 800559c:	d803      	bhi.n	80055a6 <distSelect+0x8e>
				stopDist = 30;
 800559e:	4b24      	ldr	r3, [pc, #144]	; (8005630 <distSelect+0x118>)
 80055a0:	221e      	movs	r2, #30
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e03d      	b.n	8005622 <distSelect+0x10a>
			else if ((display.x >= 2) && (display.x <= 51) && (display.y >= 106)
 80055a6:	4b21      	ldr	r3, [pc, #132]	; (800562c <distSelect+0x114>)
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d90f      	bls.n	80055ce <distSelect+0xb6>
 80055ae:	4b1f      	ldr	r3, [pc, #124]	; (800562c <distSelect+0x114>)
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	2b33      	cmp	r3, #51	; 0x33
 80055b4:	d80b      	bhi.n	80055ce <distSelect+0xb6>
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <distSelect+0x114>)
 80055b8:	885b      	ldrh	r3, [r3, #2]
 80055ba:	2b69      	cmp	r3, #105	; 0x69
 80055bc:	d907      	bls.n	80055ce <distSelect+0xb6>
					&& (display.y <= 149))
 80055be:	4b1b      	ldr	r3, [pc, #108]	; (800562c <distSelect+0x114>)
 80055c0:	885b      	ldrh	r3, [r3, #2]
 80055c2:	2b95      	cmp	r3, #149	; 0x95
 80055c4:	d803      	bhi.n	80055ce <distSelect+0xb6>
				stopDist = 40;
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <distSelect+0x118>)
 80055c8:	2228      	movs	r2, #40	; 0x28
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e029      	b.n	8005622 <distSelect+0x10a>
			else if ((display.x >= 52) && (display.x <= 101) && (display.y >= 106)
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <distSelect+0x114>)
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	2b33      	cmp	r3, #51	; 0x33
 80055d4:	d90f      	bls.n	80055f6 <distSelect+0xde>
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <distSelect+0x114>)
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	2b65      	cmp	r3, #101	; 0x65
 80055dc:	d80b      	bhi.n	80055f6 <distSelect+0xde>
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <distSelect+0x114>)
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	2b69      	cmp	r3, #105	; 0x69
 80055e4:	d907      	bls.n	80055f6 <distSelect+0xde>
					&& (display.y <= 149))
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <distSelect+0x114>)
 80055e8:	885b      	ldrh	r3, [r3, #2]
 80055ea:	2b95      	cmp	r3, #149	; 0x95
 80055ec:	d803      	bhi.n	80055f6 <distSelect+0xde>
				stopDist = 50;
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <distSelect+0x118>)
 80055f0:	2232      	movs	r2, #50	; 0x32
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e015      	b.n	8005622 <distSelect+0x10a>
			else if ((display.x >= 102) && (display.x <= 150) && (display.y >= 106)
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <distSelect+0x114>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	2b65      	cmp	r3, #101	; 0x65
 80055fc:	d911      	bls.n	8005622 <distSelect+0x10a>
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <distSelect+0x114>)
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	2b96      	cmp	r3, #150	; 0x96
 8005604:	d80d      	bhi.n	8005622 <distSelect+0x10a>
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <distSelect+0x114>)
 8005608:	885b      	ldrh	r3, [r3, #2]
 800560a:	2b69      	cmp	r3, #105	; 0x69
 800560c:	d909      	bls.n	8005622 <distSelect+0x10a>
					&& (display.y <= 149))
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <distSelect+0x114>)
 8005610:	885b      	ldrh	r3, [r3, #2]
 8005612:	2b95      	cmp	r3, #149	; 0x95
 8005614:	d805      	bhi.n	8005622 <distSelect+0x10a>
				stopDist = 60;
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <distSelect+0x118>)
 8005618:	223c      	movs	r2, #60	; 0x3c
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e001      	b.n	8005622 <distSelect+0x10a>
		} else {
			a = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
		}

		return a;
 8005622:	687b      	ldr	r3, [r7, #4]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000db8 	.word	0x20000db8
 8005630:	20009088 	.word	0x20009088

08005634 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

	char *input=(char*)rx_data;
 800563c:	4b2f      	ldr	r3, [pc, #188]	; (80056fc <HAL_UART_RxCpltCallback+0xc8>)
 800563e:	60fb      	str	r3, [r7, #12]
	light= rx_data[0];
 8005640:	4b2e      	ldr	r3, [pc, #184]	; (80056fc <HAL_UART_RxCpltCallback+0xc8>)
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	4b2e      	ldr	r3, [pc, #184]	; (8005700 <HAL_UART_RxCpltCallback+0xcc>)
 8005646:	701a      	strb	r2, [r3, #0]
	one= rx_data[1];
 8005648:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <HAL_UART_RxCpltCallback+0xc8>)
 800564a:	785a      	ldrb	r2, [r3, #1]
 800564c:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <HAL_UART_RxCpltCallback+0xd0>)
 800564e:	701a      	strb	r2, [r3, #0]
	two= rx_data[2];
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_UART_RxCpltCallback+0xc8>)
 8005652:	789a      	ldrb	r2, [r3, #2]
 8005654:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <HAL_UART_RxCpltCallback+0xd4>)
 8005656:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(&huart3,(uint8_t) Light, 1, HAL_MAX_DELAY);

	if((one == '0') && (two == '3')){
 8005658:	4b2a      	ldr	r3, [pc, #168]	; (8005704 <HAL_UART_RxCpltCallback+0xd0>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b30      	cmp	r3, #48	; 0x30
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
	}else{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
	}

	if( light == 'R' ){
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <HAL_UART_RxCpltCallback+0xcc>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b52      	cmp	r3, #82	; 0x52
 8005666:	d113      	bne.n	8005690 <HAL_UART_RxCpltCallback+0x5c>
		//printf("%s\n",input);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8005668:	2200      	movs	r2, #0
 800566a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800566e:	4827      	ldr	r0, [pc, #156]	; (800570c <HAL_UART_RxCpltCallback+0xd8>)
 8005670:	f002 fa3e 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 8005674:	2200      	movs	r2, #0
 8005676:	2101      	movs	r1, #1
 8005678:	4825      	ldr	r0, [pc, #148]	; (8005710 <HAL_UART_RxCpltCallback+0xdc>)
 800567a:	f002 fa39 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005684:	4823      	ldr	r0, [pc, #140]	; (8005714 <HAL_UART_RxCpltCallback+0xe0>)
 8005686:	f002 fa33 	bl	8007af0 <HAL_GPIO_WritePin>
		trafficStop=1;
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <HAL_UART_RxCpltCallback+0xe4>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]

	}
	if(light == 'G' ){
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_UART_RxCpltCallback+0xcc>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b47      	cmp	r3, #71	; 0x47
 8005698:	d113      	bne.n	80056c2 <HAL_UART_RxCpltCallback+0x8e>
		//printf("%s\n",input);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800569a:	2200      	movs	r2, #0
 800569c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056a0:	481a      	ldr	r0, [pc, #104]	; (800570c <HAL_UART_RxCpltCallback+0xd8>)
 80056a2:	f002 fa25 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 80056a6:	2201      	movs	r2, #1
 80056a8:	2101      	movs	r1, #1
 80056aa:	4819      	ldr	r0, [pc, #100]	; (8005710 <HAL_UART_RxCpltCallback+0xdc>)
 80056ac:	f002 fa20 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056b6:	4817      	ldr	r0, [pc, #92]	; (8005714 <HAL_UART_RxCpltCallback+0xe0>)
 80056b8:	f002 fa1a 	bl	8007af0 <HAL_GPIO_WritePin>
		trafficStop=0;
 80056bc:	4b16      	ldr	r3, [pc, #88]	; (8005718 <HAL_UART_RxCpltCallback+0xe4>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
	}
	if(light == 'A' ){
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <HAL_UART_RxCpltCallback+0xcc>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b41      	cmp	r3, #65	; 0x41
 80056ca:	d113      	bne.n	80056f4 <HAL_UART_RxCpltCallback+0xc0>
		//printf("%s\n",input);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80056cc:	2201      	movs	r2, #1
 80056ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056d2:	480e      	ldr	r0, [pc, #56]	; (800570c <HAL_UART_RxCpltCallback+0xd8>)
 80056d4:	f002 fa0c 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 80056d8:	2200      	movs	r2, #0
 80056da:	2101      	movs	r1, #1
 80056dc:	480c      	ldr	r0, [pc, #48]	; (8005710 <HAL_UART_RxCpltCallback+0xdc>)
 80056de:	f002 fa07 	bl	8007af0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80056e2:	2200      	movs	r2, #0
 80056e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056e8:	480a      	ldr	r0, [pc, #40]	; (8005714 <HAL_UART_RxCpltCallback+0xe0>)
 80056ea:	f002 fa01 	bl	8007af0 <HAL_GPIO_WritePin>
		trafficStop=1;
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <HAL_UART_RxCpltCallback+0xe4>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
	}

}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200090a0 	.word	0x200090a0
 8005700:	2000101e 	.word	0x2000101e
 8005704:	200090a3 	.word	0x200090a3
 8005708:	20000ff4 	.word	0x20000ff4
 800570c:	40020400 	.word	0x40020400
 8005710:	40021000 	.word	0x40021000
 8005714:	40020000 	.word	0x40020000
 8005718:	20001018 	.word	0x20001018
 800571c:	00000000 	.word	0x00000000

08005720 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005724:	b087      	sub	sp, #28
 8005726:	af04      	add	r7, sp, #16
 8005728:	6078      	str	r0, [r7, #4]

	if(ADC_VALUE>7500){
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8005732:	4293      	cmp	r3, r2
 8005734:	d90c      	bls.n	8005750 <HAL_TIM_PeriodElapsedCallback+0x30>
		batCap= (int)(ADC_VALUE*100/8200);
 8005736:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2264      	movs	r2, #100	; 0x64
 800573c:	fb02 f303 	mul.w	r3, r2, r3
 8005740:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	0b5b      	lsrs	r3, r3, #13
 8005748:	461a      	mov	r2, r3
 800574a:	4b29      	ldr	r3, [pc, #164]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e00d      	b.n	800576c <HAL_TIM_PeriodElapsedCallback+0x4c>
	}
	else if(ADC_VALUE>6500){
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f641 1264 	movw	r2, #6500	; 0x1964
 8005758:	4293      	cmp	r3, r2
 800575a:	d904      	bls.n	8005766 <HAL_TIM_PeriodElapsedCallback+0x46>
		batCap=(int)((70/1000)*ADC_VALUE-435);
 800575c:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800575e:	f46f 72d9 	mvn.w	r2, #434	; 0x1b2
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e002      	b.n	800576c <HAL_TIM_PeriodElapsedCallback+0x4c>
	}
	else{
		batCap=20;
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005768:	2214      	movs	r2, #20
 800576a:	601a      	str	r2, [r3, #0]
	}
distTravelled= quarterRevs*4.6;
 800576c:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f7fa fec7 	bl	8000504 <__aeabi_ui2d>
 8005776:	a31a      	add	r3, pc, #104	; (adr r3, 80057e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fa ff3c 	bl	80005f8 <__aeabi_dmul>
 8005780:	4603      	mov	r3, r0
 8005782:	460c      	mov	r4, r1
 8005784:	4618      	mov	r0, r3
 8005786:	4621      	mov	r1, r4
 8005788:	f7fb fa2e 	bl	8000be8 <__aeabi_d2f>
 800578c:	4602      	mov	r2, r0
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005790:	601a      	str	r2, [r3, #0]
	printf("<Bat. Capacity: %4d %% Speed: %5.3f m/s  US Dist: %4d cm Dist. Travelled: %4.1f cm>\n",
 8005792:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005794:	681d      	ldr	r5, [r3, #0]
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fa fed4 	bl	8000548 <__aeabi_f2d>
 80057a0:	4680      	mov	r8, r0
 80057a2:	4689      	mov	r9, r1
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461e      	mov	r6, r3
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa fec9 	bl	8000548 <__aeabi_f2d>
 80057b6:	4603      	mov	r3, r0
 80057b8:	460c      	mov	r4, r1
 80057ba:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057be:	9600      	str	r6, [sp, #0]
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	4629      	mov	r1, r5
 80057c6:	480f      	ldr	r0, [pc, #60]	; (8005804 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80057c8:	f006 feb6 	bl	800c538 <iprintf>
			(int) batCap, speed, distance, distTravelled);
LCD_Print(stateString);
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fa29 	bl	8004c28 <LCD_Print>
//	printf("<Hello>\n");

}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057e0:	66666666 	.word	0x66666666
 80057e4:	40126666 	.word	0x40126666
 80057e8:	20000060 	.word	0x20000060
 80057ec:	ffc00ffd 	.word	0xffc00ffd
 80057f0:	20009090 	.word	0x20009090
 80057f4:	200008a4 	.word	0x200008a4
 80057f8:	20000cf4 	.word	0x20000cf4
 80057fc:	200110a4 	.word	0x200110a4
 8005800:	2000101c 	.word	0x2000101c
 8005804:	0800eb88 	.word	0x0800eb88
 8005808:	20000094 	.word	0x20000094

0800580c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <MX_SPI2_Init+0x64>)
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <MX_SPI2_Init+0x68>)
 8005824:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005826:	4b16      	ldr	r3, [pc, #88]	; (8005880 <MX_SPI2_Init+0x64>)
 8005828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800582c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800582e:	4b14      	ldr	r3, [pc, #80]	; (8005880 <MX_SPI2_Init+0x64>)
 8005830:	2200      	movs	r2, #0
 8005832:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <MX_SPI2_Init+0x64>)
 8005836:	2200      	movs	r2, #0
 8005838:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800583a:	4b11      	ldr	r3, [pc, #68]	; (8005880 <MX_SPI2_Init+0x64>)
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005840:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <MX_SPI2_Init+0x64>)
 8005842:	2200      	movs	r2, #0
 8005844:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005846:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <MX_SPI2_Init+0x64>)
 8005848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <MX_SPI2_Init+0x64>)
 8005850:	2220      	movs	r2, #32
 8005852:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <MX_SPI2_Init+0x64>)
 8005856:	2200      	movs	r2, #0
 8005858:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <MX_SPI2_Init+0x64>)
 800585c:	2200      	movs	r2, #0
 800585e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <MX_SPI2_Init+0x64>)
 8005862:	2200      	movs	r2, #0
 8005864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <MX_SPI2_Init+0x64>)
 8005868:	220a      	movs	r2, #10
 800586a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800586c:	4804      	ldr	r0, [pc, #16]	; (8005880 <MX_SPI2_Init+0x64>)
 800586e:	f003 fd87 	bl	8009380 <HAL_SPI_Init>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005878:	f7ff ffc8 	bl	800580c <Error_Handler>
  }

}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20011114 	.word	0x20011114
 8005884:	40003800 	.word	0x40003800

08005888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <HAL_SPI_MspInit+0x94>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d134      	bne.n	8005914 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <HAL_SPI_MspInit+0x98>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <HAL_SPI_MspInit+0x98>)
 80058b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058b8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ba:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_SPI_MspInit+0x98>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <HAL_SPI_MspInit+0x98>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	4a14      	ldr	r2, [pc, #80]	; (8005920 <HAL_SPI_MspInit+0x98>)
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	6313      	str	r3, [r2, #48]	; 0x30
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <HAL_SPI_MspInit+0x98>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80058e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80058e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e8:	2302      	movs	r3, #2
 80058ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f0:	2303      	movs	r3, #3
 80058f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058f4:	2305      	movs	r3, #5
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	4619      	mov	r1, r3
 80058fe:	4809      	ldr	r0, [pc, #36]	; (8005924 <HAL_SPI_MspInit+0x9c>)
 8005900:	f001 ff44 	bl	800778c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005904:	2200      	movs	r2, #0
 8005906:	2100      	movs	r1, #0
 8005908:	2024      	movs	r0, #36	; 0x24
 800590a:	f001 fb78 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800590e:	2024      	movs	r0, #36	; 0x24
 8005910:	f001 fb91 	bl	8007036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005914:	bf00      	nop
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40003800 	.word	0x40003800
 8005920:	40023800 	.word	0x40023800
 8005924:	40020400 	.word	0x40020400

08005928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <HAL_MspInit+0x4c>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	4a0f      	ldr	r2, [pc, #60]	; (8005974 <HAL_MspInit+0x4c>)
 8005938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800593c:	6453      	str	r3, [r2, #68]	; 0x44
 800593e:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <HAL_MspInit+0x4c>)
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <HAL_MspInit+0x4c>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <HAL_MspInit+0x4c>)
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005958:	6413      	str	r3, [r2, #64]	; 0x40
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_MspInit+0x4c>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40023800 	.word	0x40023800

08005978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800598a:	e7fe      	b.n	800598a <HardFault_Handler+0x4>

0800598c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005990:	e7fe      	b.n	8005990 <MemManage_Handler+0x4>

08005992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005996:	e7fe      	b.n	8005996 <BusFault_Handler+0x4>

08005998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800599c:	e7fe      	b.n	800599c <UsageFault_Handler+0x4>

0800599e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059a2:	bf00      	nop
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059ba:	b480      	push	{r7}
 80059bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059cc:	f000 fe1a 	bl	8006604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059d0:	bf00      	nop
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80059d8:	2001      	movs	r0, #1
 80059da:	f002 f8a3 	bl	8007b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80059e8:	4802      	ldr	r0, [pc, #8]	; (80059f4 <DMA1_Stream5_IRQHandler+0x10>)
 80059ea:	f001 fc67 	bl	80072bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200112ac 	.word	0x200112ac

080059f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80059fc:	2020      	movs	r0, #32
 80059fe:	f002 f891 	bl	8007b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005a0c:	4802      	ldr	r0, [pc, #8]	; (8005a18 <SPI2_IRQHandler+0x10>)
 8005a0e:	f003 fff1 	bl	80099f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20011114 	.word	0x20011114

08005a1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005a20:	4802      	ldr	r0, [pc, #8]	; (8005a2c <TIM5_IRQHandler+0x10>)
 8005a22:	f004 fadb 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200111ac 	.word	0x200111ac

08005a30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a34:	4802      	ldr	r0, [pc, #8]	; (8005a40 <DMA2_Stream0_IRQHandler+0x10>)
 8005a36:	f001 fc41 	bl	80072bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000e90 	.word	0x20000e90

08005a44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005a48:	4802      	ldr	r0, [pc, #8]	; (8005a54 <DMA2_Stream2_IRQHandler+0x10>)
 8005a4a:	f001 fc37 	bl	80072bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000ef0 	.word	0x20000ef0

08005a58 <__io_putchar>:
extern UART_HandleTypeDef huart2; // access huart1 instance
//extern int __io_putchar(int ch) __attribute__((weak)); // comment this out

//__attribute__((weak))
int __io_putchar(int ch)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
    //HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
     HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8005a60:	1d39      	adds	r1, r7, #4
 8005a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a66:	2201      	movs	r2, #1
 8005a68:	4807      	ldr	r0, [pc, #28]	; (8005a88 <__io_putchar+0x30>)
 8005a6a:	f005 f9a4 	bl	800adb6 <HAL_UART_Transmit>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef status = HAL_UART_Transmit_IT(&huart2, (uint8_t *)&ch, 1);
	//HAL_Delay(50);
	return (status == HAL_OK ? ch : 0);
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <__io_putchar+0x24>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	e000      	b.n	8005a7e <__io_putchar+0x26>
 8005a7c:	2300      	movs	r3, #0
     //return (ch);
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2001134c 	.word	0x2001134c

08005a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e00a      	b.n	8005ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a9e:	f3af 8000 	nop.w
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	60ba      	str	r2, [r7, #8]
 8005aaa:	b2ca      	uxtb	r2, r1
 8005aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	dbf0      	blt.n	8005a9e <_read+0x12>
	}

return len;
 8005abc:	687b      	ldr	r3, [r7, #4]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e009      	b.n	8005aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	60ba      	str	r2, [r7, #8]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ffb9 	bl	8005a58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	dbf1      	blt.n	8005ad8 <_write+0x12>
	}
	return len;
 8005af4:	687b      	ldr	r3, [r7, #4]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <_close>:

int _close(int file)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
	return -1;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b26:	605a      	str	r2, [r3, #4]
	return 0;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <_isatty>:

int _isatty(int file)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8005b3e:	2301      	movs	r3, #1
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
	return 0;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b70:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <_sbrk+0x5c>)
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <_sbrk+0x60>)
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <_sbrk+0x64>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b84:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <_sbrk+0x64>)
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <_sbrk+0x68>)
 8005b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <_sbrk+0x64>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d207      	bcs.n	8005ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b98:	f005 ff90 	bl	800babc <__errno>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	e009      	b.n	8005bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <_sbrk+0x64>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bae:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <_sbrk+0x64>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4a05      	ldr	r2, [pc, #20]	; (8005bcc <_sbrk+0x64>)
 8005bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20020000 	.word	0x20020000
 8005bc8:	00000400 	.word	0x00000400
 8005bcc:	20000da0 	.word	0x20000da0
 8005bd0:	20011398 	.word	0x20011398

08005bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <SystemInit+0x28>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	4a07      	ldr	r2, [pc, #28]	; (8005bfc <SystemInit+0x28>)
 8005be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <SystemInit+0x28>)
 8005bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bee:	609a      	str	r2, [r3, #8]
#endif
}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	e000ed00 	.word	0xe000ed00

08005c00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b096      	sub	sp, #88	; 0x58
 8005c04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	605a      	str	r2, [r3, #4]
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	611a      	str	r2, [r3, #16]
 8005c2e:	615a      	str	r2, [r3, #20]
 8005c30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c32:	1d3b      	adds	r3, r7, #4
 8005c34:	2220      	movs	r2, #32
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f005 ff71 	bl	800bb20 <memset>

  htim1.Instance = TIM1;
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c40:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <MX_TIM1_Init+0x140>)
 8005c42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680;
 8005c44:	4b3d      	ldr	r3, [pc, #244]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c46:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8005c4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c4c:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8005c52:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c5a:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c60:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c66:	4b35      	ldr	r3, [pc, #212]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005c6c:	4833      	ldr	r0, [pc, #204]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c6e:	f004 f8cf 	bl	8009e10 <HAL_TIM_Base_Init>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005c78:	f7ff fdc8 	bl	800580c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c86:	4619      	mov	r1, r3
 8005c88:	482c      	ldr	r0, [pc, #176]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c8a:	f004 fb75 	bl	800a378 <HAL_TIM_ConfigClockSource>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005c94:	f7ff fdba 	bl	800580c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c98:	4828      	ldr	r0, [pc, #160]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005c9a:	f004 f92c 	bl	8009ef6 <HAL_TIM_PWM_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005ca4:	f7ff fdb2 	bl	800580c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005cb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4821      	ldr	r0, [pc, #132]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005cb8:	f004 ff4e 	bl	800ab58 <HAL_TIMEx_MasterConfigSynchronization>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8005cc2:	f7ff fda3 	bl	800580c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cc6:	2360      	movs	r3, #96	; 0x60
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4814      	ldr	r0, [pc, #80]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005cec:	f004 fa7e 	bl	800a1ec <HAL_TIM_PWM_ConfigChannel>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005cf6:	f7ff fd89 	bl	800580c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4807      	ldr	r0, [pc, #28]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005d1e:	f004 ff97 	bl	800ac50 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8005d28:	f7ff fd70 	bl	800580c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005d2c:	4803      	ldr	r0, [pc, #12]	; (8005d3c <MX_TIM1_Init+0x13c>)
 8005d2e:	f000 fa37 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005d32:	bf00      	nop
 8005d34:	3758      	adds	r7, #88	; 0x58
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2001122c 	.word	0x2001122c
 8005d40:	40010000 	.word	0x40010000

08005d44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d58:	f107 0320 	add.w	r3, r7, #32
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	60da      	str	r2, [r3, #12]
 8005d6e:	611a      	str	r2, [r3, #16]
 8005d70:	615a      	str	r2, [r3, #20]
 8005d72:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8005d7c:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d7e:	2254      	movs	r2, #84	; 0x54
 8005d80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d82:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d8a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005d8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d90:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d96:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005d9c:	4823      	ldr	r0, [pc, #140]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005d9e:	f004 f837 	bl	8009e10 <HAL_TIM_Base_Init>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005da8:	f7ff fd30 	bl	800580c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db6:	4619      	mov	r1, r3
 8005db8:	481c      	ldr	r0, [pc, #112]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005dba:	f004 fadd 	bl	800a378 <HAL_TIM_ConfigClockSource>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005dc4:	f7ff fd22 	bl	800580c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005dc8:	4818      	ldr	r0, [pc, #96]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005dca:	f004 f894 	bl	8009ef6 <HAL_TIM_PWM_Init>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005dd4:	f7ff fd1a 	bl	800580c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005de0:	f107 0320 	add.w	r3, r7, #32
 8005de4:	4619      	mov	r1, r3
 8005de6:	4811      	ldr	r0, [pc, #68]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005de8:	f004 feb6 	bl	800ab58 <HAL_TIMEx_MasterConfigSynchronization>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005df2:	f7ff fd0b 	bl	800580c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005df6:	2360      	movs	r3, #96	; 0x60
 8005df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	2208      	movs	r2, #8
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4807      	ldr	r0, [pc, #28]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005e0e:	f004 f9ed 	bl	800a1ec <HAL_TIM_PWM_ConfigChannel>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005e18:	f7ff fcf8 	bl	800580c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005e1c:	4803      	ldr	r0, [pc, #12]	; (8005e2c <MX_TIM2_Init+0xe8>)
 8005e1e:	f000 f9bf 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005e22:	bf00      	nop
 8005e24:	3738      	adds	r7, #56	; 0x38
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2001126c 	.word	0x2001126c

08005e30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	; 0x38
 8005e34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e44:	f107 0320 	add.w	r3, r7, #32
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	611a      	str	r2, [r3, #16]
 8005e5c:	615a      	str	r2, [r3, #20]
 8005e5e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005e60:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e62:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <MX_TIM3_Init+0xe8>)
 8005e64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e68:	2254      	movs	r2, #84	; 0x54
 8005e6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6c:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8005e72:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e74:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005e78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e7a:	4b26      	ldr	r3, [pc, #152]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e86:	4823      	ldr	r0, [pc, #140]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005e88:	f003 ffc2 	bl	8009e10 <HAL_TIM_Base_Init>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005e92:	f7ff fcbb 	bl	800580c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	481c      	ldr	r0, [pc, #112]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005ea4:	f004 fa68 	bl	800a378 <HAL_TIM_ConfigClockSource>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005eae:	f7ff fcad 	bl	800580c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005eb2:	4818      	ldr	r0, [pc, #96]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005eb4:	f004 f81f 	bl	8009ef6 <HAL_TIM_PWM_Init>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005ebe:	f7ff fca5 	bl	800580c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005eca:	f107 0320 	add.w	r3, r7, #32
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4810      	ldr	r0, [pc, #64]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005ed2:	f004 fe41 	bl	800ab58 <HAL_TIMEx_MasterConfigSynchronization>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005edc:	f7ff fc96 	bl	800580c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ee0:	2360      	movs	r3, #96	; 0x60
 8005ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ef0:	1d3b      	adds	r3, r7, #4
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4807      	ldr	r0, [pc, #28]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005ef8:	f004 f978 	bl	800a1ec <HAL_TIM_PWM_ConfigChannel>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005f02:	f7ff fc83 	bl	800580c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005f06:	4803      	ldr	r0, [pc, #12]	; (8005f14 <MX_TIM3_Init+0xe4>)
 8005f08:	f000 f94a 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005f0c:	bf00      	nop
 8005f0e:	3738      	adds	r7, #56	; 0x38
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	200111ec 	.word	0x200111ec
 8005f18:	40000400 	.word	0x40000400

08005f1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08e      	sub	sp, #56	; 0x38
 8005f20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f30:	f107 0320 	add.w	r3, r7, #32
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f3a:	1d3b      	adds	r3, r7, #4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	611a      	str	r2, [r3, #16]
 8005f48:	615a      	str	r2, [r3, #20]
 8005f4a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8005f4c:	4b2c      	ldr	r3, [pc, #176]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f4e:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <MX_TIM4_Init+0xe8>)
 8005f50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 66;
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f54:	2242      	movs	r2, #66	; 0x42
 8005f56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f58:	4b29      	ldr	r3, [pc, #164]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8005f5e:	4b28      	ldr	r3, [pc, #160]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f66:	4b26      	ldr	r3, [pc, #152]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f6c:	4b24      	ldr	r3, [pc, #144]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005f72:	4823      	ldr	r0, [pc, #140]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f74:	f003 ff4c 	bl	8009e10 <HAL_TIM_Base_Init>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005f7e:	f7ff fc45 	bl	800580c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	481c      	ldr	r0, [pc, #112]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005f90:	f004 f9f2 	bl	800a378 <HAL_TIM_ConfigClockSource>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005f9a:	f7ff fc37 	bl	800580c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f9e:	4818      	ldr	r0, [pc, #96]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005fa0:	f003 ffa9 	bl	8009ef6 <HAL_TIM_PWM_Init>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005faa:	f7ff fc2f 	bl	800580c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005fb6:	f107 0320 	add.w	r3, r7, #32
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4810      	ldr	r0, [pc, #64]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005fbe:	f004 fdcb 	bl	800ab58 <HAL_TIMEx_MasterConfigSynchronization>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005fc8:	f7ff fc20 	bl	800580c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fcc:	2360      	movs	r3, #96	; 0x60
 8005fce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4807      	ldr	r0, [pc, #28]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005fe4:	f004 f902 	bl	800a1ec <HAL_TIM_PWM_ConfigChannel>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005fee:	f7ff fc0d 	bl	800580c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8005ff2:	4803      	ldr	r0, [pc, #12]	; (8006000 <MX_TIM4_Init+0xe4>)
 8005ff4:	f000 f8d4 	bl	80061a0 <HAL_TIM_MspPostInit>

}
 8005ff8:	bf00      	nop
 8005ffa:	3738      	adds	r7, #56	; 0x38
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	2001116c 	.word	0x2001116c
 8006004:	40000800 	.word	0x40000800

08006008 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	605a      	str	r2, [r3, #4]
 8006018:	609a      	str	r2, [r3, #8]
 800601a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800601c:	463b      	mov	r3, r7
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8006024:	4b1d      	ldr	r3, [pc, #116]	; (800609c <MX_TIM5_Init+0x94>)
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <MX_TIM5_Init+0x98>)
 8006028:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 800602a:	4b1c      	ldr	r3, [pc, #112]	; (800609c <MX_TIM5_Init+0x94>)
 800602c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006030:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006032:	4b1a      	ldr	r3, [pc, #104]	; (800609c <MX_TIM5_Init+0x94>)
 8006034:	2200      	movs	r2, #0
 8006036:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 42000;
 8006038:	4b18      	ldr	r3, [pc, #96]	; (800609c <MX_TIM5_Init+0x94>)
 800603a:	f24a 4210 	movw	r2, #42000	; 0xa410
 800603e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <MX_TIM5_Init+0x94>)
 8006042:	2200      	movs	r2, #0
 8006044:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <MX_TIM5_Init+0x94>)
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800604c:	4813      	ldr	r0, [pc, #76]	; (800609c <MX_TIM5_Init+0x94>)
 800604e:	f003 fedf 	bl	8009e10 <HAL_TIM_Base_Init>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006058:	f7ff fbd8 	bl	800580c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800605c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	4619      	mov	r1, r3
 8006068:	480c      	ldr	r0, [pc, #48]	; (800609c <MX_TIM5_Init+0x94>)
 800606a:	f004 f985 	bl	800a378 <HAL_TIM_ConfigClockSource>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006074:	f7ff fbca 	bl	800580c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800607c:	2300      	movs	r3, #0
 800607e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006080:	463b      	mov	r3, r7
 8006082:	4619      	mov	r1, r3
 8006084:	4805      	ldr	r0, [pc, #20]	; (800609c <MX_TIM5_Init+0x94>)
 8006086:	f004 fd67 	bl	800ab58 <HAL_TIMEx_MasterConfigSynchronization>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006090:	f7ff fbbc 	bl	800580c <Error_Handler>
  }

}
 8006094:	bf00      	nop
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	200111ac 	.word	0x200111ac
 80060a0:	40000c00 	.word	0x40000c00

080060a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a36      	ldr	r2, [pc, #216]	; (800618c <HAL_TIM_Base_MspInit+0xe8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10e      	bne.n	80060d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	4b35      	ldr	r3, [pc, #212]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	4a34      	ldr	r2, [pc, #208]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	6453      	str	r3, [r2, #68]	; 0x44
 80060c6:	4b32      	ldr	r3, [pc, #200]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80060d2:	e056      	b.n	8006182 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	4a2a      	ldr	r2, [pc, #168]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	6413      	str	r3, [r2, #64]	; 0x40
 80060ee:	4b28      	ldr	r3, [pc, #160]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	69bb      	ldr	r3, [r7, #24]
}
 80060fa:	e042      	b.n	8006182 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a24      	ldr	r2, [pc, #144]	; (8006194 <HAL_TIM_Base_MspInit+0xf0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	4b21      	ldr	r3, [pc, #132]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	4a20      	ldr	r2, [pc, #128]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006110:	f043 0302 	orr.w	r3, r3, #2
 8006114:	6413      	str	r3, [r2, #64]	; 0x40
 8006116:	4b1e      	ldr	r3, [pc, #120]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	697b      	ldr	r3, [r7, #20]
}
 8006122:	e02e      	b.n	8006182 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <HAL_TIM_Base_MspInit+0xf4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10e      	bne.n	800614c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006138:	f043 0304 	orr.w	r3, r3, #4
 800613c:	6413      	str	r3, [r2, #64]	; 0x40
 800613e:	4b14      	ldr	r3, [pc, #80]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
}
 800614a:	e01a      	b.n	8006182 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a12      	ldr	r2, [pc, #72]	; (800619c <HAL_TIM_Base_MspInit+0xf8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d115      	bne.n	8006182 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006160:	f043 0308 	orr.w	r3, r3, #8
 8006164:	6413      	str	r3, [r2, #64]	; 0x40
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <HAL_TIM_Base_MspInit+0xec>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	2032      	movs	r0, #50	; 0x32
 8006178:	f000 ff41 	bl	8006ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800617c:	2032      	movs	r0, #50	; 0x32
 800617e:	f000 ff5a 	bl	8007036 <HAL_NVIC_EnableIRQ>
}
 8006182:	bf00      	nop
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40023800 	.word	0x40023800
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00

080061a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	; 0x30
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a8:	f107 031c 	add.w	r3, r7, #28
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a49      	ldr	r2, [pc, #292]	; (80062e4 <HAL_TIM_MspPostInit+0x144>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d11f      	bne.n	8006202 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	4b48      	ldr	r3, [pc, #288]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	4a47      	ldr	r2, [pc, #284]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	6313      	str	r3, [r2, #48]	; 0x30
 80061d2:	4b45      	ldr	r3, [pc, #276]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Servo_PWM_Pin;
 80061de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e4:	2302      	movs	r3, #2
 80061e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ec:	2300      	movs	r3, #0
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_PWM_GPIO_Port, &GPIO_InitStruct);
 80061f4:	f107 031c 	add.w	r3, r7, #28
 80061f8:	4619      	mov	r1, r3
 80061fa:	483c      	ldr	r0, [pc, #240]	; (80062ec <HAL_TIM_MspPostInit+0x14c>)
 80061fc:	f001 fac6 	bl	800778c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006200:	e06c      	b.n	80062dc <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM2)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d11f      	bne.n	800624c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	4b35      	ldr	r3, [pc, #212]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	4a34      	ldr	r2, [pc, #208]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 8006216:	f043 0302 	orr.w	r3, r3, #2
 800621a:	6313      	str	r3, [r2, #48]	; 0x30
 800621c:	4b32      	ldr	r3, [pc, #200]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622e:	2302      	movs	r3, #2
 8006230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006236:	2300      	movs	r3, #0
 8006238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800623a:	2301      	movs	r3, #1
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800623e:	f107 031c 	add.w	r3, r7, #28
 8006242:	4619      	mov	r1, r3
 8006244:	482a      	ldr	r0, [pc, #168]	; (80062f0 <HAL_TIM_MspPostInit+0x150>)
 8006246:	f001 faa1 	bl	800778c <HAL_GPIO_Init>
}
 800624a:	e047      	b.n	80062dc <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a28      	ldr	r2, [pc, #160]	; (80062f4 <HAL_TIM_MspPostInit+0x154>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d11e      	bne.n	8006294 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	4a22      	ldr	r2, [pc, #136]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	6313      	str	r3, [r2, #48]	; 0x30
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Forward_PWM_Pin;
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006276:	2302      	movs	r3, #2
 8006278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627e:	2300      	movs	r3, #0
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006282:	2302      	movs	r3, #2
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Forward_PWM_GPIO_Port, &GPIO_InitStruct);
 8006286:	f107 031c 	add.w	r3, r7, #28
 800628a:	4619      	mov	r1, r3
 800628c:	4817      	ldr	r0, [pc, #92]	; (80062ec <HAL_TIM_MspPostInit+0x14c>)
 800628e:	f001 fa7d 	bl	800778c <HAL_GPIO_Init>
}
 8006292:	e023      	b.n	80062dc <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <HAL_TIM_MspPostInit+0x158>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d11e      	bne.n	80062dc <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 80062a8:	f043 0308 	orr.w	r3, r3, #8
 80062ac:	6313      	str	r3, [r2, #48]	; 0x30
 80062ae:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <HAL_TIM_MspPostInit+0x148>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Headlight_PWM_Pin;
 80062ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c0:	2302      	movs	r3, #2
 80062c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062c8:	2300      	movs	r3, #0
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062cc:	2302      	movs	r3, #2
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Headlight_PWM_GPIO_Port, &GPIO_InitStruct);
 80062d0:	f107 031c 	add.w	r3, r7, #28
 80062d4:	4619      	mov	r1, r3
 80062d6:	4809      	ldr	r0, [pc, #36]	; (80062fc <HAL_TIM_MspPostInit+0x15c>)
 80062d8:	f001 fa58 	bl	800778c <HAL_GPIO_Init>
}
 80062dc:	bf00      	nop
 80062de:	3730      	adds	r7, #48	; 0x30
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40020000 	.word	0x40020000
 80062f0:	40020400 	.word	0x40020400
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40020c00 	.word	0x40020c00

08006300 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <MX_USART2_UART_Init+0x4c>)
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <MX_USART2_UART_Init+0x50>)
 8006308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <MX_USART2_UART_Init+0x4c>)
 800630c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <MX_USART2_UART_Init+0x4c>)
 8006314:	2200      	movs	r2, #0
 8006316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <MX_USART2_UART_Init+0x4c>)
 800631a:	2200      	movs	r2, #0
 800631c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <MX_USART2_UART_Init+0x4c>)
 8006320:	2200      	movs	r2, #0
 8006322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <MX_USART2_UART_Init+0x4c>)
 8006326:	220c      	movs	r2, #12
 8006328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <MX_USART2_UART_Init+0x4c>)
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <MX_USART2_UART_Init+0x4c>)
 8006332:	2200      	movs	r2, #0
 8006334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006336:	4805      	ldr	r0, [pc, #20]	; (800634c <MX_USART2_UART_Init+0x4c>)
 8006338:	f004 fcf0 	bl	800ad1c <HAL_UART_Init>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006342:	f7ff fa63 	bl	800580c <Error_Handler>
  }

}
 8006346:	bf00      	nop
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	2001134c 	.word	0x2001134c
 8006350:	40004400 	.word	0x40004400

08006354 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006358:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <MX_USART3_UART_Init+0x50>)
 800635c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 8006360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 8006368:	2200      	movs	r2, #0
 800636a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800636c:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 800636e:	2200      	movs	r2, #0
 8006370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 8006374:	2200      	movs	r2, #0
 8006376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 800637a:	220c      	movs	r2, #12
 800637c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 8006380:	2200      	movs	r2, #0
 8006382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 8006386:	2200      	movs	r2, #0
 8006388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800638a:	4805      	ldr	r0, [pc, #20]	; (80063a0 <MX_USART3_UART_Init+0x4c>)
 800638c:	f004 fcc6 	bl	800ad1c <HAL_UART_Init>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006396:	f7ff fa39 	bl	800580c <Error_Handler>
  }

}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	2001130c 	.word	0x2001130c
 80063a4:	40004800 	.word	0x40004800

080063a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08c      	sub	sp, #48	; 0x30
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b0:	f107 031c 	add.w	r3, r7, #28
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a4a      	ldr	r2, [pc, #296]	; (80064f0 <HAL_UART_MspInit+0x148>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d15b      	bne.n	8006482 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	4b49      	ldr	r3, [pc, #292]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	4a48      	ldr	r2, [pc, #288]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80063d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d8:	6413      	str	r3, [r2, #64]	; 0x40
 80063da:	4b46      	ldr	r3, [pc, #280]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a41      	ldr	r2, [pc, #260]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	6313      	str	r3, [r2, #48]	; 0x30
 80063f6:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006402:	230c      	movs	r3, #12
 8006404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006406:	2302      	movs	r3, #2
 8006408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640a:	2300      	movs	r3, #0
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800640e:	2303      	movs	r3, #3
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006412:	2307      	movs	r3, #7
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006416:	f107 031c 	add.w	r3, r7, #28
 800641a:	4619      	mov	r1, r3
 800641c:	4836      	ldr	r0, [pc, #216]	; (80064f8 <HAL_UART_MspInit+0x150>)
 800641e:	f001 f9b5 	bl	800778c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006422:	4b36      	ldr	r3, [pc, #216]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006424:	4a36      	ldr	r2, [pc, #216]	; (8006500 <HAL_UART_MspInit+0x158>)
 8006426:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006428:	4b34      	ldr	r3, [pc, #208]	; (80064fc <HAL_UART_MspInit+0x154>)
 800642a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800642e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006430:	4b32      	ldr	r3, [pc, #200]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006432:	2200      	movs	r2, #0
 8006434:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006436:	4b31      	ldr	r3, [pc, #196]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006438:	2200      	movs	r2, #0
 800643a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800643c:	4b2f      	ldr	r3, [pc, #188]	; (80064fc <HAL_UART_MspInit+0x154>)
 800643e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006442:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006444:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006446:	2200      	movs	r2, #0
 8006448:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800644a:	4b2c      	ldr	r3, [pc, #176]	; (80064fc <HAL_UART_MspInit+0x154>)
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006450:	4b2a      	ldr	r3, [pc, #168]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006456:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006458:	4b28      	ldr	r3, [pc, #160]	; (80064fc <HAL_UART_MspInit+0x154>)
 800645a:	2200      	movs	r2, #0
 800645c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800645e:	4b27      	ldr	r3, [pc, #156]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006460:	2200      	movs	r2, #0
 8006462:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006464:	4825      	ldr	r0, [pc, #148]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006466:	f000 fe01 	bl	800706c <HAL_DMA_Init>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006470:	f7ff f9cc 	bl	800580c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a21      	ldr	r2, [pc, #132]	; (80064fc <HAL_UART_MspInit+0x154>)
 8006478:	635a      	str	r2, [r3, #52]	; 0x34
 800647a:	4a20      	ldr	r2, [pc, #128]	; (80064fc <HAL_UART_MspInit+0x154>)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006480:	e031      	b.n	80064e6 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART3)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <HAL_UART_MspInit+0x15c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d12c      	bne.n	80064e6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 8006496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649a:	6413      	str	r3, [r2, #64]	; 0x40
 800649c:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80064b2:	f043 0304 	orr.w	r3, r3, #4
 80064b6:	6313      	str	r3, [r2, #48]	; 0x30
 80064b8:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <HAL_UART_MspInit+0x14c>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80064c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80064c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ca:	2302      	movs	r3, #2
 80064cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d2:	2303      	movs	r3, #3
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80064d6:	2307      	movs	r3, #7
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064da:	f107 031c 	add.w	r3, r7, #28
 80064de:	4619      	mov	r1, r3
 80064e0:	4809      	ldr	r0, [pc, #36]	; (8006508 <HAL_UART_MspInit+0x160>)
 80064e2:	f001 f953 	bl	800778c <HAL_GPIO_Init>
}
 80064e6:	bf00      	nop
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40004400 	.word	0x40004400
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40020000 	.word	0x40020000
 80064fc:	200112ac 	.word	0x200112ac
 8006500:	40026088 	.word	0x40026088
 8006504:	40004800 	.word	0x40004800
 8006508:	40020800 	.word	0x40020800

0800650c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800650c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006544 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006512:	e003      	b.n	800651c <LoopCopyDataInit>

08006514 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006516:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006518:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800651a:	3104      	adds	r1, #4

0800651c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800651c:	480b      	ldr	r0, [pc, #44]	; (800654c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006520:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006522:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006524:	d3f6      	bcc.n	8006514 <CopyDataInit>
  ldr  r2, =_sbss
 8006526:	4a0b      	ldr	r2, [pc, #44]	; (8006554 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006528:	e002      	b.n	8006530 <LoopFillZerobss>

0800652a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800652a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800652c:	f842 3b04 	str.w	r3, [r2], #4

08006530 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006532:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006534:	d3f9      	bcc.n	800652a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006536:	f7ff fb4d 	bl	8005bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800653a:	f005 fac5 	bl	800bac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800653e:	f7fd f8dd 	bl	80036fc <main>
  bx  lr    
 8006542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006544:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006548:	08011a18 	.word	0x08011a18
  ldr  r0, =_sdata
 800654c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006550:	2000027c 	.word	0x2000027c
  ldr  r2, =_sbss
 8006554:	20000280 	.word	0x20000280
  ldr  r3, = _ebss
 8006558:	20011394 	.word	0x20011394

0800655c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800655c:	e7fe      	b.n	800655c <ADC_IRQHandler>
	...

08006560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <HAL_Init+0x40>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <HAL_Init+0x40>)
 800656a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800656e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_Init+0x40>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <HAL_Init+0x40>)
 8006576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800657a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800657c:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_Init+0x40>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <HAL_Init+0x40>)
 8006582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006588:	2003      	movs	r0, #3
 800658a:	f000 fd2d 	bl	8006fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800658e:	2000      	movs	r0, #0
 8006590:	f000 f808 	bl	80065a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006594:	f7ff f9c8 	bl	8005928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40023c00 	.word	0x40023c00

080065a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <HAL_InitTick+0x54>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <HAL_InitTick+0x58>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	4619      	mov	r1, r3
 80065b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fd45 	bl	8007052 <HAL_SYSTICK_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e00e      	b.n	80065f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b0f      	cmp	r3, #15
 80065d6:	d80a      	bhi.n	80065ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065d8:	2200      	movs	r2, #0
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	f000 fd0d 	bl	8006ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065e4:	4a06      	ldr	r2, [pc, #24]	; (8006600 <HAL_InitTick+0x5c>)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	2000009c 	.word	0x2000009c
 80065fc:	200000a4 	.word	0x200000a4
 8006600:	200000a0 	.word	0x200000a0

08006604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_IncTick+0x20>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_IncTick+0x24>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4413      	add	r3, r2
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <HAL_IncTick+0x24>)
 8006616:	6013      	str	r3, [r2, #0]
}
 8006618:	bf00      	nop
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	200000a4 	.word	0x200000a4
 8006628:	2001138c 	.word	0x2001138c

0800662c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return uwTick;
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <HAL_GetTick+0x14>)
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	2001138c 	.word	0x2001138c

08006644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800664c:	f7ff ffee 	bl	800662c <HAL_GetTick>
 8006650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d005      	beq.n	800666a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_Delay+0x40>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800666a:	bf00      	nop
 800666c:	f7ff ffde 	bl	800662c <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	429a      	cmp	r2, r3
 800667a:	d8f7      	bhi.n	800666c <HAL_Delay+0x28>
  {
  }
}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	200000a4 	.word	0x200000a4

08006688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e033      	b.n	8006706 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc f8b2 	bl	8002810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d118      	bne.n	80066f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066ce:	f023 0302 	bic.w	r3, r3, #2
 80066d2:	f043 0202 	orr.w	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa36 	bl	8006b4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	f043 0201 	orr.w	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
 80066f6:	e001      	b.n	80066fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_ADC_Start_DMA+0x1e>
 800672a:	2302      	movs	r3, #2
 800672c:	e0cc      	b.n	80068c8 <HAL_ADC_Start_DMA+0x1b8>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d018      	beq.n	8006776 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006754:	4b5e      	ldr	r3, [pc, #376]	; (80068d0 <HAL_ADC_Start_DMA+0x1c0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5e      	ldr	r2, [pc, #376]	; (80068d4 <HAL_ADC_Start_DMA+0x1c4>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	0c9a      	lsrs	r2, r3, #18
 8006760:	4613      	mov	r3, r2
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4413      	add	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006768:	e002      	b.n	8006770 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3b01      	subs	r3, #1
 800676e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f9      	bne.n	800676a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	f040 80a0 	bne.w	80068c6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c4:	d106      	bne.n	80067d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	f023 0206 	bic.w	r2, r3, #6
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	645a      	str	r2, [r3, #68]	; 0x44
 80067d2:	e002      	b.n	80067da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067e2:	4b3d      	ldr	r3, [pc, #244]	; (80068d8 <HAL_ADC_Start_DMA+0x1c8>)
 80067e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	4a3c      	ldr	r2, [pc, #240]	; (80068dc <HAL_ADC_Start_DMA+0x1cc>)
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	4a3b      	ldr	r2, [pc, #236]	; (80068e0 <HAL_ADC_Start_DMA+0x1d0>)
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	4a3a      	ldr	r2, [pc, #232]	; (80068e4 <HAL_ADC_Start_DMA+0x1d4>)
 80067fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006816:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006826:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	334c      	adds	r3, #76	; 0x4c
 8006832:	4619      	mov	r1, r3
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f000 fcc6 	bl	80071c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2b00      	cmp	r3, #0
 8006846:	d12a      	bne.n	800689e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <HAL_ADC_Start_DMA+0x1d8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d015      	beq.n	800687e <HAL_ADC_Start_DMA+0x16e>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a25      	ldr	r2, [pc, #148]	; (80068ec <HAL_ADC_Start_DMA+0x1dc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d105      	bne.n	8006868 <HAL_ADC_Start_DMA+0x158>
 800685c:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <HAL_ADC_Start_DMA+0x1c8>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <HAL_ADC_Start_DMA+0x1e0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d129      	bne.n	80068c6 <HAL_ADC_Start_DMA+0x1b6>
 8006872:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <HAL_ADC_Start_DMA+0x1c8>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d823      	bhi.n	80068c6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d11c      	bne.n	80068c6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	e013      	b.n	80068c6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <HAL_ADC_Start_DMA+0x1d8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d10e      	bne.n	80068c6 <HAL_ADC_Start_DMA+0x1b6>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d107      	bne.n	80068c6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068c4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	2000009c 	.word	0x2000009c
 80068d4:	431bde83 	.word	0x431bde83
 80068d8:	40012300 	.word	0x40012300
 80068dc:	08006d45 	.word	0x08006d45
 80068e0:	08006dff 	.word	0x08006dff
 80068e4:	08006e1b 	.word	0x08006e1b
 80068e8:	40012000 	.word	0x40012000
 80068ec:	40012100 	.word	0x40012100
 80068f0:	40012200 	.word	0x40012200

080068f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x1c>
 8006920:	2302      	movs	r3, #2
 8006922:	e105      	b.n	8006b30 <HAL_ADC_ConfigChannel+0x228>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b09      	cmp	r3, #9
 8006932:	d925      	bls.n	8006980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68d9      	ldr	r1, [r3, #12]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	4613      	mov	r3, r2
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	4413      	add	r3, r2
 8006948:	3b1e      	subs	r3, #30
 800694a:	2207      	movs	r2, #7
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	43da      	mvns	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	400a      	ands	r2, r1
 8006958:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68d9      	ldr	r1, [r3, #12]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	4618      	mov	r0, r3
 800696c:	4603      	mov	r3, r0
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4403      	add	r3, r0
 8006972:	3b1e      	subs	r3, #30
 8006974:	409a      	lsls	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	e022      	b.n	80069c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6919      	ldr	r1, [r3, #16]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	4613      	mov	r3, r2
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4413      	add	r3, r2
 8006994:	2207      	movs	r2, #7
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43da      	mvns	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	400a      	ands	r2, r1
 80069a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6919      	ldr	r1, [r3, #16]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4618      	mov	r0, r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4403      	add	r3, r0
 80069bc:	409a      	lsls	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b06      	cmp	r3, #6
 80069cc:	d824      	bhi.n	8006a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	3b05      	subs	r3, #5
 80069e0:	221f      	movs	r2, #31
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43da      	mvns	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	400a      	ands	r2, r1
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4618      	mov	r0, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	3b05      	subs	r3, #5
 8006a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	635a      	str	r2, [r3, #52]	; 0x34
 8006a16:	e04c      	b.n	8006ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d824      	bhi.n	8006a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	3b23      	subs	r3, #35	; 0x23
 8006a32:	221f      	movs	r2, #31
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	43da      	mvns	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	400a      	ands	r2, r1
 8006a40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4618      	mov	r0, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	3b23      	subs	r3, #35	; 0x23
 8006a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
 8006a68:	e023      	b.n	8006ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	3b41      	subs	r3, #65	; 0x41
 8006a7c:	221f      	movs	r2, #31
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43da      	mvns	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	400a      	ands	r2, r1
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4618      	mov	r0, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3b41      	subs	r3, #65	; 0x41
 8006aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ab2:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <HAL_ADC_ConfigChannel+0x234>)
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a21      	ldr	r2, [pc, #132]	; (8006b40 <HAL_ADC_ConfigChannel+0x238>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d109      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x1cc>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b12      	cmp	r3, #18
 8006ac6:	d105      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <HAL_ADC_ConfigChannel+0x238>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d123      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x21e>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d003      	beq.n	8006aee <HAL_ADC_ConfigChannel+0x1e6>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b11      	cmp	r3, #17
 8006aec:	d11b      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d111      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b02:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <HAL_ADC_ConfigChannel+0x23c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <HAL_ADC_ConfigChannel+0x240>)
 8006b08:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0c:	0c9a      	lsrs	r2, r3, #18
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b18:	e002      	b.n	8006b20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f9      	bne.n	8006b1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012300 	.word	0x40012300
 8006b40:	40012000 	.word	0x40012000
 8006b44:	2000009c 	.word	0x2000009c
 8006b48:	431bde83 	.word	0x431bde83

08006b4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b54:	4b79      	ldr	r3, [pc, #484]	; (8006d3c <ADC_Init+0x1f0>)
 8006b56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6859      	ldr	r1, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	021a      	lsls	r2, r3, #8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6859      	ldr	r1, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	4a58      	ldr	r2, [pc, #352]	; (8006d40 <ADC_Init+0x1f4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d022      	beq.n	8006c2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6899      	ldr	r1, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]
 8006c28:	e00f      	b.n	8006c4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0202 	bic.w	r2, r2, #2
 8006c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6899      	ldr	r1, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7e1b      	ldrb	r3, [r3, #24]
 8006c64:	005a      	lsls	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01b      	beq.n	8006cb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6859      	ldr	r1, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	035a      	lsls	r2, r3, #13
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	e007      	b.n	8006cc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	051a      	lsls	r2, r3, #20
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d02:	025a      	lsls	r2, r3, #9
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6899      	ldr	r1, [r3, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	029a      	lsls	r2, r3, #10
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	609a      	str	r2, [r3, #8]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40012300 	.word	0x40012300
 8006d40:	0f000001 	.word	0x0f000001

08006d44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d13c      	bne.n	8006dd8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d12b      	bne.n	8006dd0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d127      	bne.n	8006dd0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d119      	bne.n	8006dd0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0220 	bic.w	r2, r2, #32
 8006daa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d105      	bne.n	8006dd0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	f043 0201 	orr.w	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7fd fecb 	bl	8004b6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dd6:	e00e      	b.n	8006df6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fd85 	bl	80068f4 <HAL_ADC_ErrorCallback>
}
 8006dea:	e004      	b.n	8006df6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7fd fea2 	bl	8004b56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e32:	f043 0204 	orr.w	r2, r3, #4
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fd5a 	bl	80068f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <__NVIC_SetPriorityGrouping+0x44>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e64:	4013      	ands	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e7a:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <__NVIC_SetPriorityGrouping+0x44>)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	60d3      	str	r3, [r2, #12]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e94:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	f003 0307 	and.w	r3, r3, #7
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	e000ed00 	.word	0xe000ed00

08006eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	db0b      	blt.n	8006ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	f003 021f 	and.w	r2, r3, #31
 8006ec4:	4907      	ldr	r1, [pc, #28]	; (8006ee4 <__NVIC_EnableIRQ+0x38>)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	2001      	movs	r0, #1
 8006ece:	fa00 f202 	lsl.w	r2, r0, r2
 8006ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	e000e100 	.word	0xe000e100

08006ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db0a      	blt.n	8006f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	490c      	ldr	r1, [pc, #48]	; (8006f34 <__NVIC_SetPriority+0x4c>)
 8006f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f06:	0112      	lsls	r2, r2, #4
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f10:	e00a      	b.n	8006f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	4908      	ldr	r1, [pc, #32]	; (8006f38 <__NVIC_SetPriority+0x50>)
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	3b04      	subs	r3, #4
 8006f20:	0112      	lsls	r2, r2, #4
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	440b      	add	r3, r1
 8006f26:	761a      	strb	r2, [r3, #24]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	e000e100 	.word	0xe000e100
 8006f38:	e000ed00 	.word	0xe000ed00

08006f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	; 0x24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f1c3 0307 	rsb	r3, r3, #7
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	bf28      	it	cs
 8006f5a:	2304      	movcs	r3, #4
 8006f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	3304      	adds	r3, #4
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d902      	bls.n	8006f6c <NVIC_EncodePriority+0x30>
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3b03      	subs	r3, #3
 8006f6a:	e000      	b.n	8006f6e <NVIC_EncodePriority+0x32>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43da      	mvns	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	401a      	ands	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f84:	f04f 31ff 	mov.w	r1, #4294967295
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	43d9      	mvns	r1, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f94:	4313      	orrs	r3, r2
         );
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fb4:	d301      	bcc.n	8006fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e00f      	b.n	8006fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fba:	4a0a      	ldr	r2, [pc, #40]	; (8006fe4 <SysTick_Config+0x40>)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fc2:	210f      	movs	r1, #15
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	f7ff ff8e 	bl	8006ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <SysTick_Config+0x40>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fd2:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <SysTick_Config+0x40>)
 8006fd4:	2207      	movs	r2, #7
 8006fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	e000e010 	.word	0xe000e010

08006fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff ff29 	bl	8006e48 <__NVIC_SetPriorityGrouping>
}
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af00      	add	r7, sp, #0
 8007004:	4603      	mov	r3, r0
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007010:	f7ff ff3e 	bl	8006e90 <__NVIC_GetPriorityGrouping>
 8007014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	6978      	ldr	r0, [r7, #20]
 800701c:	f7ff ff8e 	bl	8006f3c <NVIC_EncodePriority>
 8007020:	4602      	mov	r2, r0
 8007022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff5d 	bl	8006ee8 <__NVIC_SetPriority>
}
 800702e:	bf00      	nop
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	4603      	mov	r3, r0
 800703e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff ff31 	bl	8006eac <__NVIC_EnableIRQ>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff ffa2 	bl	8006fa4 <SysTick_Config>
 8007060:	4603      	mov	r3, r0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007078:	f7ff fad8 	bl	800662c <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e099      	b.n	80071bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070a8:	e00f      	b.n	80070ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070aa:	f7ff fabf 	bl	800662c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	d908      	bls.n	80070ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2203      	movs	r2, #3
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e078      	b.n	80071bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e8      	bne.n	80070aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <HAL_DMA_Init+0x158>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800710e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b04      	cmp	r3, #4
 8007122:	d107      	bne.n	8007134 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	4313      	orrs	r3, r2
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2b04      	cmp	r3, #4
 800715c:	d117      	bne.n	800718e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00e      	beq.n	800718e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa91 	bl	8007698 <DMA_CheckFifoParam>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2240      	movs	r2, #64	; 0x40
 8007180:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800718a:	2301      	movs	r3, #1
 800718c:	e016      	b.n	80071bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa48 	bl	800762c <DMA_CalcBaseAndBitshift>
 800719c:	4603      	mov	r3, r0
 800719e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a4:	223f      	movs	r2, #63	; 0x3f
 80071a6:	409a      	lsls	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	f010803f 	.word	0xf010803f

080071c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_DMA_Start_IT+0x26>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e040      	b.n	8007270 <HAL_DMA_Start_IT+0xa8>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d12f      	bne.n	8007262 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f9da 	bl	80075d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	223f      	movs	r2, #63	; 0x3f
 8007222:	409a      	lsls	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0216 	orr.w	r2, r2, #22
 8007236:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0208 	orr.w	r2, r2, #8
 800724e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0201 	orr.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e005      	b.n	800726e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800726a:	2302      	movs	r3, #2
 800726c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d004      	beq.n	8007296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2280      	movs	r2, #128	; 0x80
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e00c      	b.n	80072b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2205      	movs	r2, #5
 800729a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072c8:	4b92      	ldr	r3, [pc, #584]	; (8007514 <HAL_DMA_IRQHandler+0x258>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a92      	ldr	r2, [pc, #584]	; (8007518 <HAL_DMA_IRQHandler+0x25c>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	0a9b      	lsrs	r3, r3, #10
 80072d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e6:	2208      	movs	r2, #8
 80072e8:	409a      	lsls	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4013      	ands	r3, r2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01a      	beq.n	8007328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d013      	beq.n	8007328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0204 	bic.w	r2, r2, #4
 800730e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007314:	2208      	movs	r2, #8
 8007316:	409a      	lsls	r2, r3
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	f043 0201 	orr.w	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732c:	2201      	movs	r2, #1
 800732e:	409a      	lsls	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d012      	beq.n	800735e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	2201      	movs	r2, #1
 800734c:	409a      	lsls	r2, r3
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f043 0202 	orr.w	r2, r3, #2
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	2204      	movs	r2, #4
 8007364:	409a      	lsls	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d012      	beq.n	8007394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00b      	beq.n	8007394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007380:	2204      	movs	r2, #4
 8007382:	409a      	lsls	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738c:	f043 0204 	orr.w	r2, r3, #4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007398:	2210      	movs	r2, #16
 800739a:	409a      	lsls	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4013      	ands	r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d043      	beq.n	800742c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d03c      	beq.n	800742c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b6:	2210      	movs	r2, #16
 80073b8:	409a      	lsls	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d018      	beq.n	80073fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d024      	beq.n	800742c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
 80073ea:	e01f      	b.n	800742c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	e016      	b.n	800742c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007408:	2b00      	cmp	r3, #0
 800740a:	d107      	bne.n	800741c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0208 	bic.w	r2, r2, #8
 800741a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007430:	2220      	movs	r2, #32
 8007432:	409a      	lsls	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4013      	ands	r3, r2
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 808e 	beq.w	800755a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8086 	beq.w	800755a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007452:	2220      	movs	r2, #32
 8007454:	409a      	lsls	r2, r3
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b05      	cmp	r3, #5
 8007464:	d136      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0216 	bic.w	r2, r2, #22
 8007474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695a      	ldr	r2, [r3, #20]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <HAL_DMA_IRQHandler+0x1da>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0208 	bic.w	r2, r2, #8
 80074a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074aa:	223f      	movs	r2, #63	; 0x3f
 80074ac:	409a      	lsls	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d07d      	beq.n	80075c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
        }
        return;
 80074d2:	e078      	b.n	80075c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d01c      	beq.n	800751c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d108      	bne.n	8007502 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d030      	beq.n	800755a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	4798      	blx	r3
 8007500:	e02b      	b.n	800755a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d027      	beq.n	800755a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
 8007512:	e022      	b.n	800755a <HAL_DMA_IRQHandler+0x29e>
 8007514:	2000009c 	.word	0x2000009c
 8007518:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10f      	bne.n	800754a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0210 	bic.w	r2, r2, #16
 8007538:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755e:	2b00      	cmp	r3, #0
 8007560:	d032      	beq.n	80075c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d022      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2205      	movs	r2, #5
 8007572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0201 	bic.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	3301      	adds	r3, #1
 800758a:	60bb      	str	r3, [r7, #8]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	429a      	cmp	r2, r3
 8007590:	d307      	bcc.n	80075a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f2      	bne.n	8007586 <HAL_DMA_IRQHandler+0x2ca>
 80075a0:	e000      	b.n	80075a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80075a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4798      	blx	r3
 80075c4:	e000      	b.n	80075c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80075c6:	bf00      	nop
    }
  }
}
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop

080075d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d108      	bne.n	8007610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800760e:	e007      	b.n	8007620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	60da      	str	r2, [r3, #12]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	3b10      	subs	r3, #16
 800763c:	4a14      	ldr	r2, [pc, #80]	; (8007690 <DMA_CalcBaseAndBitshift+0x64>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007646:	4a13      	ldr	r2, [pc, #76]	; (8007694 <DMA_CalcBaseAndBitshift+0x68>)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b03      	cmp	r3, #3
 8007658:	d909      	bls.n	800766e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007662:	f023 0303 	bic.w	r3, r3, #3
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	659a      	str	r2, [r3, #88]	; 0x58
 800766c:	e007      	b.n	800767e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	aaaaaaab 	.word	0xaaaaaaab
 8007694:	08011704 	.word	0x08011704

08007698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11f      	bne.n	80076f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d855      	bhi.n	8007764 <DMA_CheckFifoParam+0xcc>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <DMA_CheckFifoParam+0x28>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076e3 	.word	0x080076e3
 80076c8:	080076d1 	.word	0x080076d1
 80076cc:	08007765 	.word	0x08007765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d045      	beq.n	8007768 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e0:	e042      	b.n	8007768 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076ea:	d13f      	bne.n	800776c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076f0:	e03c      	b.n	800776c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fa:	d121      	bne.n	8007740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d836      	bhi.n	8007770 <DMA_CheckFifoParam+0xd8>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <DMA_CheckFifoParam+0x70>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	08007719 	.word	0x08007719
 800770c:	0800771f 	.word	0x0800771f
 8007710:	08007719 	.word	0x08007719
 8007714:	08007731 	.word	0x08007731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
      break;
 800771c:	e02f      	b.n	800777e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d024      	beq.n	8007774 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800772e:	e021      	b.n	8007774 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007738:	d11e      	bne.n	8007778 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800773e:	e01b      	b.n	8007778 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d902      	bls.n	800774c <DMA_CheckFifoParam+0xb4>
 8007746:	2b03      	cmp	r3, #3
 8007748:	d003      	beq.n	8007752 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800774a:	e018      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e015      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00e      	beq.n	800777c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
      break;
 8007762:	e00b      	b.n	800777c <DMA_CheckFifoParam+0xe4>
      break;
 8007764:	bf00      	nop
 8007766:	e00a      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      break;
 8007768:	bf00      	nop
 800776a:	e008      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      break;
 800776c:	bf00      	nop
 800776e:	e006      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      break;
 8007770:	bf00      	nop
 8007772:	e004      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      break;
 8007774:	bf00      	nop
 8007776:	e002      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      break;   
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <DMA_CheckFifoParam+0xe6>
      break;
 800777c:	bf00      	nop
    }
  } 
  
  return status; 
 800777e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800778c:	b480      	push	{r7}
 800778e:	b089      	sub	sp, #36	; 0x24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800779e:	2300      	movs	r3, #0
 80077a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	e16b      	b.n	8007a80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077a8:	2201      	movs	r2, #1
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4013      	ands	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	f040 815a 	bne.w	8007a7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d00b      	beq.n	80077e6 <HAL_GPIO_Init+0x5a>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d007      	beq.n	80077e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077da:	2b11      	cmp	r3, #17
 80077dc:	d003      	beq.n	80077e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b12      	cmp	r3, #18
 80077e4:	d130      	bne.n	8007848 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	2203      	movs	r2, #3
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43db      	mvns	r3, r3
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	4013      	ands	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	4313      	orrs	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800781c:	2201      	movs	r2, #1
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	43db      	mvns	r3, r3
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	f003 0201 	and.w	r2, r3, #1
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	4313      	orrs	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	2203      	movs	r2, #3
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d003      	beq.n	8007888 <HAL_GPIO_Init+0xfc>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b12      	cmp	r3, #18
 8007886:	d123      	bne.n	80078d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	08da      	lsrs	r2, r3, #3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3208      	adds	r2, #8
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	220f      	movs	r2, #15
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	43db      	mvns	r3, r3
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	4013      	ands	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	4313      	orrs	r3, r2
 80078c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	08da      	lsrs	r2, r3, #3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3208      	adds	r2, #8
 80078ca:	69b9      	ldr	r1, [r7, #24]
 80078cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	2203      	movs	r2, #3
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	43db      	mvns	r3, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	4013      	ands	r3, r2
 80078e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f003 0203 	and.w	r2, r3, #3
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80b4 	beq.w	8007a7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	4b5f      	ldr	r3, [pc, #380]	; (8007a94 <HAL_GPIO_Init+0x308>)
 8007918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791a:	4a5e      	ldr	r2, [pc, #376]	; (8007a94 <HAL_GPIO_Init+0x308>)
 800791c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007920:	6453      	str	r3, [r2, #68]	; 0x44
 8007922:	4b5c      	ldr	r3, [pc, #368]	; (8007a94 <HAL_GPIO_Init+0x308>)
 8007924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800792e:	4a5a      	ldr	r2, [pc, #360]	; (8007a98 <HAL_GPIO_Init+0x30c>)
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	089b      	lsrs	r3, r3, #2
 8007934:	3302      	adds	r3, #2
 8007936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800793a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	220f      	movs	r2, #15
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43db      	mvns	r3, r3
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4013      	ands	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a51      	ldr	r2, [pc, #324]	; (8007a9c <HAL_GPIO_Init+0x310>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d02b      	beq.n	80079b2 <HAL_GPIO_Init+0x226>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a50      	ldr	r2, [pc, #320]	; (8007aa0 <HAL_GPIO_Init+0x314>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d025      	beq.n	80079ae <HAL_GPIO_Init+0x222>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a4f      	ldr	r2, [pc, #316]	; (8007aa4 <HAL_GPIO_Init+0x318>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01f      	beq.n	80079aa <HAL_GPIO_Init+0x21e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a4e      	ldr	r2, [pc, #312]	; (8007aa8 <HAL_GPIO_Init+0x31c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d019      	beq.n	80079a6 <HAL_GPIO_Init+0x21a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a4d      	ldr	r2, [pc, #308]	; (8007aac <HAL_GPIO_Init+0x320>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <HAL_GPIO_Init+0x216>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a4c      	ldr	r2, [pc, #304]	; (8007ab0 <HAL_GPIO_Init+0x324>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00d      	beq.n	800799e <HAL_GPIO_Init+0x212>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a4b      	ldr	r2, [pc, #300]	; (8007ab4 <HAL_GPIO_Init+0x328>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d007      	beq.n	800799a <HAL_GPIO_Init+0x20e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a4a      	ldr	r2, [pc, #296]	; (8007ab8 <HAL_GPIO_Init+0x32c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d101      	bne.n	8007996 <HAL_GPIO_Init+0x20a>
 8007992:	2307      	movs	r3, #7
 8007994:	e00e      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 8007996:	2308      	movs	r3, #8
 8007998:	e00c      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 800799a:	2306      	movs	r3, #6
 800799c:	e00a      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 800799e:	2305      	movs	r3, #5
 80079a0:	e008      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 80079a2:	2304      	movs	r3, #4
 80079a4:	e006      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 80079a6:	2303      	movs	r3, #3
 80079a8:	e004      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e002      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_GPIO_Init+0x228>
 80079b2:	2300      	movs	r3, #0
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	f002 0203 	and.w	r2, r2, #3
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	4093      	lsls	r3, r2
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079c4:	4934      	ldr	r1, [pc, #208]	; (8007a98 <HAL_GPIO_Init+0x30c>)
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	089b      	lsrs	r3, r3, #2
 80079ca:	3302      	adds	r3, #2
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079d2:	4b3a      	ldr	r3, [pc, #232]	; (8007abc <HAL_GPIO_Init+0x330>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	43db      	mvns	r3, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	4013      	ands	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079f6:	4a31      	ldr	r2, [pc, #196]	; (8007abc <HAL_GPIO_Init+0x330>)
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079fc:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <HAL_GPIO_Init+0x330>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	43db      	mvns	r3, r3
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a20:	4a26      	ldr	r2, [pc, #152]	; (8007abc <HAL_GPIO_Init+0x330>)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a26:	4b25      	ldr	r3, [pc, #148]	; (8007abc <HAL_GPIO_Init+0x330>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4013      	ands	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <HAL_GPIO_Init+0x330>)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <HAL_GPIO_Init+0x330>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a74:	4a11      	ldr	r2, [pc, #68]	; (8007abc <HAL_GPIO_Init+0x330>)
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	f67f ae90 	bls.w	80077a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a88:	bf00      	nop
 8007a8a:	3724      	adds	r7, #36	; 0x24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	40023800 	.word	0x40023800
 8007a98:	40013800 	.word	0x40013800
 8007a9c:	40020000 	.word	0x40020000
 8007aa0:	40020400 	.word	0x40020400
 8007aa4:	40020800 	.word	0x40020800
 8007aa8:	40020c00 	.word	0x40020c00
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	40021400 	.word	0x40021400
 8007ab4:	40021800 	.word	0x40021800
 8007ab8:	40021c00 	.word	0x40021c00
 8007abc:	40013c00 	.word	0x40013c00

08007ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
 8007adc:	e001      	b.n	8007ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	807b      	strh	r3, [r7, #2]
 8007afc:	4613      	mov	r3, r2
 8007afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b00:	787b      	ldrb	r3, [r7, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b06:	887a      	ldrh	r2, [r7, #2]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b0c:	e003      	b.n	8007b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	041a      	lsls	r2, r3, #16
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	619a      	str	r2, [r3, #24]
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
	...

08007b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007b2e:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b30:	695a      	ldr	r2, [r3, #20]
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d006      	beq.n	8007b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b3a:	4a05      	ldr	r2, [pc, #20]	; (8007b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fc fc16 	bl	8004374 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40013c00 	.word	0x40013c00

08007b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e11f      	b.n	8007da6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fb f96a 	bl	8002e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2224      	movs	r2, #36	; 0x24
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007bb8:	f001 fbba 	bl	8009330 <HAL_RCC_GetPCLK1Freq>
 8007bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	4a7b      	ldr	r2, [pc, #492]	; (8007db0 <HAL_I2C_Init+0x25c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d807      	bhi.n	8007bd8 <HAL_I2C_Init+0x84>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a7a      	ldr	r2, [pc, #488]	; (8007db4 <HAL_I2C_Init+0x260>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	bf94      	ite	ls
 8007bd0:	2301      	movls	r3, #1
 8007bd2:	2300      	movhi	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e006      	b.n	8007be6 <HAL_I2C_Init+0x92>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a77      	ldr	r2, [pc, #476]	; (8007db8 <HAL_I2C_Init+0x264>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	bf94      	ite	ls
 8007be0:	2301      	movls	r3, #1
 8007be2:	2300      	movhi	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e0db      	b.n	8007da6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a72      	ldr	r2, [pc, #456]	; (8007dbc <HAL_I2C_Init+0x268>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	0c9b      	lsrs	r3, r3, #18
 8007bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4a64      	ldr	r2, [pc, #400]	; (8007db0 <HAL_I2C_Init+0x25c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d802      	bhi.n	8007c28 <HAL_I2C_Init+0xd4>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	3301      	adds	r3, #1
 8007c26:	e009      	b.n	8007c3c <HAL_I2C_Init+0xe8>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c2e:	fb02 f303 	mul.w	r3, r2, r3
 8007c32:	4a63      	ldr	r2, [pc, #396]	; (8007dc0 <HAL_I2C_Init+0x26c>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	099b      	lsrs	r3, r3, #6
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	4956      	ldr	r1, [pc, #344]	; (8007db0 <HAL_I2C_Init+0x25c>)
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	d80d      	bhi.n	8007c78 <HAL_I2C_Init+0x124>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	1e59      	subs	r1, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	bf38      	it	cc
 8007c74:	2304      	movcc	r3, #4
 8007c76:	e04f      	b.n	8007d18 <HAL_I2C_Init+0x1c4>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d111      	bne.n	8007ca4 <HAL_I2C_Init+0x150>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1e58      	subs	r0, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	440b      	add	r3, r1
 8007c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c92:	3301      	adds	r3, #1
 8007c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bf0c      	ite	eq
 8007c9c:	2301      	moveq	r3, #1
 8007c9e:	2300      	movne	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e012      	b.n	8007cca <HAL_I2C_Init+0x176>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1e58      	subs	r0, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	0099      	lsls	r1, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_I2C_Init+0x17e>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e022      	b.n	8007d18 <HAL_I2C_Init+0x1c4>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_I2C_Init+0x1a4>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1e58      	subs	r0, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6859      	ldr	r1, [r3, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	440b      	add	r3, r1
 8007ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cec:	3301      	adds	r3, #1
 8007cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf6:	e00f      	b.n	8007d18 <HAL_I2C_Init+0x1c4>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	1e58      	subs	r0, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6859      	ldr	r1, [r3, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	0099      	lsls	r1, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	6809      	ldr	r1, [r1, #0]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6911      	ldr	r1, [r2, #16]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68d2      	ldr	r2, [r2, #12]
 8007d52:	4311      	orrs	r1, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	000186a0 	.word	0x000186a0
 8007db4:	001e847f 	.word	0x001e847f
 8007db8:	003d08ff 	.word	0x003d08ff
 8007dbc:	431bde83 	.word	0x431bde83
 8007dc0:	10624dd3 	.word	0x10624dd3

08007dc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	817b      	strh	r3, [r7, #10]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	813b      	strh	r3, [r7, #8]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dde:	f7fe fc25 	bl	800662c <HAL_GetTick>
 8007de2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	f040 80d9 	bne.w	8007fa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2319      	movs	r3, #25
 8007df8:	2201      	movs	r2, #1
 8007dfa:	496d      	ldr	r1, [pc, #436]	; (8007fb0 <HAL_I2C_Mem_Write+0x1ec>)
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fc7f 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e0cc      	b.n	8007fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_I2C_Mem_Write+0x56>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e0c5      	b.n	8007fa6 <HAL_I2C_Mem_Write+0x1e2>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d007      	beq.n	8007e40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2221      	movs	r2, #33	; 0x21
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2240      	movs	r2, #64	; 0x40
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4a4d      	ldr	r2, [pc, #308]	; (8007fb4 <HAL_I2C_Mem_Write+0x1f0>)
 8007e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e82:	88f8      	ldrh	r0, [r7, #6]
 8007e84:	893a      	ldrh	r2, [r7, #8]
 8007e86:	8979      	ldrh	r1, [r7, #10]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	4603      	mov	r3, r0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fab6 	bl	8008404 <I2C_RequestMemoryWrite>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d052      	beq.n	8007f44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e081      	b.n	8007fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fd00 	bl	80088ac <I2C_WaitOnTXEFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d107      	bne.n	8007eca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e06b      	b.n	8007fa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0304 	and.w	r3, r3, #4
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d11b      	bne.n	8007f44 <HAL_I2C_Mem_Write+0x180>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d017      	beq.n	8007f44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1aa      	bne.n	8007ea2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fcec 	bl	800892e <I2C_WaitOnBTFFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d107      	bne.n	8007f74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e016      	b.n	8007fa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e000      	b.n	8007fa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007fa4:	2302      	movs	r3, #2
  }
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	00100002 	.word	0x00100002
 8007fb4:	ffff0000 	.word	0xffff0000

08007fb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08c      	sub	sp, #48	; 0x30
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	817b      	strh	r3, [r7, #10]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	813b      	strh	r3, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fd2:	f7fe fb2b 	bl	800662c <HAL_GetTick>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	f040 8208 	bne.w	80083f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2319      	movs	r3, #25
 8007fec:	2201      	movs	r2, #1
 8007fee:	497b      	ldr	r1, [pc, #492]	; (80081dc <HAL_I2C_Mem_Read+0x224>)
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fb85 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e1fb      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_I2C_Mem_Read+0x56>
 800800a:	2302      	movs	r3, #2
 800800c:	e1f4      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d007      	beq.n	8008034 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2222      	movs	r2, #34	; 0x22
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2240      	movs	r2, #64	; 0x40
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a5b      	ldr	r2, [pc, #364]	; (80081e0 <HAL_I2C_Mem_Read+0x228>)
 8008074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008076:	88f8      	ldrh	r0, [r7, #6]
 8008078:	893a      	ldrh	r2, [r7, #8]
 800807a:	8979      	ldrh	r1, [r7, #10]
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4603      	mov	r3, r0
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fa52 	bl	8008530 <I2C_RequestMemoryRead>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e1b0      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d113      	bne.n	80080c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	623b      	str	r3, [r7, #32]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e184      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d11b      	bne.n	8008106 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e164      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810a:	2b02      	cmp	r3, #2
 800810c:	d11b      	bne.n	8008146 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800812c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	61bb      	str	r3, [r7, #24]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	e144      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	617b      	str	r3, [r7, #20]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800815c:	e138      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008162:	2b03      	cmp	r3, #3
 8008164:	f200 80f1 	bhi.w	800834a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816c:	2b01      	cmp	r3, #1
 800816e:	d123      	bne.n	80081b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fc1b 	bl	80089b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e139      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081b6:	e10b      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d14e      	bne.n	800825e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	2200      	movs	r2, #0
 80081c8:	4906      	ldr	r1, [pc, #24]	; (80081e4 <HAL_I2C_Mem_Read+0x22c>)
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fa98 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d008      	beq.n	80081e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e10e      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
 80081da:	bf00      	nop
 80081dc:	00100002 	.word	0x00100002
 80081e0:	ffff0000 	.word	0xffff0000
 80081e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008214:	3b01      	subs	r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b29a      	uxth	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800825c:	e0b8      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	2200      	movs	r2, #0
 8008266:	4966      	ldr	r1, [pc, #408]	; (8008400 <HAL_I2C_Mem_Read+0x448>)
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fa49 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e0bf      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	2200      	movs	r2, #0
 80082c2:	494f      	ldr	r1, [pc, #316]	; (8008400 <HAL_I2C_Mem_Read+0x448>)
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fa1b 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e091      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008348:	e042      	b.n	80083d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fb2e 	bl	80089b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e04c      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008386:	b29b      	uxth	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b04      	cmp	r3, #4
 800839c:	d118      	bne.n	80083d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f aec2 	bne.w	800815e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e000      	b.n	80083f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80083f6:	2302      	movs	r3, #2
  }
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3728      	adds	r7, #40	; 0x28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	00010004 	.word	0x00010004

08008404 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	4608      	mov	r0, r1
 800840e:	4611      	mov	r1, r2
 8008410:	461a      	mov	r2, r3
 8008412:	4603      	mov	r3, r0
 8008414:	817b      	strh	r3, [r7, #10]
 8008416:	460b      	mov	r3, r1
 8008418:	813b      	strh	r3, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800842c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	2200      	movs	r2, #0
 8008436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 f960 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00d      	beq.n	8008462 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008454:	d103      	bne.n	800845e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800845c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e05f      	b.n	8008522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008462:	897b      	ldrh	r3, [r7, #10]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	6a3a      	ldr	r2, [r7, #32]
 8008476:	492d      	ldr	r1, [pc, #180]	; (800852c <I2C_RequestMemoryWrite+0x128>)
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f998 	bl	80087ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e04c      	b.n	8008522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800849e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a0:	6a39      	ldr	r1, [r7, #32]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fa02 	bl	80088ac <I2C_WaitOnTXEFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00d      	beq.n	80084ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d107      	bne.n	80084c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e02b      	b.n	8008522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d105      	bne.n	80084dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084d0:	893b      	ldrh	r3, [r7, #8]
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	611a      	str	r2, [r3, #16]
 80084da:	e021      	b.n	8008520 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084dc:	893b      	ldrh	r3, [r7, #8]
 80084de:	0a1b      	lsrs	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ec:	6a39      	ldr	r1, [r7, #32]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f9dc 	bl	80088ac <I2C_WaitOnTXEFlagUntilTimeout>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d107      	bne.n	8008512 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e005      	b.n	8008522 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008516:	893b      	ldrh	r3, [r7, #8]
 8008518:	b2da      	uxtb	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	00010002 	.word	0x00010002

08008530 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	461a      	mov	r2, r3
 800853e:	4603      	mov	r3, r0
 8008540:	817b      	strh	r3, [r7, #10]
 8008542:	460b      	mov	r3, r1
 8008544:	813b      	strh	r3, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008558:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	2200      	movs	r2, #0
 8008572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f8c2 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00d      	beq.n	800859e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008590:	d103      	bne.n	800859a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008598:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e0aa      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800859e:	897b      	ldrh	r3, [r7, #10]
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	6a3a      	ldr	r2, [r7, #32]
 80085b2:	4952      	ldr	r1, [pc, #328]	; (80086fc <I2C_RequestMemoryRead+0x1cc>)
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f8fa 	bl	80087ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e097      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085dc:	6a39      	ldr	r1, [r7, #32]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 f964 	bl	80088ac <I2C_WaitOnTXEFlagUntilTimeout>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00d      	beq.n	8008606 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d107      	bne.n	8008602 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e076      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d105      	bne.n	8008618 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800860c:	893b      	ldrh	r3, [r7, #8]
 800860e:	b2da      	uxtb	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	611a      	str	r2, [r3, #16]
 8008616:	e021      	b.n	800865c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008618:	893b      	ldrh	r3, [r7, #8]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	b29b      	uxth	r3, r3
 800861e:	b2da      	uxtb	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	6a39      	ldr	r1, [r7, #32]
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f93e 	bl	80088ac <I2C_WaitOnTXEFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	2b04      	cmp	r3, #4
 800863c:	d107      	bne.n	800864e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e050      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008652:	893b      	ldrh	r3, [r7, #8]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800865c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865e:	6a39      	ldr	r1, [r7, #32]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f923 	bl	80088ac <I2C_WaitOnTXEFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00d      	beq.n	8008688 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	2b04      	cmp	r3, #4
 8008672:	d107      	bne.n	8008684 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008682:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e035      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008696:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	2200      	movs	r2, #0
 80086a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f82b 	bl	8008700 <I2C_WaitOnFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00d      	beq.n	80086cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086be:	d103      	bne.n	80086c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e013      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80086cc:	897b      	ldrh	r3, [r7, #10]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	6a3a      	ldr	r2, [r7, #32]
 80086e0:	4906      	ldr	r1, [pc, #24]	; (80086fc <I2C_RequestMemoryRead+0x1cc>)
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 f863 	bl	80087ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	00010002 	.word	0x00010002

08008700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	4613      	mov	r3, r2
 800870e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008710:	e025      	b.n	800875e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008718:	d021      	beq.n	800875e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800871a:	f7fd ff87 	bl	800662c <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d302      	bcc.n	8008730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d116      	bne.n	800875e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2220      	movs	r2, #32
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f043 0220 	orr.w	r2, r3, #32
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e023      	b.n	80087a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d10d      	bne.n	8008784 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	43da      	mvns	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4013      	ands	r3, r2
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	e00c      	b.n	800879e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	43da      	mvns	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4013      	ands	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d0b6      	beq.n	8008712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087bc:	e051      	b.n	8008862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087cc:	d123      	bne.n	8008816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f043 0204 	orr.w	r2, r3, #4
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e046      	b.n	80088a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d021      	beq.n	8008862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800881e:	f7fd ff05 	bl	800662c <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d302      	bcc.n	8008834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d116      	bne.n	8008862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	f043 0220 	orr.w	r2, r3, #32
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e020      	b.n	80088a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	0c1b      	lsrs	r3, r3, #16
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10c      	bne.n	8008886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	43da      	mvns	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4013      	ands	r3, r2
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	bf14      	ite	ne
 800887e:	2301      	movne	r3, #1
 8008880:	2300      	moveq	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	e00b      	b.n	800889e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	43da      	mvns	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4013      	ands	r3, r2
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	bf14      	ite	ne
 8008898:	2301      	movne	r3, #1
 800889a:	2300      	moveq	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d18d      	bne.n	80087be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088b8:	e02d      	b.n	8008916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f8ce 	bl	8008a5c <I2C_IsAcknowledgeFailed>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e02d      	b.n	8008926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d021      	beq.n	8008916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d2:	f7fd feab 	bl	800662c <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d302      	bcc.n	80088e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d116      	bne.n	8008916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f043 0220 	orr.w	r2, r3, #32
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e007      	b.n	8008926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008920:	2b80      	cmp	r3, #128	; 0x80
 8008922:	d1ca      	bne.n	80088ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800893a:	e02d      	b.n	8008998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f88d 	bl	8008a5c <I2C_IsAcknowledgeFailed>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e02d      	b.n	80089a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d021      	beq.n	8008998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008954:	f7fd fe6a 	bl	800662c <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d302      	bcc.n	800896a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d116      	bne.n	8008998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	f043 0220 	orr.w	r2, r3, #32
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e007      	b.n	80089a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d1ca      	bne.n	800893c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089bc:	e042      	b.n	8008a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d119      	bne.n	8008a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0210 	mvn.w	r2, #16
 80089d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e029      	b.n	8008a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a00:	f7fd fe14 	bl	800662c <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d302      	bcc.n	8008a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d116      	bne.n	8008a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a30:	f043 0220 	orr.w	r2, r3, #32
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e007      	b.n	8008a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b40      	cmp	r3, #64	; 0x40
 8008a50:	d1b5      	bne.n	80089be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a72:	d11b      	bne.n	8008aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	f043 0204 	orr.w	r2, r3, #4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e25b      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d075      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ada:	4ba3      	ldr	r3, [pc, #652]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 030c 	and.w	r3, r3, #12
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d00c      	beq.n	8008b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ae6:	4ba0      	ldr	r3, [pc, #640]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d112      	bne.n	8008b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008af2:	4b9d      	ldr	r3, [pc, #628]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008afe:	d10b      	bne.n	8008b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b00:	4b99      	ldr	r3, [pc, #612]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d05b      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x108>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d157      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e236      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b20:	d106      	bne.n	8008b30 <HAL_RCC_OscConfig+0x74>
 8008b22:	4b91      	ldr	r3, [pc, #580]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a90      	ldr	r2, [pc, #576]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e01d      	b.n	8008b6c <HAL_RCC_OscConfig+0xb0>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x98>
 8008b3a:	4b8b      	ldr	r3, [pc, #556]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a8a      	ldr	r2, [pc, #552]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	4b88      	ldr	r3, [pc, #544]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a87      	ldr	r2, [pc, #540]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	e00b      	b.n	8008b6c <HAL_RCC_OscConfig+0xb0>
 8008b54:	4b84      	ldr	r3, [pc, #528]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a83      	ldr	r2, [pc, #524]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	4b81      	ldr	r3, [pc, #516]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a80      	ldr	r2, [pc, #512]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d013      	beq.n	8008b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b74:	f7fd fd5a 	bl	800662c <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b7a:	e008      	b.n	8008b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b7c:	f7fd fd56 	bl	800662c <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b64      	cmp	r3, #100	; 0x64
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e1fb      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b8e:	4b76      	ldr	r3, [pc, #472]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f0      	beq.n	8008b7c <HAL_RCC_OscConfig+0xc0>
 8008b9a:	e014      	b.n	8008bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b9c:	f7fd fd46 	bl	800662c <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ba4:	f7fd fd42 	bl	800662c <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b64      	cmp	r3, #100	; 0x64
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e1e7      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bb6:	4b6c      	ldr	r3, [pc, #432]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f0      	bne.n	8008ba4 <HAL_RCC_OscConfig+0xe8>
 8008bc2:	e000      	b.n	8008bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d063      	beq.n	8008c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008bd2:	4b65      	ldr	r3, [pc, #404]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 030c 	and.w	r3, r3, #12
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bde:	4b62      	ldr	r3, [pc, #392]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d11c      	bne.n	8008c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bea:	4b5f      	ldr	r3, [pc, #380]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d116      	bne.n	8008c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bf6:	4b5c      	ldr	r3, [pc, #368]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <HAL_RCC_OscConfig+0x152>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d001      	beq.n	8008c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e1bb      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c0e:	4b56      	ldr	r3, [pc, #344]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4952      	ldr	r1, [pc, #328]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c22:	e03a      	b.n	8008c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d020      	beq.n	8008c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c2c:	4b4f      	ldr	r3, [pc, #316]	; (8008d6c <HAL_RCC_OscConfig+0x2b0>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c32:	f7fd fcfb 	bl	800662c <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c38:	e008      	b.n	8008c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c3a:	f7fd fcf7 	bl	800662c <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e19c      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c4c:	4b46      	ldr	r3, [pc, #280]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0f0      	beq.n	8008c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c58:	4b43      	ldr	r3, [pc, #268]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	4940      	ldr	r1, [pc, #256]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	600b      	str	r3, [r1, #0]
 8008c6c:	e015      	b.n	8008c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c6e:	4b3f      	ldr	r3, [pc, #252]	; (8008d6c <HAL_RCC_OscConfig+0x2b0>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fd fcda 	bl	800662c <HAL_GetTick>
 8008c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c7c:	f7fd fcd6 	bl	800662c <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e17b      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c8e:	4b36      	ldr	r3, [pc, #216]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1f0      	bne.n	8008c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d030      	beq.n	8008d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d016      	beq.n	8008cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cae:	4b30      	ldr	r3, [pc, #192]	; (8008d70 <HAL_RCC_OscConfig+0x2b4>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb4:	f7fd fcba 	bl	800662c <HAL_GetTick>
 8008cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cba:	e008      	b.n	8008cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cbc:	f7fd fcb6 	bl	800662c <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e15b      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cce:	4b26      	ldr	r3, [pc, #152]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f0      	beq.n	8008cbc <HAL_RCC_OscConfig+0x200>
 8008cda:	e015      	b.n	8008d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cdc:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <HAL_RCC_OscConfig+0x2b4>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ce2:	f7fd fca3 	bl	800662c <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cea:	f7fd fc9f 	bl	800662c <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e144      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cfc:	4b1a      	ldr	r3, [pc, #104]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f0      	bne.n	8008cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80a0 	beq.w	8008e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d1a:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10f      	bne.n	8008d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d26:	2300      	movs	r3, #0
 8008d28:	60bb      	str	r3, [r7, #8]
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	4a0e      	ldr	r2, [pc, #56]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d34:	6413      	str	r3, [r2, #64]	; 0x40
 8008d36:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <HAL_RCC_OscConfig+0x2ac>)
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3e:	60bb      	str	r3, [r7, #8]
 8008d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d42:	2301      	movs	r3, #1
 8008d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <HAL_RCC_OscConfig+0x2b8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d121      	bne.n	8008d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d52:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <HAL_RCC_OscConfig+0x2b8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a07      	ldr	r2, [pc, #28]	; (8008d74 <HAL_RCC_OscConfig+0x2b8>)
 8008d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d5e:	f7fd fc65 	bl	800662c <HAL_GetTick>
 8008d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d64:	e011      	b.n	8008d8a <HAL_RCC_OscConfig+0x2ce>
 8008d66:	bf00      	nop
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	42470000 	.word	0x42470000
 8008d70:	42470e80 	.word	0x42470e80
 8008d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d78:	f7fd fc58 	bl	800662c <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e0fd      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d8a:	4b81      	ldr	r3, [pc, #516]	; (8008f90 <HAL_RCC_OscConfig+0x4d4>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0f0      	beq.n	8008d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d106      	bne.n	8008dac <HAL_RCC_OscConfig+0x2f0>
 8008d9e:	4b7d      	ldr	r3, [pc, #500]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	4a7c      	ldr	r2, [pc, #496]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	6713      	str	r3, [r2, #112]	; 0x70
 8008daa:	e01c      	b.n	8008de6 <HAL_RCC_OscConfig+0x32a>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b05      	cmp	r3, #5
 8008db2:	d10c      	bne.n	8008dce <HAL_RCC_OscConfig+0x312>
 8008db4:	4b77      	ldr	r3, [pc, #476]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a76      	ldr	r2, [pc, #472]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008dba:	f043 0304 	orr.w	r3, r3, #4
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc0:	4b74      	ldr	r3, [pc, #464]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc4:	4a73      	ldr	r2, [pc, #460]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	6713      	str	r3, [r2, #112]	; 0x70
 8008dcc:	e00b      	b.n	8008de6 <HAL_RCC_OscConfig+0x32a>
 8008dce:	4b71      	ldr	r3, [pc, #452]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd2:	4a70      	ldr	r2, [pc, #448]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dda:	4b6e      	ldr	r3, [pc, #440]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dde:	4a6d      	ldr	r2, [pc, #436]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008de0:	f023 0304 	bic.w	r3, r3, #4
 8008de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d015      	beq.n	8008e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dee:	f7fd fc1d 	bl	800662c <HAL_GetTick>
 8008df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df4:	e00a      	b.n	8008e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008df6:	f7fd fc19 	bl	800662c <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d901      	bls.n	8008e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e0bc      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e0c:	4b61      	ldr	r3, [pc, #388]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0ee      	beq.n	8008df6 <HAL_RCC_OscConfig+0x33a>
 8008e18:	e014      	b.n	8008e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e1a:	f7fd fc07 	bl	800662c <HAL_GetTick>
 8008e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e20:	e00a      	b.n	8008e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e22:	f7fd fc03 	bl	800662c <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e0a6      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e38:	4b56      	ldr	r3, [pc, #344]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1ee      	bne.n	8008e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d105      	bne.n	8008e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e4a:	4b52      	ldr	r3, [pc, #328]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	4a51      	ldr	r2, [pc, #324]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8092 	beq.w	8008f84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e60:	4b4c      	ldr	r3, [pc, #304]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f003 030c 	and.w	r3, r3, #12
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d05c      	beq.n	8008f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d141      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e74:	4b48      	ldr	r3, [pc, #288]	; (8008f98 <HAL_RCC_OscConfig+0x4dc>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e7a:	f7fd fbd7 	bl	800662c <HAL_GetTick>
 8008e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e80:	e008      	b.n	8008e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e82:	f7fd fbd3 	bl	800662c <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e078      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e94:	4b3f      	ldr	r3, [pc, #252]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1f0      	bne.n	8008e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	019b      	lsls	r3, r3, #6
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	041b      	lsls	r3, r3, #16
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	061b      	lsls	r3, r3, #24
 8008ec4:	4933      	ldr	r1, [pc, #204]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008eca:	4b33      	ldr	r3, [pc, #204]	; (8008f98 <HAL_RCC_OscConfig+0x4dc>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed0:	f7fd fbac 	bl	800662c <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ed8:	f7fd fba8 	bl	800662c <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e04d      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008eea:	4b2a      	ldr	r3, [pc, #168]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0f0      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x41c>
 8008ef6:	e045      	b.n	8008f84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef8:	4b27      	ldr	r3, [pc, #156]	; (8008f98 <HAL_RCC_OscConfig+0x4dc>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008efe:	f7fd fb95 	bl	800662c <HAL_GetTick>
 8008f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f06:	f7fd fb91 	bl	800662c <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e036      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f18:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f0      	bne.n	8008f06 <HAL_RCC_OscConfig+0x44a>
 8008f24:	e02e      	b.n	8008f84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e029      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f32:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <HAL_RCC_OscConfig+0x4d8>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d11c      	bne.n	8008f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d115      	bne.n	8008f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d10d      	bne.n	8008f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d106      	bne.n	8008f80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	40007000 	.word	0x40007000
 8008f94:	40023800 	.word	0x40023800
 8008f98:	42470060 	.word	0x42470060

08008f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e0cc      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb0:	4b68      	ldr	r3, [pc, #416]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d90c      	bls.n	8008fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fbe:	4b65      	ldr	r3, [pc, #404]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc6:	4b63      	ldr	r3, [pc, #396]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d001      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e0b8      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d020      	beq.n	8009026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff0:	4b59      	ldr	r3, [pc, #356]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4a58      	ldr	r2, [pc, #352]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009008:	4b53      	ldr	r3, [pc, #332]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	4a52      	ldr	r2, [pc, #328]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800900e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009014:	4b50      	ldr	r3, [pc, #320]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	494d      	ldr	r1, [pc, #308]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8009022:	4313      	orrs	r3, r2
 8009024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d044      	beq.n	80090bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d107      	bne.n	800904a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800903a:	4b47      	ldr	r3, [pc, #284]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d119      	bne.n	800907a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e07f      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d003      	beq.n	800905a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009056:	2b03      	cmp	r3, #3
 8009058:	d107      	bne.n	800906a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800905a:	4b3f      	ldr	r3, [pc, #252]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d109      	bne.n	800907a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e06f      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800906a:	4b3b      	ldr	r3, [pc, #236]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e067      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800907a:	4b37      	ldr	r3, [pc, #220]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f023 0203 	bic.w	r2, r3, #3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	4934      	ldr	r1, [pc, #208]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8009088:	4313      	orrs	r3, r2
 800908a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800908c:	f7fd face 	bl	800662c <HAL_GetTick>
 8009090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009092:	e00a      	b.n	80090aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009094:	f7fd faca 	bl	800662c <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e04f      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090aa:	4b2b      	ldr	r3, [pc, #172]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 020c 	and.w	r2, r3, #12
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d1eb      	bne.n	8009094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090bc:	4b25      	ldr	r3, [pc, #148]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d20c      	bcs.n	80090e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ca:	4b22      	ldr	r3, [pc, #136]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	b2d2      	uxtb	r2, r2
 80090d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090d2:	4b20      	ldr	r3, [pc, #128]	; (8009154 <HAL_RCC_ClockConfig+0x1b8>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d001      	beq.n	80090e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e032      	b.n	800914a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090f0:	4b19      	ldr	r3, [pc, #100]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	4916      	ldr	r1, [pc, #88]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800910e:	4b12      	ldr	r3, [pc, #72]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	490e      	ldr	r1, [pc, #56]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800911e:	4313      	orrs	r3, r2
 8009120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009122:	f000 f821 	bl	8009168 <HAL_RCC_GetSysClockFreq>
 8009126:	4601      	mov	r1, r0
 8009128:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <HAL_RCC_ClockConfig+0x1bc>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	091b      	lsrs	r3, r3, #4
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	4a0a      	ldr	r2, [pc, #40]	; (800915c <HAL_RCC_ClockConfig+0x1c0>)
 8009134:	5cd3      	ldrb	r3, [r2, r3]
 8009136:	fa21 f303 	lsr.w	r3, r1, r3
 800913a:	4a09      	ldr	r2, [pc, #36]	; (8009160 <HAL_RCC_ClockConfig+0x1c4>)
 800913c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <HAL_RCC_ClockConfig+0x1c8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f7fd fa2e 	bl	80065a4 <HAL_InitTick>

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	40023c00 	.word	0x40023c00
 8009158:	40023800 	.word	0x40023800
 800915c:	080116ec 	.word	0x080116ec
 8009160:	2000009c 	.word	0x2000009c
 8009164:	200000a0 	.word	0x200000a0

08009168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	607b      	str	r3, [r7, #4]
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800917e:	4b63      	ldr	r3, [pc, #396]	; (800930c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f003 030c 	and.w	r3, r3, #12
 8009186:	2b04      	cmp	r3, #4
 8009188:	d007      	beq.n	800919a <HAL_RCC_GetSysClockFreq+0x32>
 800918a:	2b08      	cmp	r3, #8
 800918c:	d008      	beq.n	80091a0 <HAL_RCC_GetSysClockFreq+0x38>
 800918e:	2b00      	cmp	r3, #0
 8009190:	f040 80b4 	bne.w	80092fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009194:	4b5e      	ldr	r3, [pc, #376]	; (8009310 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009196:	60bb      	str	r3, [r7, #8]
       break;
 8009198:	e0b3      	b.n	8009302 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800919a:	4b5e      	ldr	r3, [pc, #376]	; (8009314 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800919c:	60bb      	str	r3, [r7, #8]
      break;
 800919e:	e0b0      	b.n	8009302 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091a0:	4b5a      	ldr	r3, [pc, #360]	; (800930c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091aa:	4b58      	ldr	r3, [pc, #352]	; (800930c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d04a      	beq.n	800924c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091b6:	4b55      	ldr	r3, [pc, #340]	; (800930c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	099b      	lsrs	r3, r3, #6
 80091bc:	f04f 0400 	mov.w	r4, #0
 80091c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	ea03 0501 	and.w	r5, r3, r1
 80091cc:	ea04 0602 	and.w	r6, r4, r2
 80091d0:	4629      	mov	r1, r5
 80091d2:	4632      	mov	r2, r6
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	f04f 0400 	mov.w	r4, #0
 80091dc:	0154      	lsls	r4, r2, #5
 80091de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80091e2:	014b      	lsls	r3, r1, #5
 80091e4:	4619      	mov	r1, r3
 80091e6:	4622      	mov	r2, r4
 80091e8:	1b49      	subs	r1, r1, r5
 80091ea:	eb62 0206 	sbc.w	r2, r2, r6
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	f04f 0400 	mov.w	r4, #0
 80091f6:	0194      	lsls	r4, r2, #6
 80091f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80091fc:	018b      	lsls	r3, r1, #6
 80091fe:	1a5b      	subs	r3, r3, r1
 8009200:	eb64 0402 	sbc.w	r4, r4, r2
 8009204:	f04f 0100 	mov.w	r1, #0
 8009208:	f04f 0200 	mov.w	r2, #0
 800920c:	00e2      	lsls	r2, r4, #3
 800920e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009212:	00d9      	lsls	r1, r3, #3
 8009214:	460b      	mov	r3, r1
 8009216:	4614      	mov	r4, r2
 8009218:	195b      	adds	r3, r3, r5
 800921a:	eb44 0406 	adc.w	r4, r4, r6
 800921e:	f04f 0100 	mov.w	r1, #0
 8009222:	f04f 0200 	mov.w	r2, #0
 8009226:	0262      	lsls	r2, r4, #9
 8009228:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800922c:	0259      	lsls	r1, r3, #9
 800922e:	460b      	mov	r3, r1
 8009230:	4614      	mov	r4, r2
 8009232:	4618      	mov	r0, r3
 8009234:	4621      	mov	r1, r4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f04f 0400 	mov.w	r4, #0
 800923c:	461a      	mov	r2, r3
 800923e:	4623      	mov	r3, r4
 8009240:	f7f7 fd22 	bl	8000c88 <__aeabi_uldivmod>
 8009244:	4603      	mov	r3, r0
 8009246:	460c      	mov	r4, r1
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	e049      	b.n	80092e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800924c:	4b2f      	ldr	r3, [pc, #188]	; (800930c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	099b      	lsrs	r3, r3, #6
 8009252:	f04f 0400 	mov.w	r4, #0
 8009256:	f240 11ff 	movw	r1, #511	; 0x1ff
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	ea03 0501 	and.w	r5, r3, r1
 8009262:	ea04 0602 	and.w	r6, r4, r2
 8009266:	4629      	mov	r1, r5
 8009268:	4632      	mov	r2, r6
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	f04f 0400 	mov.w	r4, #0
 8009272:	0154      	lsls	r4, r2, #5
 8009274:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009278:	014b      	lsls	r3, r1, #5
 800927a:	4619      	mov	r1, r3
 800927c:	4622      	mov	r2, r4
 800927e:	1b49      	subs	r1, r1, r5
 8009280:	eb62 0206 	sbc.w	r2, r2, r6
 8009284:	f04f 0300 	mov.w	r3, #0
 8009288:	f04f 0400 	mov.w	r4, #0
 800928c:	0194      	lsls	r4, r2, #6
 800928e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009292:	018b      	lsls	r3, r1, #6
 8009294:	1a5b      	subs	r3, r3, r1
 8009296:	eb64 0402 	sbc.w	r4, r4, r2
 800929a:	f04f 0100 	mov.w	r1, #0
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	00e2      	lsls	r2, r4, #3
 80092a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80092a8:	00d9      	lsls	r1, r3, #3
 80092aa:	460b      	mov	r3, r1
 80092ac:	4614      	mov	r4, r2
 80092ae:	195b      	adds	r3, r3, r5
 80092b0:	eb44 0406 	adc.w	r4, r4, r6
 80092b4:	f04f 0100 	mov.w	r1, #0
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	02a2      	lsls	r2, r4, #10
 80092be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80092c2:	0299      	lsls	r1, r3, #10
 80092c4:	460b      	mov	r3, r1
 80092c6:	4614      	mov	r4, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	4621      	mov	r1, r4
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f04f 0400 	mov.w	r4, #0
 80092d2:	461a      	mov	r2, r3
 80092d4:	4623      	mov	r3, r4
 80092d6:	f7f7 fcd7 	bl	8000c88 <__aeabi_uldivmod>
 80092da:	4603      	mov	r3, r0
 80092dc:	460c      	mov	r4, r1
 80092de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	0c1b      	lsrs	r3, r3, #16
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	3301      	adds	r3, #1
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f8:	60bb      	str	r3, [r7, #8]
      break;
 80092fa:	e002      	b.n	8009302 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80092fe:	60bb      	str	r3, [r7, #8]
      break;
 8009300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009302:	68bb      	ldr	r3, [r7, #8]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930c:	40023800 	.word	0x40023800
 8009310:	00f42400 	.word	0x00f42400
 8009314:	007a1200 	.word	0x007a1200

08009318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800931c:	4b03      	ldr	r3, [pc, #12]	; (800932c <HAL_RCC_GetHCLKFreq+0x14>)
 800931e:	681b      	ldr	r3, [r3, #0]
}
 8009320:	4618      	mov	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	2000009c 	.word	0x2000009c

08009330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009334:	f7ff fff0 	bl	8009318 <HAL_RCC_GetHCLKFreq>
 8009338:	4601      	mov	r1, r0
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	0a9b      	lsrs	r3, r3, #10
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	4a03      	ldr	r2, [pc, #12]	; (8009354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009346:	5cd3      	ldrb	r3, [r2, r3]
 8009348:	fa21 f303 	lsr.w	r3, r1, r3
}
 800934c:	4618      	mov	r0, r3
 800934e:	bd80      	pop	{r7, pc}
 8009350:	40023800 	.word	0x40023800
 8009354:	080116fc 	.word	0x080116fc

08009358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800935c:	f7ff ffdc 	bl	8009318 <HAL_RCC_GetHCLKFreq>
 8009360:	4601      	mov	r1, r0
 8009362:	4b05      	ldr	r3, [pc, #20]	; (8009378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	0b5b      	lsrs	r3, r3, #13
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	4a03      	ldr	r2, [pc, #12]	; (800937c <HAL_RCC_GetPCLK2Freq+0x24>)
 800936e:	5cd3      	ldrb	r3, [r2, r3]
 8009370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009374:	4618      	mov	r0, r3
 8009376:	bd80      	pop	{r7, pc}
 8009378:	40023800 	.word	0x40023800
 800937c:	080116fc 	.word	0x080116fc

08009380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e056      	b.n	8009440 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7fc fa6b 	bl	8005888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	431a      	orrs	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	ea42 0103 	orr.w	r1, r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	0c1b      	lsrs	r3, r3, #16
 8009410:	f003 0104 	and.w	r1, r3, #4
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69da      	ldr	r2, [r3, #28]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800942e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009462:	2b01      	cmp	r3, #1
 8009464:	d101      	bne.n	800946a <HAL_SPI_Transmit+0x22>
 8009466:	2302      	movs	r3, #2
 8009468:	e11e      	b.n	80096a8 <HAL_SPI_Transmit+0x260>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009472:	f7fd f8db 	bl	800662c <HAL_GetTick>
 8009476:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d002      	beq.n	800948e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009488:	2302      	movs	r3, #2
 800948a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800948c:	e103      	b.n	8009696 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <HAL_SPI_Transmit+0x52>
 8009494:	88fb      	ldrh	r3, [r7, #6]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800949e:	e0fa      	b.n	8009696 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2203      	movs	r2, #3
 80094a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	88fa      	ldrh	r2, [r7, #6]
 80094b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e6:	d107      	bne.n	80094f8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d007      	beq.n	8009516 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800951e:	d14b      	bne.n	80095b8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <HAL_SPI_Transmit+0xe6>
 8009528:	8afb      	ldrh	r3, [r7, #22]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d13e      	bne.n	80095ac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	881a      	ldrh	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	1c9a      	adds	r2, r3, #2
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009548:	b29b      	uxth	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009552:	e02b      	b.n	80095ac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b02      	cmp	r3, #2
 8009560:	d112      	bne.n	8009588 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	881a      	ldrh	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	1c9a      	adds	r2, r3, #2
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	86da      	strh	r2, [r3, #54]	; 0x36
 8009586:	e011      	b.n	80095ac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009588:	f7fd f850 	bl	800662c <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d803      	bhi.n	80095a0 <HAL_SPI_Transmit+0x158>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d102      	bne.n	80095a6 <HAL_SPI_Transmit+0x15e>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095aa:	e074      	b.n	8009696 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1ce      	bne.n	8009554 <HAL_SPI_Transmit+0x10c>
 80095b6:	e04c      	b.n	8009652 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <HAL_SPI_Transmit+0x17e>
 80095c0:	8afb      	ldrh	r3, [r7, #22]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d140      	bne.n	8009648 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	330c      	adds	r3, #12
 80095d0:	7812      	ldrb	r2, [r2, #0]
 80095d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80095ec:	e02c      	b.n	8009648 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d113      	bne.n	8009624 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	7812      	ldrb	r2, [r2, #0]
 8009608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009618:	b29b      	uxth	r3, r3
 800961a:	3b01      	subs	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	86da      	strh	r2, [r3, #54]	; 0x36
 8009622:	e011      	b.n	8009648 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009624:	f7fd f802 	bl	800662c <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d803      	bhi.n	800963c <HAL_SPI_Transmit+0x1f4>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d102      	bne.n	8009642 <HAL_SPI_Transmit+0x1fa>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009646:	e026      	b.n	8009696 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800964c:	b29b      	uxth	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1cd      	bne.n	80095ee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 fb54 	bl	8009d04 <SPI_EndRxTxTransaction>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2220      	movs	r2, #32
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009670:	2300      	movs	r3, #0
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	613b      	str	r3, [r7, #16]
 8009684:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	77fb      	strb	r3, [r7, #31]
 8009692:	e000      	b.n	8009696 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3720      	adds	r7, #32
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08c      	sub	sp, #48	; 0x30
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096be:	2301      	movs	r3, #1
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_SPI_TransmitReceive+0x26>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e18a      	b.n	80099ec <HAL_SPI_TransmitReceive+0x33c>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096de:	f7fc ffa5 	bl	800662c <HAL_GetTick>
 80096e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80096f4:	887b      	ldrh	r3, [r7, #2]
 80096f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d00f      	beq.n	8009720 <HAL_SPI_TransmitReceive+0x70>
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009706:	d107      	bne.n	8009718 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <HAL_SPI_TransmitReceive+0x68>
 8009710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009714:	2b04      	cmp	r3, #4
 8009716:	d003      	beq.n	8009720 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009718:	2302      	movs	r3, #2
 800971a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800971e:	e15b      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d005      	beq.n	8009732 <HAL_SPI_TransmitReceive+0x82>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <HAL_SPI_TransmitReceive+0x82>
 800972c:	887b      	ldrh	r3, [r7, #2]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d103      	bne.n	800973a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009738:	e14e      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b04      	cmp	r3, #4
 8009744:	d003      	beq.n	800974e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2205      	movs	r2, #5
 800974a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	887a      	ldrh	r2, [r7, #2]
 800975e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	887a      	ldrh	r2, [r7, #2]
 8009764:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	887a      	ldrh	r2, [r7, #2]
 8009770:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	887a      	ldrh	r2, [r7, #2]
 8009776:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d007      	beq.n	80097a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097aa:	d178      	bne.n	800989e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_SPI_TransmitReceive+0x10a>
 80097b4:	8b7b      	ldrh	r3, [r7, #26]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d166      	bne.n	8009888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	881a      	ldrh	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	1c9a      	adds	r2, r3, #2
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	b29a      	uxth	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097de:	e053      	b.n	8009888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d11b      	bne.n	8009826 <HAL_SPI_TransmitReceive+0x176>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d016      	beq.n	8009826 <HAL_SPI_TransmitReceive+0x176>
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d113      	bne.n	8009826 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009802:	881a      	ldrh	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	1c9a      	adds	r2, r3, #2
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b01      	cmp	r3, #1
 8009832:	d119      	bne.n	8009868 <HAL_SPI_TransmitReceive+0x1b8>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009838:	b29b      	uxth	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d014      	beq.n	8009868 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	b292      	uxth	r2, r2
 800984a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	1c9a      	adds	r2, r3, #2
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009864:	2301      	movs	r3, #1
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009868:	f7fc fee0 	bl	800662c <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009874:	429a      	cmp	r2, r3
 8009876:	d807      	bhi.n	8009888 <HAL_SPI_TransmitReceive+0x1d8>
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d003      	beq.n	8009888 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009886:	e0a7      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800988c:	b29b      	uxth	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1a6      	bne.n	80097e0 <HAL_SPI_TransmitReceive+0x130>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1a1      	bne.n	80097e0 <HAL_SPI_TransmitReceive+0x130>
 800989c:	e07c      	b.n	8009998 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_SPI_TransmitReceive+0x1fc>
 80098a6:	8b7b      	ldrh	r3, [r7, #26]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d16b      	bne.n	8009984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	330c      	adds	r3, #12
 80098b6:	7812      	ldrb	r2, [r2, #0]
 80098b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098d2:	e057      	b.n	8009984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0302 	and.w	r3, r3, #2
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d11c      	bne.n	800991c <HAL_SPI_TransmitReceive+0x26c>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <HAL_SPI_TransmitReceive+0x26c>
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d114      	bne.n	800991c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	330c      	adds	r3, #12
 80098fc:	7812      	ldrb	r2, [r2, #0]
 80098fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800990e:	b29b      	uxth	r3, r3
 8009910:	3b01      	subs	r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b01      	cmp	r3, #1
 8009928:	d119      	bne.n	800995e <HAL_SPI_TransmitReceive+0x2ae>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800992e:	b29b      	uxth	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d014      	beq.n	800995e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800995a:	2301      	movs	r3, #1
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800995e:	f7fc fe65 	bl	800662c <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800996a:	429a      	cmp	r2, r3
 800996c:	d803      	bhi.n	8009976 <HAL_SPI_TransmitReceive+0x2c6>
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009974:	d102      	bne.n	800997c <HAL_SPI_TransmitReceive+0x2cc>
 8009976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009982:	e029      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1a2      	bne.n	80098d4 <HAL_SPI_TransmitReceive+0x224>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009992:	b29b      	uxth	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d19d      	bne.n	80098d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f9b1 	bl	8009d04 <SPI_EndRxTxTransaction>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2220      	movs	r2, #32
 80099b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80099b4:	e010      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10b      	bne.n	80099d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	617b      	str	r3, [r7, #20]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	e000      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80099d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3730      	adds	r7, #48	; 0x30
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	099b      	lsrs	r3, r3, #6
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10f      	bne.n	8009a38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	099b      	lsrs	r3, r3, #6
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d004      	beq.n	8009a38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
    return;
 8009a36:	e0d8      	b.n	8009bea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00a      	beq.n	8009a5a <HAL_SPI_IRQHandler+0x66>
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	09db      	lsrs	r3, r3, #7
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	4798      	blx	r3
    return;
 8009a58:	e0c7      	b.n	8009bea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	095b      	lsrs	r3, r3, #5
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10c      	bne.n	8009a80 <HAL_SPI_IRQHandler+0x8c>
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	099b      	lsrs	r3, r3, #6
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80b5 	beq.w	8009bea <HAL_SPI_IRQHandler+0x1f6>
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	095b      	lsrs	r3, r3, #5
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 80ae 	beq.w	8009bea <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	099b      	lsrs	r3, r3, #6
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d023      	beq.n	8009ae2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d011      	beq.n	8009aca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aaa:	f043 0204 	orr.w	r2, r3, #4
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	617b      	str	r3, [r7, #20]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	e00b      	b.n	8009ae2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aca:	2300      	movs	r3, #0
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	613b      	str	r3, [r7, #16]
 8009ade:	693b      	ldr	r3, [r7, #16]
        return;
 8009ae0:	e083      	b.n	8009bea <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	095b      	lsrs	r3, r3, #5
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d014      	beq.n	8009b18 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af2:	f043 0201 	orr.w	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b28:	f043 0208 	orr.w	r2, r3, #8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b30:	2300      	movs	r3, #0
 8009b32:	60bb      	str	r3, [r7, #8]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	60bb      	str	r3, [r7, #8]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d050      	beq.n	8009be8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b54:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <HAL_SPI_IRQHandler+0x17e>
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d034      	beq.n	8009bdc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0203 	bic.w	r2, r2, #3
 8009b80:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d011      	beq.n	8009bae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8e:	4a18      	ldr	r2, [pc, #96]	; (8009bf0 <HAL_SPI_IRQHandler+0x1fc>)
 8009b90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fd fb6e 	bl	8007278 <HAL_DMA_Abort_IT>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d005      	beq.n	8009bae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d016      	beq.n	8009be4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bba:	4a0d      	ldr	r2, [pc, #52]	; (8009bf0 <HAL_SPI_IRQHandler+0x1fc>)
 8009bbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fd fb58 	bl	8007278 <HAL_DMA_Abort_IT>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009bda:	e003      	b.n	8009be4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f809 	bl	8009bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009be2:	e000      	b.n	8009be6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009be4:	bf00      	nop
    return;
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
  }
}
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	08009c09 	.word	0x08009c09

08009bf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff ffe6 	bl	8009bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c40:	e04c      	b.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d048      	beq.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009c4a:	f7fc fcef 	bl	800662c <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d902      	bls.n	8009c60 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d13d      	bne.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c78:	d111      	bne.n	8009c9e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c82:	d004      	beq.n	8009c8e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c8c:	d107      	bne.n	8009c9e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca6:	d10f      	bne.n	8009cc8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e00f      	b.n	8009cfc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689a      	ldr	r2, [r3, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	bf0c      	ite	eq
 8009cec:	2301      	moveq	r3, #1
 8009cee:	2300      	movne	r3, #0
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d1a3      	bne.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af02      	add	r7, sp, #8
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d10:	4b1b      	ldr	r3, [pc, #108]	; (8009d80 <SPI_EndRxTxTransaction+0x7c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a1b      	ldr	r2, [pc, #108]	; (8009d84 <SPI_EndRxTxTransaction+0x80>)
 8009d16:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1a:	0d5b      	lsrs	r3, r3, #21
 8009d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d20:	fb02 f303 	mul.w	r3, r2, r3
 8009d24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d2e:	d112      	bne.n	8009d56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2200      	movs	r2, #0
 8009d38:	2180      	movs	r1, #128	; 0x80
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff ff78 	bl	8009c30 <SPI_WaitFlagStateUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d016      	beq.n	8009d74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4a:	f043 0220 	orr.w	r2, r3, #32
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e00f      	b.n	8009d76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d0f2      	beq.n	8009d56 <SPI_EndRxTxTransaction+0x52>
 8009d70:	e000      	b.n	8009d74 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d72:	bf00      	nop
  }

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	2000009c 	.word	0x2000009c
 8009d84:	165e9f81 	.word	0x165e9f81

08009d88 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e034      	b.n	8009e08 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7f8 fef2 	bl	8002b9c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f001 fdaa 	bl	800b91c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	f001 fdf4 	bl	800b9c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6858      	ldr	r0, [r3, #4]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	f001 fe29 	bl	800ba3c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	6892      	ldr	r2, [r2, #8]
 8009df2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	6892      	ldr	r2, [r2, #8]
 8009dfe:	f041 0101 	orr.w	r1, r1, #1
 8009e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e01d      	b.n	8009e5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fc f934 	bl	80060a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f000 fb72 	bl	800a538 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2202      	movs	r2, #2
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	f003 0307 	and.w	r3, r3, #7
 8009e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b06      	cmp	r3, #6
 8009e86:	d007      	beq.n	8009e98 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68da      	ldr	r2, [r3, #12]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 0307 	and.w	r3, r3, #7
 8009ed0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b06      	cmp	r3, #6
 8009ed6:	d007      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0201 	orr.w	r2, r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e01d      	b.n	8009f44 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f815 	bl	8009f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4619      	mov	r1, r3
 8009f34:	4610      	mov	r0, r2
 8009f36:	f000 faff 	bl	800a538 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 fdca 	bl	800ab0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <HAL_TIM_PWM_Start+0x74>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d004      	beq.n	8009f8c <HAL_TIM_PWM_Start+0x2c>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <HAL_TIM_PWM_Start+0x78>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d101      	bne.n	8009f90 <HAL_TIM_PWM_Start+0x30>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e000      	b.n	8009f92 <HAL_TIM_PWM_Start+0x32>
 8009f90:	2300      	movs	r3, #0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b06      	cmp	r3, #6
 8009fb6:	d007      	beq.n	8009fc8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f042 0201 	orr.w	r2, r2, #1
 8009fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400

08009fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d122      	bne.n	800a038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d11b      	bne.n	800a038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0202 	mvn.w	r2, #2
 800a008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa6b 	bl	800a4fa <HAL_TIM_IC_CaptureCallback>
 800a024:	e005      	b.n	800a032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa5d 	bl	800a4e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa6e 	bl	800a50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b04      	cmp	r3, #4
 800a044:	d122      	bne.n	800a08c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d11b      	bne.n	800a08c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0204 	mvn.w	r2, #4
 800a05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa41 	bl	800a4fa <HAL_TIM_IC_CaptureCallback>
 800a078:	e005      	b.n	800a086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa33 	bl	800a4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fa44 	bl	800a50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b08      	cmp	r3, #8
 800a098:	d122      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d11b      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0208 	mvn.w	r2, #8
 800a0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2204      	movs	r2, #4
 800a0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fa17 	bl	800a4fa <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa09 	bl	800a4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fa1a 	bl	800a50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b10      	cmp	r3, #16
 800a0ec:	d122      	bne.n	800a134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b10      	cmp	r3, #16
 800a0fa:	d11b      	bne.n	800a134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0210 	mvn.w	r2, #16
 800a104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2208      	movs	r2, #8
 800a10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f9ed 	bl	800a4fa <HAL_TIM_IC_CaptureCallback>
 800a120:	e005      	b.n	800a12e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f9df 	bl	800a4e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f9f0 	bl	800a50e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d10e      	bne.n	800a160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d107      	bne.n	800a160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0201 	mvn.w	r2, #1
 800a158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7fb fae0 	bl	8005720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d10e      	bne.n	800a18c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a178:	2b80      	cmp	r3, #128	; 0x80
 800a17a:	d107      	bne.n	800a18c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fdbe 	bl	800ad08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d10e      	bne.n	800a1b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a4:	2b40      	cmp	r3, #64	; 0x40
 800a1a6:	d107      	bne.n	800a1b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f9b5 	bl	800a522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d10e      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f003 0320 	and.w	r3, r3, #32
 800a1d0:	2b20      	cmp	r3, #32
 800a1d2:	d107      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f06f 0220 	mvn.w	r2, #32
 800a1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fd88 	bl	800acf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a202:	2302      	movs	r3, #2
 800a204:	e0b4      	b.n	800a370 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2202      	movs	r2, #2
 800a212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b0c      	cmp	r3, #12
 800a21a:	f200 809f 	bhi.w	800a35c <HAL_TIM_PWM_ConfigChannel+0x170>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a259 	.word	0x0800a259
 800a228:	0800a35d 	.word	0x0800a35d
 800a22c:	0800a35d 	.word	0x0800a35d
 800a230:	0800a35d 	.word	0x0800a35d
 800a234:	0800a299 	.word	0x0800a299
 800a238:	0800a35d 	.word	0x0800a35d
 800a23c:	0800a35d 	.word	0x0800a35d
 800a240:	0800a35d 	.word	0x0800a35d
 800a244:	0800a2db 	.word	0x0800a2db
 800a248:	0800a35d 	.word	0x0800a35d
 800a24c:	0800a35d 	.word	0x0800a35d
 800a250:	0800a35d 	.word	0x0800a35d
 800a254:	0800a31b 	.word	0x0800a31b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fa0a 	bl	800a678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f042 0208 	orr.w	r2, r2, #8
 800a272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	699a      	ldr	r2, [r3, #24]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0204 	bic.w	r2, r2, #4
 800a282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6999      	ldr	r1, [r3, #24]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	691a      	ldr	r2, [r3, #16]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	619a      	str	r2, [r3, #24]
      break;
 800a296:	e062      	b.n	800a35e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fa5a 	bl	800a758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	699a      	ldr	r2, [r3, #24]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6999      	ldr	r1, [r3, #24]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	021a      	lsls	r2, r3, #8
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	619a      	str	r2, [r3, #24]
      break;
 800a2d8:	e041      	b.n	800a35e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 faaf 	bl	800a844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	69da      	ldr	r2, [r3, #28]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f042 0208 	orr.w	r2, r2, #8
 800a2f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	69da      	ldr	r2, [r3, #28]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0204 	bic.w	r2, r2, #4
 800a304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69d9      	ldr	r1, [r3, #28]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	61da      	str	r2, [r3, #28]
      break;
 800a318:	e021      	b.n	800a35e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68b9      	ldr	r1, [r7, #8]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fb03 	bl	800a92c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69da      	ldr	r2, [r3, #28]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69d9      	ldr	r1, [r3, #28]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	021a      	lsls	r2, r3, #8
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	61da      	str	r2, [r3, #28]
      break;
 800a35a:	e000      	b.n	800a35e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a35c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d101      	bne.n	800a390 <HAL_TIM_ConfigClockSource+0x18>
 800a38c:	2302      	movs	r3, #2
 800a38e:	e0a6      	b.n	800a4de <HAL_TIM_ConfigClockSource+0x166>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b40      	cmp	r3, #64	; 0x40
 800a3c6:	d067      	beq.n	800a498 <HAL_TIM_ConfigClockSource+0x120>
 800a3c8:	2b40      	cmp	r3, #64	; 0x40
 800a3ca:	d80b      	bhi.n	800a3e4 <HAL_TIM_ConfigClockSource+0x6c>
 800a3cc:	2b10      	cmp	r3, #16
 800a3ce:	d073      	beq.n	800a4b8 <HAL_TIM_ConfigClockSource+0x140>
 800a3d0:	2b10      	cmp	r3, #16
 800a3d2:	d802      	bhi.n	800a3da <HAL_TIM_ConfigClockSource+0x62>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d06f      	beq.n	800a4b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a3d8:	e078      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	d06c      	beq.n	800a4b8 <HAL_TIM_ConfigClockSource+0x140>
 800a3de:	2b30      	cmp	r3, #48	; 0x30
 800a3e0:	d06a      	beq.n	800a4b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a3e2:	e073      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3e4:	2b70      	cmp	r3, #112	; 0x70
 800a3e6:	d00d      	beq.n	800a404 <HAL_TIM_ConfigClockSource+0x8c>
 800a3e8:	2b70      	cmp	r3, #112	; 0x70
 800a3ea:	d804      	bhi.n	800a3f6 <HAL_TIM_ConfigClockSource+0x7e>
 800a3ec:	2b50      	cmp	r3, #80	; 0x50
 800a3ee:	d033      	beq.n	800a458 <HAL_TIM_ConfigClockSource+0xe0>
 800a3f0:	2b60      	cmp	r3, #96	; 0x60
 800a3f2:	d041      	beq.n	800a478 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a3f4:	e06a      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fa:	d066      	beq.n	800a4ca <HAL_TIM_ConfigClockSource+0x152>
 800a3fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a400:	d017      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a402:	e063      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	6899      	ldr	r1, [r3, #8]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	f000 fb5a 	bl	800aacc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a426:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	609a      	str	r2, [r3, #8]
      break;
 800a430:	e04c      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6899      	ldr	r1, [r3, #8]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f000 fb43 	bl	800aacc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689a      	ldr	r2, [r3, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a454:	609a      	str	r2, [r3, #8]
      break;
 800a456:	e039      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	6859      	ldr	r1, [r3, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	461a      	mov	r2, r3
 800a466:	f000 fab7 	bl	800a9d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2150      	movs	r1, #80	; 0x50
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fb10 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a476:	e029      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6818      	ldr	r0, [r3, #0]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	6859      	ldr	r1, [r3, #4]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	461a      	mov	r2, r3
 800a486:	f000 fad6 	bl	800aa36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2160      	movs	r1, #96	; 0x60
 800a490:	4618      	mov	r0, r3
 800a492:	f000 fb00 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a496:	e019      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	6859      	ldr	r1, [r3, #4]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f000 fa97 	bl	800a9d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2140      	movs	r1, #64	; 0x40
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 faf0 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a4b6:	e009      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f000 fae7 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a4c8:	e000      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a4ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
	...

0800a538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a40      	ldr	r2, [pc, #256]	; (800a64c <TIM_Base_SetConfig+0x114>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a556:	d00f      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a3d      	ldr	r2, [pc, #244]	; (800a650 <TIM_Base_SetConfig+0x118>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d00b      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a3c      	ldr	r2, [pc, #240]	; (800a654 <TIM_Base_SetConfig+0x11c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d007      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a3b      	ldr	r2, [pc, #236]	; (800a658 <TIM_Base_SetConfig+0x120>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d003      	beq.n	800a578 <TIM_Base_SetConfig+0x40>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a3a      	ldr	r2, [pc, #232]	; (800a65c <TIM_Base_SetConfig+0x124>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d108      	bne.n	800a58a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4313      	orrs	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a2f      	ldr	r2, [pc, #188]	; (800a64c <TIM_Base_SetConfig+0x114>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d02b      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a598:	d027      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a2c      	ldr	r2, [pc, #176]	; (800a650 <TIM_Base_SetConfig+0x118>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d023      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a2b      	ldr	r2, [pc, #172]	; (800a654 <TIM_Base_SetConfig+0x11c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d01f      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a2a      	ldr	r2, [pc, #168]	; (800a658 <TIM_Base_SetConfig+0x120>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d01b      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a29      	ldr	r2, [pc, #164]	; (800a65c <TIM_Base_SetConfig+0x124>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d017      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a28      	ldr	r2, [pc, #160]	; (800a660 <TIM_Base_SetConfig+0x128>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d013      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a27      	ldr	r2, [pc, #156]	; (800a664 <TIM_Base_SetConfig+0x12c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00f      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a26      	ldr	r2, [pc, #152]	; (800a668 <TIM_Base_SetConfig+0x130>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00b      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a25      	ldr	r2, [pc, #148]	; (800a66c <TIM_Base_SetConfig+0x134>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d007      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a24      	ldr	r2, [pc, #144]	; (800a670 <TIM_Base_SetConfig+0x138>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d003      	beq.n	800a5ea <TIM_Base_SetConfig+0xb2>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a23      	ldr	r2, [pc, #140]	; (800a674 <TIM_Base_SetConfig+0x13c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d108      	bne.n	800a5fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a0a      	ldr	r2, [pc, #40]	; (800a64c <TIM_Base_SetConfig+0x114>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d003      	beq.n	800a630 <TIM_Base_SetConfig+0xf8>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a0c      	ldr	r2, [pc, #48]	; (800a65c <TIM_Base_SetConfig+0x124>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d103      	bne.n	800a638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	691a      	ldr	r2, [r3, #16]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	615a      	str	r2, [r3, #20]
}
 800a63e:	bf00      	nop
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	40010000 	.word	0x40010000
 800a650:	40000400 	.word	0x40000400
 800a654:	40000800 	.word	0x40000800
 800a658:	40000c00 	.word	0x40000c00
 800a65c:	40010400 	.word	0x40010400
 800a660:	40014000 	.word	0x40014000
 800a664:	40014400 	.word	0x40014400
 800a668:	40014800 	.word	0x40014800
 800a66c:	40001800 	.word	0x40001800
 800a670:	40001c00 	.word	0x40001c00
 800a674:	40002000 	.word	0x40002000

0800a678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a678:	b480      	push	{r7}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	f023 0201 	bic.w	r2, r3, #1
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0303 	bic.w	r3, r3, #3
 800a6ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f023 0302 	bic.w	r3, r3, #2
 800a6c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a20      	ldr	r2, [pc, #128]	; (800a750 <TIM_OC1_SetConfig+0xd8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d003      	beq.n	800a6dc <TIM_OC1_SetConfig+0x64>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a1f      	ldr	r2, [pc, #124]	; (800a754 <TIM_OC1_SetConfig+0xdc>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d10c      	bne.n	800a6f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f023 0308 	bic.w	r3, r3, #8
 800a6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f023 0304 	bic.w	r3, r3, #4
 800a6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a15      	ldr	r2, [pc, #84]	; (800a750 <TIM_OC1_SetConfig+0xd8>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d003      	beq.n	800a706 <TIM_OC1_SetConfig+0x8e>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a14      	ldr	r2, [pc, #80]	; (800a754 <TIM_OC1_SetConfig+0xdc>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d111      	bne.n	800a72a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a70c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	621a      	str	r2, [r3, #32]
}
 800a744:	bf00      	nop
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	40010000 	.word	0x40010000
 800a754:	40010400 	.word	0x40010400

0800a758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	f023 0210 	bic.w	r2, r3, #16
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f023 0320 	bic.w	r3, r3, #32
 800a7a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a22      	ldr	r2, [pc, #136]	; (800a83c <TIM_OC2_SetConfig+0xe4>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d003      	beq.n	800a7c0 <TIM_OC2_SetConfig+0x68>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a21      	ldr	r2, [pc, #132]	; (800a840 <TIM_OC2_SetConfig+0xe8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d10d      	bne.n	800a7dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	011b      	lsls	r3, r3, #4
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a17      	ldr	r2, [pc, #92]	; (800a83c <TIM_OC2_SetConfig+0xe4>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d003      	beq.n	800a7ec <TIM_OC2_SetConfig+0x94>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a16      	ldr	r2, [pc, #88]	; (800a840 <TIM_OC2_SetConfig+0xe8>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d113      	bne.n	800a814 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	4313      	orrs	r3, r2
 800a806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	4313      	orrs	r3, r2
 800a812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	621a      	str	r2, [r3, #32]
}
 800a82e:	bf00      	nop
 800a830:	371c      	adds	r7, #28
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	40010000 	.word	0x40010000
 800a840:	40010400 	.word	0x40010400

0800a844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a844:	b480      	push	{r7}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a88c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	4313      	orrs	r3, r2
 800a898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a21      	ldr	r2, [pc, #132]	; (800a924 <TIM_OC3_SetConfig+0xe0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d003      	beq.n	800a8aa <TIM_OC3_SetConfig+0x66>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a20      	ldr	r2, [pc, #128]	; (800a928 <TIM_OC3_SetConfig+0xe4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d10d      	bne.n	800a8c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	021b      	lsls	r3, r3, #8
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a16      	ldr	r2, [pc, #88]	; (800a924 <TIM_OC3_SetConfig+0xe0>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d003      	beq.n	800a8d6 <TIM_OC3_SetConfig+0x92>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a15      	ldr	r2, [pc, #84]	; (800a928 <TIM_OC3_SetConfig+0xe4>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d113      	bne.n	800a8fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	011b      	lsls	r3, r3, #4
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	621a      	str	r2, [r3, #32]
}
 800a918:	bf00      	nop
 800a91a:	371c      	adds	r7, #28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	40010000 	.word	0x40010000
 800a928:	40010400 	.word	0x40010400

0800a92c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	031b      	lsls	r3, r3, #12
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a12      	ldr	r2, [pc, #72]	; (800a9d0 <TIM_OC4_SetConfig+0xa4>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d003      	beq.n	800a994 <TIM_OC4_SetConfig+0x68>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a11      	ldr	r2, [pc, #68]	; (800a9d4 <TIM_OC4_SetConfig+0xa8>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d109      	bne.n	800a9a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a99a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	019b      	lsls	r3, r3, #6
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	621a      	str	r2, [r3, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	40010000 	.word	0x40010000
 800a9d4:	40010400 	.word	0x40010400

0800a9d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	f023 0201 	bic.w	r2, r3, #1
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f023 030a 	bic.w	r3, r3, #10
 800aa14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	621a      	str	r2, [r3, #32]
}
 800aa2a:	bf00      	nop
 800aa2c:	371c      	adds	r7, #28
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b087      	sub	sp, #28
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	f023 0210 	bic.w	r2, r3, #16
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	031b      	lsls	r3, r3, #12
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	621a      	str	r2, [r3, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f043 0307 	orr.w	r3, r3, #7
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	609a      	str	r2, [r3, #8]
}
 800aac0:	bf00      	nop
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	021a      	lsls	r2, r3, #8
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	609a      	str	r2, [r3, #8]
}
 800ab00:	bf00      	nop
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f003 031f 	and.w	r3, r3, #31
 800ab1e:	2201      	movs	r2, #1
 800ab20:	fa02 f303 	lsl.w	r3, r2, r3
 800ab24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a1a      	ldr	r2, [r3, #32]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	43db      	mvns	r3, r3
 800ab2e:	401a      	ands	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6a1a      	ldr	r2, [r3, #32]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f003 031f 	and.w	r3, r3, #31
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	fa01 f303 	lsl.w	r3, r1, r3
 800ab44:	431a      	orrs	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e05a      	b.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a21      	ldr	r2, [pc, #132]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d022      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abbc:	d01d      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a1d      	ldr	r2, [pc, #116]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d018      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a1a      	ldr	r2, [pc, #104]	; (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00e      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a18      	ldr	r2, [pc, #96]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d009      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d004      	beq.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a15      	ldr	r2, [pc, #84]	; (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d10c      	bne.n	800ac14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40000400 	.word	0x40000400
 800ac3c:	40000800 	.word	0x40000800
 800ac40:	40000c00 	.word	0x40000c00
 800ac44:	40010400 	.word	0x40010400
 800ac48:	40014000 	.word	0x40014000
 800ac4c:	40001800 	.word	0x40001800

0800ac50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d101      	bne.n	800ac6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	e03d      	b.n	800ace8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e03f      	b.n	800adae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d106      	bne.n	800ad48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7fb fb30 	bl	80063a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2224      	movs	r2, #36	; 0x24
 800ad4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fa5f 	bl	800b224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	691a      	ldr	r2, [r3, #16]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695a      	ldr	r2, [r3, #20]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b088      	sub	sp, #32
 800adba:	af02      	add	r7, sp, #8
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	603b      	str	r3, [r7, #0]
 800adc2:	4613      	mov	r3, r2
 800adc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b20      	cmp	r3, #32
 800add4:	f040 8083 	bne.w	800aede <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <HAL_UART_Transmit+0x2e>
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e07b      	b.n	800aee0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d101      	bne.n	800adf6 <HAL_UART_Transmit+0x40>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e074      	b.n	800aee0 <HAL_UART_Transmit+0x12a>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2221      	movs	r2, #33	; 0x21
 800ae08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ae0c:	f7fb fc0e 	bl	800662c <HAL_GetTick>
 800ae10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	88fa      	ldrh	r2, [r7, #6]
 800ae16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	88fa      	ldrh	r2, [r7, #6]
 800ae1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ae26:	e042      	b.n	800aeae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3e:	d122      	bne.n	800ae86 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	2200      	movs	r2, #0
 800ae48:	2180      	movs	r1, #128	; 0x80
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 f96c 	bl	800b128 <UART_WaitOnFlagUntilTimeout>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e042      	b.n	800aee0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	3302      	adds	r3, #2
 800ae7a:	60bb      	str	r3, [r7, #8]
 800ae7c:	e017      	b.n	800aeae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	3301      	adds	r3, #1
 800ae82:	60bb      	str	r3, [r7, #8]
 800ae84:	e013      	b.n	800aeae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2180      	movs	r1, #128	; 0x80
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f949 	bl	800b128 <UART_WaitOnFlagUntilTimeout>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e01f      	b.n	800aee0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	60ba      	str	r2, [r7, #8]
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1b7      	bne.n	800ae28 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2200      	movs	r2, #0
 800aec0:	2140      	movs	r1, #64	; 0x40
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 f930 	bl	800b128 <UART_WaitOnFlagUntilTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800aece:	2303      	movs	r3, #3
 800aed0:	e006      	b.n	800aee0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e000      	b.n	800aee0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800aede:	2302      	movs	r3, #2
  }
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b20      	cmp	r3, #32
 800af00:	d166      	bne.n	800afd0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <HAL_UART_Receive_DMA+0x26>
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e05f      	b.n	800afd2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_UART_Receive_DMA+0x38>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e058      	b.n	800afd2 <HAL_UART_Receive_DMA+0xea>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	88fa      	ldrh	r2, [r7, #6]
 800af32:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2222      	movs	r2, #34	; 0x22
 800af3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af46:	4a25      	ldr	r2, [pc, #148]	; (800afdc <HAL_UART_Receive_DMA+0xf4>)
 800af48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	4a24      	ldr	r2, [pc, #144]	; (800afe0 <HAL_UART_Receive_DMA+0xf8>)
 800af50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af56:	4a23      	ldr	r2, [pc, #140]	; (800afe4 <HAL_UART_Receive_DMA+0xfc>)
 800af58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5e:	2200      	movs	r2, #0
 800af60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3304      	adds	r3, #4
 800af72:	4619      	mov	r1, r3
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	88fb      	ldrh	r3, [r7, #6]
 800af7a:	f7fc f925 	bl	80071c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800af7e:	2300      	movs	r3, #0
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	613b      	str	r3, [r7, #16]
 800af92:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afaa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695a      	ldr	r2, [r3, #20]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f042 0201 	orr.w	r2, r2, #1
 800afba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695a      	ldr	r2, [r3, #20]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	e000      	b.n	800afd2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800afd0:	2302      	movs	r3, #2
  }
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	0800b011 	.word	0x0800b011
 800afe0:	0800b079 	.word	0x0800b079
 800afe4:	0800b095 	.word	0x0800b095

0800afe8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d11e      	bne.n	800b06a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b040:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	695a      	ldr	r2, [r3, #20]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0201 	bic.w	r2, r2, #1
 800b050:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	695a      	ldr	r2, [r3, #20]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b060:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2220      	movs	r2, #32
 800b066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7fa fae2 	bl	8005634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b070:	bf00      	nop
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff ffae 	bl	800afe8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b0:	2b80      	cmp	r3, #128	; 0x80
 800b0b2:	bf0c      	ite	eq
 800b0b4:	2301      	moveq	r3, #1
 800b0b6:	2300      	movne	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b21      	cmp	r3, #33	; 0x21
 800b0c6:	d108      	bne.n	800b0da <UART_DMAError+0x46>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b0d4:	68b8      	ldr	r0, [r7, #8]
 800b0d6:	f000 f871 	bl	800b1bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e4:	2b40      	cmp	r3, #64	; 0x40
 800b0e6:	bf0c      	ite	eq
 800b0e8:	2301      	moveq	r3, #1
 800b0ea:	2300      	movne	r3, #0
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b22      	cmp	r3, #34	; 0x22
 800b0fa:	d108      	bne.n	800b10e <UART_DMAError+0x7a>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2200      	movs	r2, #0
 800b106:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b108:	68b8      	ldr	r0, [r7, #8]
 800b10a:	f000 f86d 	bl	800b1e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b112:	f043 0210 	orr.w	r2, r3, #16
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b11a:	68b8      	ldr	r0, [r7, #8]
 800b11c:	f7ff ff6e 	bl	800affc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b120:	bf00      	nop
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	4613      	mov	r3, r2
 800b136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b138:	e02c      	b.n	800b194 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	d028      	beq.n	800b194 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d007      	beq.n	800b158 <UART_WaitOnFlagUntilTimeout+0x30>
 800b148:	f7fb fa70 	bl	800662c <HAL_GetTick>
 800b14c:	4602      	mov	r2, r0
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	429a      	cmp	r2, r3
 800b156:	d21d      	bcs.n	800b194 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b166:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	695a      	ldr	r2, [r3, #20]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0201 	bic.w	r2, r2, #1
 800b176:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2220      	movs	r2, #32
 800b184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e00f      	b.n	800b1b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4013      	ands	r3, r2
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	bf0c      	ite	eq
 800b1a4:	2301      	moveq	r3, #1
 800b1a6:	2300      	movne	r3, #0
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d0c3      	beq.n	800b13a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68da      	ldr	r2, [r3, #12]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b1d2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68da      	ldr	r2, [r3, #12]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 0201 	bic.w	r2, r2, #1
 800b20e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2220      	movs	r2, #32
 800b214:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	431a      	orrs	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	431a      	orrs	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	69db      	ldr	r3, [r3, #28]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b266:	f023 030c 	bic.w	r3, r3, #12
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	430b      	orrs	r3, r1
 800b272:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	699a      	ldr	r2, [r3, #24]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b292:	f040 818b 	bne.w	800b5ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4ac1      	ldr	r2, [pc, #772]	; (800b5a0 <UART_SetConfig+0x37c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d005      	beq.n	800b2ac <UART_SetConfig+0x88>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4abf      	ldr	r2, [pc, #764]	; (800b5a4 <UART_SetConfig+0x380>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	f040 80bd 	bne.w	800b426 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2ac:	f7fe f854 	bl	8009358 <HAL_RCC_GetPCLK2Freq>
 800b2b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	461d      	mov	r5, r3
 800b2b6:	f04f 0600 	mov.w	r6, #0
 800b2ba:	46a8      	mov	r8, r5
 800b2bc:	46b1      	mov	r9, r6
 800b2be:	eb18 0308 	adds.w	r3, r8, r8
 800b2c2:	eb49 0409 	adc.w	r4, r9, r9
 800b2c6:	4698      	mov	r8, r3
 800b2c8:	46a1      	mov	r9, r4
 800b2ca:	eb18 0805 	adds.w	r8, r8, r5
 800b2ce:	eb49 0906 	adc.w	r9, r9, r6
 800b2d2:	f04f 0100 	mov.w	r1, #0
 800b2d6:	f04f 0200 	mov.w	r2, #0
 800b2da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b2de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b2e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b2e6:	4688      	mov	r8, r1
 800b2e8:	4691      	mov	r9, r2
 800b2ea:	eb18 0005 	adds.w	r0, r8, r5
 800b2ee:	eb49 0106 	adc.w	r1, r9, r6
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	461d      	mov	r5, r3
 800b2f8:	f04f 0600 	mov.w	r6, #0
 800b2fc:	196b      	adds	r3, r5, r5
 800b2fe:	eb46 0406 	adc.w	r4, r6, r6
 800b302:	461a      	mov	r2, r3
 800b304:	4623      	mov	r3, r4
 800b306:	f7f5 fcbf 	bl	8000c88 <__aeabi_uldivmod>
 800b30a:	4603      	mov	r3, r0
 800b30c:	460c      	mov	r4, r1
 800b30e:	461a      	mov	r2, r3
 800b310:	4ba5      	ldr	r3, [pc, #660]	; (800b5a8 <UART_SetConfig+0x384>)
 800b312:	fba3 2302 	umull	r2, r3, r3, r2
 800b316:	095b      	lsrs	r3, r3, #5
 800b318:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	461d      	mov	r5, r3
 800b320:	f04f 0600 	mov.w	r6, #0
 800b324:	46a9      	mov	r9, r5
 800b326:	46b2      	mov	sl, r6
 800b328:	eb19 0309 	adds.w	r3, r9, r9
 800b32c:	eb4a 040a 	adc.w	r4, sl, sl
 800b330:	4699      	mov	r9, r3
 800b332:	46a2      	mov	sl, r4
 800b334:	eb19 0905 	adds.w	r9, r9, r5
 800b338:	eb4a 0a06 	adc.w	sl, sl, r6
 800b33c:	f04f 0100 	mov.w	r1, #0
 800b340:	f04f 0200 	mov.w	r2, #0
 800b344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b348:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b34c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b350:	4689      	mov	r9, r1
 800b352:	4692      	mov	sl, r2
 800b354:	eb19 0005 	adds.w	r0, r9, r5
 800b358:	eb4a 0106 	adc.w	r1, sl, r6
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	461d      	mov	r5, r3
 800b362:	f04f 0600 	mov.w	r6, #0
 800b366:	196b      	adds	r3, r5, r5
 800b368:	eb46 0406 	adc.w	r4, r6, r6
 800b36c:	461a      	mov	r2, r3
 800b36e:	4623      	mov	r3, r4
 800b370:	f7f5 fc8a 	bl	8000c88 <__aeabi_uldivmod>
 800b374:	4603      	mov	r3, r0
 800b376:	460c      	mov	r4, r1
 800b378:	461a      	mov	r2, r3
 800b37a:	4b8b      	ldr	r3, [pc, #556]	; (800b5a8 <UART_SetConfig+0x384>)
 800b37c:	fba3 1302 	umull	r1, r3, r3, r2
 800b380:	095b      	lsrs	r3, r3, #5
 800b382:	2164      	movs	r1, #100	; 0x64
 800b384:	fb01 f303 	mul.w	r3, r1, r3
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	00db      	lsls	r3, r3, #3
 800b38c:	3332      	adds	r3, #50	; 0x32
 800b38e:	4a86      	ldr	r2, [pc, #536]	; (800b5a8 <UART_SetConfig+0x384>)
 800b390:	fba2 2303 	umull	r2, r3, r2, r3
 800b394:	095b      	lsrs	r3, r3, #5
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b39c:	4498      	add	r8, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	461d      	mov	r5, r3
 800b3a2:	f04f 0600 	mov.w	r6, #0
 800b3a6:	46a9      	mov	r9, r5
 800b3a8:	46b2      	mov	sl, r6
 800b3aa:	eb19 0309 	adds.w	r3, r9, r9
 800b3ae:	eb4a 040a 	adc.w	r4, sl, sl
 800b3b2:	4699      	mov	r9, r3
 800b3b4:	46a2      	mov	sl, r4
 800b3b6:	eb19 0905 	adds.w	r9, r9, r5
 800b3ba:	eb4a 0a06 	adc.w	sl, sl, r6
 800b3be:	f04f 0100 	mov.w	r1, #0
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3d2:	4689      	mov	r9, r1
 800b3d4:	4692      	mov	sl, r2
 800b3d6:	eb19 0005 	adds.w	r0, r9, r5
 800b3da:	eb4a 0106 	adc.w	r1, sl, r6
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	461d      	mov	r5, r3
 800b3e4:	f04f 0600 	mov.w	r6, #0
 800b3e8:	196b      	adds	r3, r5, r5
 800b3ea:	eb46 0406 	adc.w	r4, r6, r6
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	4623      	mov	r3, r4
 800b3f2:	f7f5 fc49 	bl	8000c88 <__aeabi_uldivmod>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4b6a      	ldr	r3, [pc, #424]	; (800b5a8 <UART_SetConfig+0x384>)
 800b3fe:	fba3 1302 	umull	r1, r3, r3, r2
 800b402:	095b      	lsrs	r3, r3, #5
 800b404:	2164      	movs	r1, #100	; 0x64
 800b406:	fb01 f303 	mul.w	r3, r1, r3
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	3332      	adds	r3, #50	; 0x32
 800b410:	4a65      	ldr	r2, [pc, #404]	; (800b5a8 <UART_SetConfig+0x384>)
 800b412:	fba2 2303 	umull	r2, r3, r2, r3
 800b416:	095b      	lsrs	r3, r3, #5
 800b418:	f003 0207 	and.w	r2, r3, #7
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4442      	add	r2, r8
 800b422:	609a      	str	r2, [r3, #8]
 800b424:	e26f      	b.n	800b906 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b426:	f7fd ff83 	bl	8009330 <HAL_RCC_GetPCLK1Freq>
 800b42a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	461d      	mov	r5, r3
 800b430:	f04f 0600 	mov.w	r6, #0
 800b434:	46a8      	mov	r8, r5
 800b436:	46b1      	mov	r9, r6
 800b438:	eb18 0308 	adds.w	r3, r8, r8
 800b43c:	eb49 0409 	adc.w	r4, r9, r9
 800b440:	4698      	mov	r8, r3
 800b442:	46a1      	mov	r9, r4
 800b444:	eb18 0805 	adds.w	r8, r8, r5
 800b448:	eb49 0906 	adc.w	r9, r9, r6
 800b44c:	f04f 0100 	mov.w	r1, #0
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b458:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b45c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b460:	4688      	mov	r8, r1
 800b462:	4691      	mov	r9, r2
 800b464:	eb18 0005 	adds.w	r0, r8, r5
 800b468:	eb49 0106 	adc.w	r1, r9, r6
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	461d      	mov	r5, r3
 800b472:	f04f 0600 	mov.w	r6, #0
 800b476:	196b      	adds	r3, r5, r5
 800b478:	eb46 0406 	adc.w	r4, r6, r6
 800b47c:	461a      	mov	r2, r3
 800b47e:	4623      	mov	r3, r4
 800b480:	f7f5 fc02 	bl	8000c88 <__aeabi_uldivmod>
 800b484:	4603      	mov	r3, r0
 800b486:	460c      	mov	r4, r1
 800b488:	461a      	mov	r2, r3
 800b48a:	4b47      	ldr	r3, [pc, #284]	; (800b5a8 <UART_SetConfig+0x384>)
 800b48c:	fba3 2302 	umull	r2, r3, r3, r2
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	461d      	mov	r5, r3
 800b49a:	f04f 0600 	mov.w	r6, #0
 800b49e:	46a9      	mov	r9, r5
 800b4a0:	46b2      	mov	sl, r6
 800b4a2:	eb19 0309 	adds.w	r3, r9, r9
 800b4a6:	eb4a 040a 	adc.w	r4, sl, sl
 800b4aa:	4699      	mov	r9, r3
 800b4ac:	46a2      	mov	sl, r4
 800b4ae:	eb19 0905 	adds.w	r9, r9, r5
 800b4b2:	eb4a 0a06 	adc.w	sl, sl, r6
 800b4b6:	f04f 0100 	mov.w	r1, #0
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4ca:	4689      	mov	r9, r1
 800b4cc:	4692      	mov	sl, r2
 800b4ce:	eb19 0005 	adds.w	r0, r9, r5
 800b4d2:	eb4a 0106 	adc.w	r1, sl, r6
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	461d      	mov	r5, r3
 800b4dc:	f04f 0600 	mov.w	r6, #0
 800b4e0:	196b      	adds	r3, r5, r5
 800b4e2:	eb46 0406 	adc.w	r4, r6, r6
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	4623      	mov	r3, r4
 800b4ea:	f7f5 fbcd 	bl	8000c88 <__aeabi_uldivmod>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	4b2c      	ldr	r3, [pc, #176]	; (800b5a8 <UART_SetConfig+0x384>)
 800b4f6:	fba3 1302 	umull	r1, r3, r3, r2
 800b4fa:	095b      	lsrs	r3, r3, #5
 800b4fc:	2164      	movs	r1, #100	; 0x64
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	3332      	adds	r3, #50	; 0x32
 800b508:	4a27      	ldr	r2, [pc, #156]	; (800b5a8 <UART_SetConfig+0x384>)
 800b50a:	fba2 2303 	umull	r2, r3, r2, r3
 800b50e:	095b      	lsrs	r3, r3, #5
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b516:	4498      	add	r8, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	461d      	mov	r5, r3
 800b51c:	f04f 0600 	mov.w	r6, #0
 800b520:	46a9      	mov	r9, r5
 800b522:	46b2      	mov	sl, r6
 800b524:	eb19 0309 	adds.w	r3, r9, r9
 800b528:	eb4a 040a 	adc.w	r4, sl, sl
 800b52c:	4699      	mov	r9, r3
 800b52e:	46a2      	mov	sl, r4
 800b530:	eb19 0905 	adds.w	r9, r9, r5
 800b534:	eb4a 0a06 	adc.w	sl, sl, r6
 800b538:	f04f 0100 	mov.w	r1, #0
 800b53c:	f04f 0200 	mov.w	r2, #0
 800b540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b544:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b548:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b54c:	4689      	mov	r9, r1
 800b54e:	4692      	mov	sl, r2
 800b550:	eb19 0005 	adds.w	r0, r9, r5
 800b554:	eb4a 0106 	adc.w	r1, sl, r6
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	461d      	mov	r5, r3
 800b55e:	f04f 0600 	mov.w	r6, #0
 800b562:	196b      	adds	r3, r5, r5
 800b564:	eb46 0406 	adc.w	r4, r6, r6
 800b568:	461a      	mov	r2, r3
 800b56a:	4623      	mov	r3, r4
 800b56c:	f7f5 fb8c 	bl	8000c88 <__aeabi_uldivmod>
 800b570:	4603      	mov	r3, r0
 800b572:	460c      	mov	r4, r1
 800b574:	461a      	mov	r2, r3
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <UART_SetConfig+0x384>)
 800b578:	fba3 1302 	umull	r1, r3, r3, r2
 800b57c:	095b      	lsrs	r3, r3, #5
 800b57e:	2164      	movs	r1, #100	; 0x64
 800b580:	fb01 f303 	mul.w	r3, r1, r3
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	3332      	adds	r3, #50	; 0x32
 800b58a:	4a07      	ldr	r2, [pc, #28]	; (800b5a8 <UART_SetConfig+0x384>)
 800b58c:	fba2 2303 	umull	r2, r3, r2, r3
 800b590:	095b      	lsrs	r3, r3, #5
 800b592:	f003 0207 	and.w	r2, r3, #7
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4442      	add	r2, r8
 800b59c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b59e:	e1b2      	b.n	800b906 <UART_SetConfig+0x6e2>
 800b5a0:	40011000 	.word	0x40011000
 800b5a4:	40011400 	.word	0x40011400
 800b5a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4ad7      	ldr	r2, [pc, #860]	; (800b910 <UART_SetConfig+0x6ec>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d005      	beq.n	800b5c2 <UART_SetConfig+0x39e>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4ad6      	ldr	r2, [pc, #856]	; (800b914 <UART_SetConfig+0x6f0>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	f040 80d1 	bne.w	800b764 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b5c2:	f7fd fec9 	bl	8009358 <HAL_RCC_GetPCLK2Freq>
 800b5c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	469a      	mov	sl, r3
 800b5cc:	f04f 0b00 	mov.w	fp, #0
 800b5d0:	46d0      	mov	r8, sl
 800b5d2:	46d9      	mov	r9, fp
 800b5d4:	eb18 0308 	adds.w	r3, r8, r8
 800b5d8:	eb49 0409 	adc.w	r4, r9, r9
 800b5dc:	4698      	mov	r8, r3
 800b5de:	46a1      	mov	r9, r4
 800b5e0:	eb18 080a 	adds.w	r8, r8, sl
 800b5e4:	eb49 090b 	adc.w	r9, r9, fp
 800b5e8:	f04f 0100 	mov.w	r1, #0
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b5f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b5f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b5fc:	4688      	mov	r8, r1
 800b5fe:	4691      	mov	r9, r2
 800b600:	eb1a 0508 	adds.w	r5, sl, r8
 800b604:	eb4b 0609 	adc.w	r6, fp, r9
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	4619      	mov	r1, r3
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	f04f 0300 	mov.w	r3, #0
 800b616:	f04f 0400 	mov.w	r4, #0
 800b61a:	0094      	lsls	r4, r2, #2
 800b61c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b620:	008b      	lsls	r3, r1, #2
 800b622:	461a      	mov	r2, r3
 800b624:	4623      	mov	r3, r4
 800b626:	4628      	mov	r0, r5
 800b628:	4631      	mov	r1, r6
 800b62a:	f7f5 fb2d 	bl	8000c88 <__aeabi_uldivmod>
 800b62e:	4603      	mov	r3, r0
 800b630:	460c      	mov	r4, r1
 800b632:	461a      	mov	r2, r3
 800b634:	4bb8      	ldr	r3, [pc, #736]	; (800b918 <UART_SetConfig+0x6f4>)
 800b636:	fba3 2302 	umull	r2, r3, r3, r2
 800b63a:	095b      	lsrs	r3, r3, #5
 800b63c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	469b      	mov	fp, r3
 800b644:	f04f 0c00 	mov.w	ip, #0
 800b648:	46d9      	mov	r9, fp
 800b64a:	46e2      	mov	sl, ip
 800b64c:	eb19 0309 	adds.w	r3, r9, r9
 800b650:	eb4a 040a 	adc.w	r4, sl, sl
 800b654:	4699      	mov	r9, r3
 800b656:	46a2      	mov	sl, r4
 800b658:	eb19 090b 	adds.w	r9, r9, fp
 800b65c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b660:	f04f 0100 	mov.w	r1, #0
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b66c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b670:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b674:	4689      	mov	r9, r1
 800b676:	4692      	mov	sl, r2
 800b678:	eb1b 0509 	adds.w	r5, fp, r9
 800b67c:	eb4c 060a 	adc.w	r6, ip, sl
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	4619      	mov	r1, r3
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	f04f 0400 	mov.w	r4, #0
 800b692:	0094      	lsls	r4, r2, #2
 800b694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b698:	008b      	lsls	r3, r1, #2
 800b69a:	461a      	mov	r2, r3
 800b69c:	4623      	mov	r3, r4
 800b69e:	4628      	mov	r0, r5
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	f7f5 faf1 	bl	8000c88 <__aeabi_uldivmod>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4b9a      	ldr	r3, [pc, #616]	; (800b918 <UART_SetConfig+0x6f4>)
 800b6ae:	fba3 1302 	umull	r1, r3, r3, r2
 800b6b2:	095b      	lsrs	r3, r3, #5
 800b6b4:	2164      	movs	r1, #100	; 0x64
 800b6b6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	3332      	adds	r3, #50	; 0x32
 800b6c0:	4a95      	ldr	r2, [pc, #596]	; (800b918 <UART_SetConfig+0x6f4>)
 800b6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c6:	095b      	lsrs	r3, r3, #5
 800b6c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6cc:	4498      	add	r8, r3
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	469b      	mov	fp, r3
 800b6d2:	f04f 0c00 	mov.w	ip, #0
 800b6d6:	46d9      	mov	r9, fp
 800b6d8:	46e2      	mov	sl, ip
 800b6da:	eb19 0309 	adds.w	r3, r9, r9
 800b6de:	eb4a 040a 	adc.w	r4, sl, sl
 800b6e2:	4699      	mov	r9, r3
 800b6e4:	46a2      	mov	sl, r4
 800b6e6:	eb19 090b 	adds.w	r9, r9, fp
 800b6ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b6ee:	f04f 0100 	mov.w	r1, #0
 800b6f2:	f04f 0200 	mov.w	r2, #0
 800b6f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b702:	4689      	mov	r9, r1
 800b704:	4692      	mov	sl, r2
 800b706:	eb1b 0509 	adds.w	r5, fp, r9
 800b70a:	eb4c 060a 	adc.w	r6, ip, sl
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	4619      	mov	r1, r3
 800b714:	f04f 0200 	mov.w	r2, #0
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	f04f 0400 	mov.w	r4, #0
 800b720:	0094      	lsls	r4, r2, #2
 800b722:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b726:	008b      	lsls	r3, r1, #2
 800b728:	461a      	mov	r2, r3
 800b72a:	4623      	mov	r3, r4
 800b72c:	4628      	mov	r0, r5
 800b72e:	4631      	mov	r1, r6
 800b730:	f7f5 faaa 	bl	8000c88 <__aeabi_uldivmod>
 800b734:	4603      	mov	r3, r0
 800b736:	460c      	mov	r4, r1
 800b738:	461a      	mov	r2, r3
 800b73a:	4b77      	ldr	r3, [pc, #476]	; (800b918 <UART_SetConfig+0x6f4>)
 800b73c:	fba3 1302 	umull	r1, r3, r3, r2
 800b740:	095b      	lsrs	r3, r3, #5
 800b742:	2164      	movs	r1, #100	; 0x64
 800b744:	fb01 f303 	mul.w	r3, r1, r3
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	3332      	adds	r3, #50	; 0x32
 800b74e:	4a72      	ldr	r2, [pc, #456]	; (800b918 <UART_SetConfig+0x6f4>)
 800b750:	fba2 2303 	umull	r2, r3, r2, r3
 800b754:	095b      	lsrs	r3, r3, #5
 800b756:	f003 020f 	and.w	r2, r3, #15
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4442      	add	r2, r8
 800b760:	609a      	str	r2, [r3, #8]
 800b762:	e0d0      	b.n	800b906 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b764:	f7fd fde4 	bl	8009330 <HAL_RCC_GetPCLK1Freq>
 800b768:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	469a      	mov	sl, r3
 800b76e:	f04f 0b00 	mov.w	fp, #0
 800b772:	46d0      	mov	r8, sl
 800b774:	46d9      	mov	r9, fp
 800b776:	eb18 0308 	adds.w	r3, r8, r8
 800b77a:	eb49 0409 	adc.w	r4, r9, r9
 800b77e:	4698      	mov	r8, r3
 800b780:	46a1      	mov	r9, r4
 800b782:	eb18 080a 	adds.w	r8, r8, sl
 800b786:	eb49 090b 	adc.w	r9, r9, fp
 800b78a:	f04f 0100 	mov.w	r1, #0
 800b78e:	f04f 0200 	mov.w	r2, #0
 800b792:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b796:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b79a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b79e:	4688      	mov	r8, r1
 800b7a0:	4691      	mov	r9, r2
 800b7a2:	eb1a 0508 	adds.w	r5, sl, r8
 800b7a6:	eb4b 0609 	adc.w	r6, fp, r9
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	f04f 0200 	mov.w	r2, #0
 800b7b4:	f04f 0300 	mov.w	r3, #0
 800b7b8:	f04f 0400 	mov.w	r4, #0
 800b7bc:	0094      	lsls	r4, r2, #2
 800b7be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7c2:	008b      	lsls	r3, r1, #2
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	4623      	mov	r3, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	f7f5 fa5c 	bl	8000c88 <__aeabi_uldivmod>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4b50      	ldr	r3, [pc, #320]	; (800b918 <UART_SetConfig+0x6f4>)
 800b7d8:	fba3 2302 	umull	r2, r3, r3, r2
 800b7dc:	095b      	lsrs	r3, r3, #5
 800b7de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	469b      	mov	fp, r3
 800b7e6:	f04f 0c00 	mov.w	ip, #0
 800b7ea:	46d9      	mov	r9, fp
 800b7ec:	46e2      	mov	sl, ip
 800b7ee:	eb19 0309 	adds.w	r3, r9, r9
 800b7f2:	eb4a 040a 	adc.w	r4, sl, sl
 800b7f6:	4699      	mov	r9, r3
 800b7f8:	46a2      	mov	sl, r4
 800b7fa:	eb19 090b 	adds.w	r9, r9, fp
 800b7fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b802:	f04f 0100 	mov.w	r1, #0
 800b806:	f04f 0200 	mov.w	r2, #0
 800b80a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b80e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b816:	4689      	mov	r9, r1
 800b818:	4692      	mov	sl, r2
 800b81a:	eb1b 0509 	adds.w	r5, fp, r9
 800b81e:	eb4c 060a 	adc.w	r6, ip, sl
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	4619      	mov	r1, r3
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	f04f 0300 	mov.w	r3, #0
 800b830:	f04f 0400 	mov.w	r4, #0
 800b834:	0094      	lsls	r4, r2, #2
 800b836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b83a:	008b      	lsls	r3, r1, #2
 800b83c:	461a      	mov	r2, r3
 800b83e:	4623      	mov	r3, r4
 800b840:	4628      	mov	r0, r5
 800b842:	4631      	mov	r1, r6
 800b844:	f7f5 fa20 	bl	8000c88 <__aeabi_uldivmod>
 800b848:	4603      	mov	r3, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	461a      	mov	r2, r3
 800b84e:	4b32      	ldr	r3, [pc, #200]	; (800b918 <UART_SetConfig+0x6f4>)
 800b850:	fba3 1302 	umull	r1, r3, r3, r2
 800b854:	095b      	lsrs	r3, r3, #5
 800b856:	2164      	movs	r1, #100	; 0x64
 800b858:	fb01 f303 	mul.w	r3, r1, r3
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	3332      	adds	r3, #50	; 0x32
 800b862:	4a2d      	ldr	r2, [pc, #180]	; (800b918 <UART_SetConfig+0x6f4>)
 800b864:	fba2 2303 	umull	r2, r3, r2, r3
 800b868:	095b      	lsrs	r3, r3, #5
 800b86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b86e:	4498      	add	r8, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	469b      	mov	fp, r3
 800b874:	f04f 0c00 	mov.w	ip, #0
 800b878:	46d9      	mov	r9, fp
 800b87a:	46e2      	mov	sl, ip
 800b87c:	eb19 0309 	adds.w	r3, r9, r9
 800b880:	eb4a 040a 	adc.w	r4, sl, sl
 800b884:	4699      	mov	r9, r3
 800b886:	46a2      	mov	sl, r4
 800b888:	eb19 090b 	adds.w	r9, r9, fp
 800b88c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b890:	f04f 0100 	mov.w	r1, #0
 800b894:	f04f 0200 	mov.w	r2, #0
 800b898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b89c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b8a4:	4689      	mov	r9, r1
 800b8a6:	4692      	mov	sl, r2
 800b8a8:	eb1b 0509 	adds.w	r5, fp, r9
 800b8ac:	eb4c 060a 	adc.w	r6, ip, sl
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	f04f 0200 	mov.w	r2, #0
 800b8ba:	f04f 0300 	mov.w	r3, #0
 800b8be:	f04f 0400 	mov.w	r4, #0
 800b8c2:	0094      	lsls	r4, r2, #2
 800b8c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b8c8:	008b      	lsls	r3, r1, #2
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	4631      	mov	r1, r6
 800b8d2:	f7f5 f9d9 	bl	8000c88 <__aeabi_uldivmod>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	460c      	mov	r4, r1
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <UART_SetConfig+0x6f4>)
 800b8de:	fba3 1302 	umull	r1, r3, r3, r2
 800b8e2:	095b      	lsrs	r3, r3, #5
 800b8e4:	2164      	movs	r1, #100	; 0x64
 800b8e6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	3332      	adds	r3, #50	; 0x32
 800b8f0:	4a09      	ldr	r2, [pc, #36]	; (800b918 <UART_SetConfig+0x6f4>)
 800b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f6:	095b      	lsrs	r3, r3, #5
 800b8f8:	f003 020f 	and.w	r2, r3, #15
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4442      	add	r2, r8
 800b902:	609a      	str	r2, [r3, #8]
}
 800b904:	e7ff      	b.n	800b906 <UART_SetConfig+0x6e2>
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b910:	40011000 	.word	0x40011000
 800b914:	40011400 	.word	0x40011400
 800b918:	51eb851f 	.word	0x51eb851f

0800b91c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <FSMC_NORSRAM_Init+0xa0>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b946:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b94c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b952:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b958:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800b95e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800b964:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b96a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b970:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b976:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b97c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800b982:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800b988:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	2b08      	cmp	r3, #8
 800b996:	d103      	bne.n	800b9a0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68f9      	ldr	r1, [r7, #12]
 800b9a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	fff00080 	.word	0xfff00080

0800b9c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9da:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b9e2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b9ee:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b9f6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800b9fe:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba08:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	3b02      	subs	r3, #2
 800ba10:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ba12:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6979      	ldr	r1, [r7, #20]
 800ba28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	371c      	adds	r7, #28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
	...

0800ba3c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba54:	d122      	bne.n	800ba9c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4b15      	ldr	r3, [pc, #84]	; (800bab8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ba64:	4013      	ands	r3, r2
 800ba66:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba72:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ba7a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800ba82:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ba88:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	6979      	ldr	r1, [r7, #20]
 800ba96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ba9a:	e005      	b.n	800baa8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800baa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	cff00000 	.word	0xcff00000

0800babc <__errno>:
 800babc:	4b01      	ldr	r3, [pc, #4]	; (800bac4 <__errno+0x8>)
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	200000a8 	.word	0x200000a8

0800bac8 <__libc_init_array>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	4e0d      	ldr	r6, [pc, #52]	; (800bb00 <__libc_init_array+0x38>)
 800bacc:	4c0d      	ldr	r4, [pc, #52]	; (800bb04 <__libc_init_array+0x3c>)
 800bace:	1ba4      	subs	r4, r4, r6
 800bad0:	10a4      	asrs	r4, r4, #2
 800bad2:	2500      	movs	r5, #0
 800bad4:	42a5      	cmp	r5, r4
 800bad6:	d109      	bne.n	800baec <__libc_init_array+0x24>
 800bad8:	4e0b      	ldr	r6, [pc, #44]	; (800bb08 <__libc_init_array+0x40>)
 800bada:	4c0c      	ldr	r4, [pc, #48]	; (800bb0c <__libc_init_array+0x44>)
 800badc:	f002 fef4 	bl	800e8c8 <_init>
 800bae0:	1ba4      	subs	r4, r4, r6
 800bae2:	10a4      	asrs	r4, r4, #2
 800bae4:	2500      	movs	r5, #0
 800bae6:	42a5      	cmp	r5, r4
 800bae8:	d105      	bne.n	800baf6 <__libc_init_array+0x2e>
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800baf0:	4798      	blx	r3
 800baf2:	3501      	adds	r5, #1
 800baf4:	e7ee      	b.n	800bad4 <__libc_init_array+0xc>
 800baf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bafa:	4798      	blx	r3
 800bafc:	3501      	adds	r5, #1
 800bafe:	e7f2      	b.n	800bae6 <__libc_init_array+0x1e>
 800bb00:	08011a10 	.word	0x08011a10
 800bb04:	08011a10 	.word	0x08011a10
 800bb08:	08011a10 	.word	0x08011a10
 800bb0c:	08011a14 	.word	0x08011a14

0800bb10 <malloc>:
 800bb10:	4b02      	ldr	r3, [pc, #8]	; (800bb1c <malloc+0xc>)
 800bb12:	4601      	mov	r1, r0
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	f000 b859 	b.w	800bbcc <_malloc_r>
 800bb1a:	bf00      	nop
 800bb1c:	200000a8 	.word	0x200000a8

0800bb20 <memset>:
 800bb20:	4402      	add	r2, r0
 800bb22:	4603      	mov	r3, r0
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d100      	bne.n	800bb2a <memset+0xa>
 800bb28:	4770      	bx	lr
 800bb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2e:	e7f9      	b.n	800bb24 <memset+0x4>

0800bb30 <_free_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	2900      	cmp	r1, #0
 800bb36:	d045      	beq.n	800bbc4 <_free_r+0x94>
 800bb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3c:	1f0c      	subs	r4, r1, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bfb8      	it	lt
 800bb42:	18e4      	addlt	r4, r4, r3
 800bb44:	f001 fc67 	bl	800d416 <__malloc_lock>
 800bb48:	4a1f      	ldr	r2, [pc, #124]	; (800bbc8 <_free_r+0x98>)
 800bb4a:	6813      	ldr	r3, [r2, #0]
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	b933      	cbnz	r3, 800bb5e <_free_r+0x2e>
 800bb50:	6063      	str	r3, [r4, #4]
 800bb52:	6014      	str	r4, [r2, #0]
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb5a:	f001 bc5d 	b.w	800d418 <__malloc_unlock>
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	d90c      	bls.n	800bb7c <_free_r+0x4c>
 800bb62:	6821      	ldr	r1, [r4, #0]
 800bb64:	1862      	adds	r2, r4, r1
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bf04      	itt	eq
 800bb6a:	681a      	ldreq	r2, [r3, #0]
 800bb6c:	685b      	ldreq	r3, [r3, #4]
 800bb6e:	6063      	str	r3, [r4, #4]
 800bb70:	bf04      	itt	eq
 800bb72:	1852      	addeq	r2, r2, r1
 800bb74:	6022      	streq	r2, [r4, #0]
 800bb76:	6004      	str	r4, [r0, #0]
 800bb78:	e7ec      	b.n	800bb54 <_free_r+0x24>
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	b10a      	cbz	r2, 800bb84 <_free_r+0x54>
 800bb80:	42a2      	cmp	r2, r4
 800bb82:	d9fa      	bls.n	800bb7a <_free_r+0x4a>
 800bb84:	6819      	ldr	r1, [r3, #0]
 800bb86:	1858      	adds	r0, r3, r1
 800bb88:	42a0      	cmp	r0, r4
 800bb8a:	d10b      	bne.n	800bba4 <_free_r+0x74>
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	4401      	add	r1, r0
 800bb90:	1858      	adds	r0, r3, r1
 800bb92:	4282      	cmp	r2, r0
 800bb94:	6019      	str	r1, [r3, #0]
 800bb96:	d1dd      	bne.n	800bb54 <_free_r+0x24>
 800bb98:	6810      	ldr	r0, [r2, #0]
 800bb9a:	6852      	ldr	r2, [r2, #4]
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	4401      	add	r1, r0
 800bba0:	6019      	str	r1, [r3, #0]
 800bba2:	e7d7      	b.n	800bb54 <_free_r+0x24>
 800bba4:	d902      	bls.n	800bbac <_free_r+0x7c>
 800bba6:	230c      	movs	r3, #12
 800bba8:	602b      	str	r3, [r5, #0]
 800bbaa:	e7d3      	b.n	800bb54 <_free_r+0x24>
 800bbac:	6820      	ldr	r0, [r4, #0]
 800bbae:	1821      	adds	r1, r4, r0
 800bbb0:	428a      	cmp	r2, r1
 800bbb2:	bf04      	itt	eq
 800bbb4:	6811      	ldreq	r1, [r2, #0]
 800bbb6:	6852      	ldreq	r2, [r2, #4]
 800bbb8:	6062      	str	r2, [r4, #4]
 800bbba:	bf04      	itt	eq
 800bbbc:	1809      	addeq	r1, r1, r0
 800bbbe:	6021      	streq	r1, [r4, #0]
 800bbc0:	605c      	str	r4, [r3, #4]
 800bbc2:	e7c7      	b.n	800bb54 <_free_r+0x24>
 800bbc4:	bd38      	pop	{r3, r4, r5, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000da4 	.word	0x20000da4

0800bbcc <_malloc_r>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	1ccd      	adds	r5, r1, #3
 800bbd0:	f025 0503 	bic.w	r5, r5, #3
 800bbd4:	3508      	adds	r5, #8
 800bbd6:	2d0c      	cmp	r5, #12
 800bbd8:	bf38      	it	cc
 800bbda:	250c      	movcc	r5, #12
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	4606      	mov	r6, r0
 800bbe0:	db01      	blt.n	800bbe6 <_malloc_r+0x1a>
 800bbe2:	42a9      	cmp	r1, r5
 800bbe4:	d903      	bls.n	800bbee <_malloc_r+0x22>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	6033      	str	r3, [r6, #0]
 800bbea:	2000      	movs	r0, #0
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
 800bbee:	f001 fc12 	bl	800d416 <__malloc_lock>
 800bbf2:	4a21      	ldr	r2, [pc, #132]	; (800bc78 <_malloc_r+0xac>)
 800bbf4:	6814      	ldr	r4, [r2, #0]
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	b991      	cbnz	r1, 800bc20 <_malloc_r+0x54>
 800bbfa:	4c20      	ldr	r4, [pc, #128]	; (800bc7c <_malloc_r+0xb0>)
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	b91b      	cbnz	r3, 800bc08 <_malloc_r+0x3c>
 800bc00:	4630      	mov	r0, r6
 800bc02:	f000 fcb1 	bl	800c568 <_sbrk_r>
 800bc06:	6020      	str	r0, [r4, #0]
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f000 fcac 	bl	800c568 <_sbrk_r>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d124      	bne.n	800bc5e <_malloc_r+0x92>
 800bc14:	230c      	movs	r3, #12
 800bc16:	6033      	str	r3, [r6, #0]
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f001 fbfd 	bl	800d418 <__malloc_unlock>
 800bc1e:	e7e4      	b.n	800bbea <_malloc_r+0x1e>
 800bc20:	680b      	ldr	r3, [r1, #0]
 800bc22:	1b5b      	subs	r3, r3, r5
 800bc24:	d418      	bmi.n	800bc58 <_malloc_r+0x8c>
 800bc26:	2b0b      	cmp	r3, #11
 800bc28:	d90f      	bls.n	800bc4a <_malloc_r+0x7e>
 800bc2a:	600b      	str	r3, [r1, #0]
 800bc2c:	50cd      	str	r5, [r1, r3]
 800bc2e:	18cc      	adds	r4, r1, r3
 800bc30:	4630      	mov	r0, r6
 800bc32:	f001 fbf1 	bl	800d418 <__malloc_unlock>
 800bc36:	f104 000b 	add.w	r0, r4, #11
 800bc3a:	1d23      	adds	r3, r4, #4
 800bc3c:	f020 0007 	bic.w	r0, r0, #7
 800bc40:	1ac3      	subs	r3, r0, r3
 800bc42:	d0d3      	beq.n	800bbec <_malloc_r+0x20>
 800bc44:	425a      	negs	r2, r3
 800bc46:	50e2      	str	r2, [r4, r3]
 800bc48:	e7d0      	b.n	800bbec <_malloc_r+0x20>
 800bc4a:	428c      	cmp	r4, r1
 800bc4c:	684b      	ldr	r3, [r1, #4]
 800bc4e:	bf16      	itet	ne
 800bc50:	6063      	strne	r3, [r4, #4]
 800bc52:	6013      	streq	r3, [r2, #0]
 800bc54:	460c      	movne	r4, r1
 800bc56:	e7eb      	b.n	800bc30 <_malloc_r+0x64>
 800bc58:	460c      	mov	r4, r1
 800bc5a:	6849      	ldr	r1, [r1, #4]
 800bc5c:	e7cc      	b.n	800bbf8 <_malloc_r+0x2c>
 800bc5e:	1cc4      	adds	r4, r0, #3
 800bc60:	f024 0403 	bic.w	r4, r4, #3
 800bc64:	42a0      	cmp	r0, r4
 800bc66:	d005      	beq.n	800bc74 <_malloc_r+0xa8>
 800bc68:	1a21      	subs	r1, r4, r0
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 fc7c 	bl	800c568 <_sbrk_r>
 800bc70:	3001      	adds	r0, #1
 800bc72:	d0cf      	beq.n	800bc14 <_malloc_r+0x48>
 800bc74:	6025      	str	r5, [r4, #0]
 800bc76:	e7db      	b.n	800bc30 <_malloc_r+0x64>
 800bc78:	20000da4 	.word	0x20000da4
 800bc7c:	20000da8 	.word	0x20000da8

0800bc80 <__cvt>:
 800bc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc84:	ec55 4b10 	vmov	r4, r5, d0
 800bc88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bc8a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	460e      	mov	r6, r1
 800bc92:	4691      	mov	r9, r2
 800bc94:	4619      	mov	r1, r3
 800bc96:	bfb8      	it	lt
 800bc98:	4622      	movlt	r2, r4
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	f027 0720 	bic.w	r7, r7, #32
 800bca0:	bfbb      	ittet	lt
 800bca2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bca6:	461d      	movlt	r5, r3
 800bca8:	2300      	movge	r3, #0
 800bcaa:	232d      	movlt	r3, #45	; 0x2d
 800bcac:	bfb8      	it	lt
 800bcae:	4614      	movlt	r4, r2
 800bcb0:	2f46      	cmp	r7, #70	; 0x46
 800bcb2:	700b      	strb	r3, [r1, #0]
 800bcb4:	d004      	beq.n	800bcc0 <__cvt+0x40>
 800bcb6:	2f45      	cmp	r7, #69	; 0x45
 800bcb8:	d100      	bne.n	800bcbc <__cvt+0x3c>
 800bcba:	3601      	adds	r6, #1
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	e000      	b.n	800bcc2 <__cvt+0x42>
 800bcc0:	2103      	movs	r1, #3
 800bcc2:	ab03      	add	r3, sp, #12
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	ab02      	add	r3, sp, #8
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	4632      	mov	r2, r6
 800bccc:	4653      	mov	r3, sl
 800bcce:	ec45 4b10 	vmov	d0, r4, r5
 800bcd2:	f000 fd05 	bl	800c6e0 <_dtoa_r>
 800bcd6:	2f47      	cmp	r7, #71	; 0x47
 800bcd8:	4680      	mov	r8, r0
 800bcda:	d102      	bne.n	800bce2 <__cvt+0x62>
 800bcdc:	f019 0f01 	tst.w	r9, #1
 800bce0:	d026      	beq.n	800bd30 <__cvt+0xb0>
 800bce2:	2f46      	cmp	r7, #70	; 0x46
 800bce4:	eb08 0906 	add.w	r9, r8, r6
 800bce8:	d111      	bne.n	800bd0e <__cvt+0x8e>
 800bcea:	f898 3000 	ldrb.w	r3, [r8]
 800bcee:	2b30      	cmp	r3, #48	; 0x30
 800bcf0:	d10a      	bne.n	800bd08 <__cvt+0x88>
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	f7f4 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcfe:	b918      	cbnz	r0, 800bd08 <__cvt+0x88>
 800bd00:	f1c6 0601 	rsb	r6, r6, #1
 800bd04:	f8ca 6000 	str.w	r6, [sl]
 800bd08:	f8da 3000 	ldr.w	r3, [sl]
 800bd0c:	4499      	add	r9, r3
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2300      	movs	r3, #0
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd1a:	b938      	cbnz	r0, 800bd2c <__cvt+0xac>
 800bd1c:	2230      	movs	r2, #48	; 0x30
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	454b      	cmp	r3, r9
 800bd22:	d205      	bcs.n	800bd30 <__cvt+0xb0>
 800bd24:	1c59      	adds	r1, r3, #1
 800bd26:	9103      	str	r1, [sp, #12]
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	e7f8      	b.n	800bd1e <__cvt+0x9e>
 800bd2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd34:	eba3 0308 	sub.w	r3, r3, r8
 800bd38:	4640      	mov	r0, r8
 800bd3a:	6013      	str	r3, [r2, #0]
 800bd3c:	b004      	add	sp, #16
 800bd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bd42 <__exponent>:
 800bd42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd44:	2900      	cmp	r1, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	bfba      	itte	lt
 800bd4a:	4249      	neglt	r1, r1
 800bd4c:	232d      	movlt	r3, #45	; 0x2d
 800bd4e:	232b      	movge	r3, #43	; 0x2b
 800bd50:	2909      	cmp	r1, #9
 800bd52:	f804 2b02 	strb.w	r2, [r4], #2
 800bd56:	7043      	strb	r3, [r0, #1]
 800bd58:	dd20      	ble.n	800bd9c <__exponent+0x5a>
 800bd5a:	f10d 0307 	add.w	r3, sp, #7
 800bd5e:	461f      	mov	r7, r3
 800bd60:	260a      	movs	r6, #10
 800bd62:	fb91 f5f6 	sdiv	r5, r1, r6
 800bd66:	fb06 1115 	mls	r1, r6, r5, r1
 800bd6a:	3130      	adds	r1, #48	; 0x30
 800bd6c:	2d09      	cmp	r5, #9
 800bd6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd72:	f103 32ff 	add.w	r2, r3, #4294967295
 800bd76:	4629      	mov	r1, r5
 800bd78:	dc09      	bgt.n	800bd8e <__exponent+0x4c>
 800bd7a:	3130      	adds	r1, #48	; 0x30
 800bd7c:	3b02      	subs	r3, #2
 800bd7e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bd82:	42bb      	cmp	r3, r7
 800bd84:	4622      	mov	r2, r4
 800bd86:	d304      	bcc.n	800bd92 <__exponent+0x50>
 800bd88:	1a10      	subs	r0, r2, r0
 800bd8a:	b003      	add	sp, #12
 800bd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd8e:	4613      	mov	r3, r2
 800bd90:	e7e7      	b.n	800bd62 <__exponent+0x20>
 800bd92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd96:	f804 2b01 	strb.w	r2, [r4], #1
 800bd9a:	e7f2      	b.n	800bd82 <__exponent+0x40>
 800bd9c:	2330      	movs	r3, #48	; 0x30
 800bd9e:	4419      	add	r1, r3
 800bda0:	7083      	strb	r3, [r0, #2]
 800bda2:	1d02      	adds	r2, r0, #4
 800bda4:	70c1      	strb	r1, [r0, #3]
 800bda6:	e7ef      	b.n	800bd88 <__exponent+0x46>

0800bda8 <_printf_float>:
 800bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	b08d      	sub	sp, #52	; 0x34
 800bdae:	460c      	mov	r4, r1
 800bdb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bdb4:	4616      	mov	r6, r2
 800bdb6:	461f      	mov	r7, r3
 800bdb8:	4605      	mov	r5, r0
 800bdba:	f001 fb13 	bl	800d3e4 <_localeconv_r>
 800bdbe:	6803      	ldr	r3, [r0, #0]
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f4 fa04 	bl	80001d0 <strlen>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	930a      	str	r3, [sp, #40]	; 0x28
 800bdcc:	f8d8 3000 	ldr.w	r3, [r8]
 800bdd0:	9005      	str	r0, [sp, #20]
 800bdd2:	3307      	adds	r3, #7
 800bdd4:	f023 0307 	bic.w	r3, r3, #7
 800bdd8:	f103 0208 	add.w	r2, r3, #8
 800bddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bde0:	f8d4 b000 	ldr.w	fp, [r4]
 800bde4:	f8c8 2000 	str.w	r2, [r8]
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bdf0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bdf4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bdf8:	9307      	str	r3, [sp, #28]
 800bdfa:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800be02:	4ba7      	ldr	r3, [pc, #668]	; (800c0a0 <_printf_float+0x2f8>)
 800be04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be08:	f7f4 fe90 	bl	8000b2c <__aeabi_dcmpun>
 800be0c:	bb70      	cbnz	r0, 800be6c <_printf_float+0xc4>
 800be0e:	f04f 32ff 	mov.w	r2, #4294967295
 800be12:	4ba3      	ldr	r3, [pc, #652]	; (800c0a0 <_printf_float+0x2f8>)
 800be14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be18:	f7f4 fe6a 	bl	8000af0 <__aeabi_dcmple>
 800be1c:	bb30      	cbnz	r0, 800be6c <_printf_float+0xc4>
 800be1e:	2200      	movs	r2, #0
 800be20:	2300      	movs	r3, #0
 800be22:	4640      	mov	r0, r8
 800be24:	4649      	mov	r1, r9
 800be26:	f7f4 fe59 	bl	8000adc <__aeabi_dcmplt>
 800be2a:	b110      	cbz	r0, 800be32 <_printf_float+0x8a>
 800be2c:	232d      	movs	r3, #45	; 0x2d
 800be2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be32:	4a9c      	ldr	r2, [pc, #624]	; (800c0a4 <_printf_float+0x2fc>)
 800be34:	4b9c      	ldr	r3, [pc, #624]	; (800c0a8 <_printf_float+0x300>)
 800be36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800be3a:	bf8c      	ite	hi
 800be3c:	4690      	movhi	r8, r2
 800be3e:	4698      	movls	r8, r3
 800be40:	2303      	movs	r3, #3
 800be42:	f02b 0204 	bic.w	r2, fp, #4
 800be46:	6123      	str	r3, [r4, #16]
 800be48:	6022      	str	r2, [r4, #0]
 800be4a:	f04f 0900 	mov.w	r9, #0
 800be4e:	9700      	str	r7, [sp, #0]
 800be50:	4633      	mov	r3, r6
 800be52:	aa0b      	add	r2, sp, #44	; 0x2c
 800be54:	4621      	mov	r1, r4
 800be56:	4628      	mov	r0, r5
 800be58:	f000 f9e6 	bl	800c228 <_printf_common>
 800be5c:	3001      	adds	r0, #1
 800be5e:	f040 808d 	bne.w	800bf7c <_printf_float+0x1d4>
 800be62:	f04f 30ff 	mov.w	r0, #4294967295
 800be66:	b00d      	add	sp, #52	; 0x34
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	4642      	mov	r2, r8
 800be6e:	464b      	mov	r3, r9
 800be70:	4640      	mov	r0, r8
 800be72:	4649      	mov	r1, r9
 800be74:	f7f4 fe5a 	bl	8000b2c <__aeabi_dcmpun>
 800be78:	b110      	cbz	r0, 800be80 <_printf_float+0xd8>
 800be7a:	4a8c      	ldr	r2, [pc, #560]	; (800c0ac <_printf_float+0x304>)
 800be7c:	4b8c      	ldr	r3, [pc, #560]	; (800c0b0 <_printf_float+0x308>)
 800be7e:	e7da      	b.n	800be36 <_printf_float+0x8e>
 800be80:	6861      	ldr	r1, [r4, #4]
 800be82:	1c4b      	adds	r3, r1, #1
 800be84:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800be88:	a80a      	add	r0, sp, #40	; 0x28
 800be8a:	d13e      	bne.n	800bf0a <_printf_float+0x162>
 800be8c:	2306      	movs	r3, #6
 800be8e:	6063      	str	r3, [r4, #4]
 800be90:	2300      	movs	r3, #0
 800be92:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800be96:	ab09      	add	r3, sp, #36	; 0x24
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	ec49 8b10 	vmov	d0, r8, r9
 800be9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	f8cd a004 	str.w	sl, [sp, #4]
 800bea8:	6861      	ldr	r1, [r4, #4]
 800beaa:	4628      	mov	r0, r5
 800beac:	f7ff fee8 	bl	800bc80 <__cvt>
 800beb0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800beb4:	2b47      	cmp	r3, #71	; 0x47
 800beb6:	4680      	mov	r8, r0
 800beb8:	d109      	bne.n	800bece <_printf_float+0x126>
 800beba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bebc:	1cd8      	adds	r0, r3, #3
 800bebe:	db02      	blt.n	800bec6 <_printf_float+0x11e>
 800bec0:	6862      	ldr	r2, [r4, #4]
 800bec2:	4293      	cmp	r3, r2
 800bec4:	dd47      	ble.n	800bf56 <_printf_float+0x1ae>
 800bec6:	f1aa 0a02 	sub.w	sl, sl, #2
 800beca:	fa5f fa8a 	uxtb.w	sl, sl
 800bece:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bed4:	d824      	bhi.n	800bf20 <_printf_float+0x178>
 800bed6:	3901      	subs	r1, #1
 800bed8:	4652      	mov	r2, sl
 800beda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bede:	9109      	str	r1, [sp, #36]	; 0x24
 800bee0:	f7ff ff2f 	bl	800bd42 <__exponent>
 800bee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bee6:	1813      	adds	r3, r2, r0
 800bee8:	2a01      	cmp	r2, #1
 800beea:	4681      	mov	r9, r0
 800beec:	6123      	str	r3, [r4, #16]
 800beee:	dc02      	bgt.n	800bef6 <_printf_float+0x14e>
 800bef0:	6822      	ldr	r2, [r4, #0]
 800bef2:	07d1      	lsls	r1, r2, #31
 800bef4:	d501      	bpl.n	800befa <_printf_float+0x152>
 800bef6:	3301      	adds	r3, #1
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0a5      	beq.n	800be4e <_printf_float+0xa6>
 800bf02:	232d      	movs	r3, #45	; 0x2d
 800bf04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf08:	e7a1      	b.n	800be4e <_printf_float+0xa6>
 800bf0a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bf0e:	f000 8177 	beq.w	800c200 <_printf_float+0x458>
 800bf12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bf16:	d1bb      	bne.n	800be90 <_printf_float+0xe8>
 800bf18:	2900      	cmp	r1, #0
 800bf1a:	d1b9      	bne.n	800be90 <_printf_float+0xe8>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e7b6      	b.n	800be8e <_printf_float+0xe6>
 800bf20:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bf24:	d119      	bne.n	800bf5a <_printf_float+0x1b2>
 800bf26:	2900      	cmp	r1, #0
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	dd0c      	ble.n	800bf46 <_printf_float+0x19e>
 800bf2c:	6121      	str	r1, [r4, #16]
 800bf2e:	b913      	cbnz	r3, 800bf36 <_printf_float+0x18e>
 800bf30:	6822      	ldr	r2, [r4, #0]
 800bf32:	07d2      	lsls	r2, r2, #31
 800bf34:	d502      	bpl.n	800bf3c <_printf_float+0x194>
 800bf36:	3301      	adds	r3, #1
 800bf38:	440b      	add	r3, r1
 800bf3a:	6123      	str	r3, [r4, #16]
 800bf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3e:	65a3      	str	r3, [r4, #88]	; 0x58
 800bf40:	f04f 0900 	mov.w	r9, #0
 800bf44:	e7d9      	b.n	800befa <_printf_float+0x152>
 800bf46:	b913      	cbnz	r3, 800bf4e <_printf_float+0x1a6>
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	07d0      	lsls	r0, r2, #31
 800bf4c:	d501      	bpl.n	800bf52 <_printf_float+0x1aa>
 800bf4e:	3302      	adds	r3, #2
 800bf50:	e7f3      	b.n	800bf3a <_printf_float+0x192>
 800bf52:	2301      	movs	r3, #1
 800bf54:	e7f1      	b.n	800bf3a <_printf_float+0x192>
 800bf56:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bf5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	db05      	blt.n	800bf6e <_printf_float+0x1c6>
 800bf62:	6822      	ldr	r2, [r4, #0]
 800bf64:	6123      	str	r3, [r4, #16]
 800bf66:	07d1      	lsls	r1, r2, #31
 800bf68:	d5e8      	bpl.n	800bf3c <_printf_float+0x194>
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	e7e5      	b.n	800bf3a <_printf_float+0x192>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfd4      	ite	le
 800bf72:	f1c3 0302 	rsble	r3, r3, #2
 800bf76:	2301      	movgt	r3, #1
 800bf78:	4413      	add	r3, r2
 800bf7a:	e7de      	b.n	800bf3a <_printf_float+0x192>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	055a      	lsls	r2, r3, #21
 800bf80:	d407      	bmi.n	800bf92 <_printf_float+0x1ea>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	4642      	mov	r2, r8
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d12b      	bne.n	800bfe8 <_printf_float+0x240>
 800bf90:	e767      	b.n	800be62 <_printf_float+0xba>
 800bf92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bf96:	f240 80dc 	bls.w	800c152 <_printf_float+0x3aa>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfa2:	f7f4 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d033      	beq.n	800c012 <_printf_float+0x26a>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	4a41      	ldr	r2, [pc, #260]	; (800c0b4 <_printf_float+0x30c>)
 800bfae:	4631      	mov	r1, r6
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	47b8      	blx	r7
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	f43f af54 	beq.w	800be62 <_printf_float+0xba>
 800bfba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	db02      	blt.n	800bfc8 <_printf_float+0x220>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	07d8      	lsls	r0, r3, #31
 800bfc6:	d50f      	bpl.n	800bfe8 <_printf_float+0x240>
 800bfc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b8      	blx	r7
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f43f af45 	beq.w	800be62 <_printf_float+0xba>
 800bfd8:	f04f 0800 	mov.w	r8, #0
 800bfdc:	f104 091a 	add.w	r9, r4, #26
 800bfe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	4543      	cmp	r3, r8
 800bfe6:	dc09      	bgt.n	800bffc <_printf_float+0x254>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	079b      	lsls	r3, r3, #30
 800bfec:	f100 8103 	bmi.w	800c1f6 <_printf_float+0x44e>
 800bff0:	68e0      	ldr	r0, [r4, #12]
 800bff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bff4:	4298      	cmp	r0, r3
 800bff6:	bfb8      	it	lt
 800bff8:	4618      	movlt	r0, r3
 800bffa:	e734      	b.n	800be66 <_printf_float+0xbe>
 800bffc:	2301      	movs	r3, #1
 800bffe:	464a      	mov	r2, r9
 800c000:	4631      	mov	r1, r6
 800c002:	4628      	mov	r0, r5
 800c004:	47b8      	blx	r7
 800c006:	3001      	adds	r0, #1
 800c008:	f43f af2b 	beq.w	800be62 <_printf_float+0xba>
 800c00c:	f108 0801 	add.w	r8, r8, #1
 800c010:	e7e6      	b.n	800bfe0 <_printf_float+0x238>
 800c012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	dc2b      	bgt.n	800c070 <_printf_float+0x2c8>
 800c018:	2301      	movs	r3, #1
 800c01a:	4a26      	ldr	r2, [pc, #152]	; (800c0b4 <_printf_float+0x30c>)
 800c01c:	4631      	mov	r1, r6
 800c01e:	4628      	mov	r0, r5
 800c020:	47b8      	blx	r7
 800c022:	3001      	adds	r0, #1
 800c024:	f43f af1d 	beq.w	800be62 <_printf_float+0xba>
 800c028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02a:	b923      	cbnz	r3, 800c036 <_printf_float+0x28e>
 800c02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c02e:	b913      	cbnz	r3, 800c036 <_printf_float+0x28e>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d5d8      	bpl.n	800bfe8 <_printf_float+0x240>
 800c036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03a:	4631      	mov	r1, r6
 800c03c:	4628      	mov	r0, r5
 800c03e:	47b8      	blx	r7
 800c040:	3001      	adds	r0, #1
 800c042:	f43f af0e 	beq.w	800be62 <_printf_float+0xba>
 800c046:	f04f 0900 	mov.w	r9, #0
 800c04a:	f104 0a1a 	add.w	sl, r4, #26
 800c04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c050:	425b      	negs	r3, r3
 800c052:	454b      	cmp	r3, r9
 800c054:	dc01      	bgt.n	800c05a <_printf_float+0x2b2>
 800c056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c058:	e794      	b.n	800bf84 <_printf_float+0x1dc>
 800c05a:	2301      	movs	r3, #1
 800c05c:	4652      	mov	r2, sl
 800c05e:	4631      	mov	r1, r6
 800c060:	4628      	mov	r0, r5
 800c062:	47b8      	blx	r7
 800c064:	3001      	adds	r0, #1
 800c066:	f43f aefc 	beq.w	800be62 <_printf_float+0xba>
 800c06a:	f109 0901 	add.w	r9, r9, #1
 800c06e:	e7ee      	b.n	800c04e <_printf_float+0x2a6>
 800c070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c074:	429a      	cmp	r2, r3
 800c076:	bfa8      	it	ge
 800c078:	461a      	movge	r2, r3
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	4691      	mov	r9, r2
 800c07e:	dd07      	ble.n	800c090 <_printf_float+0x2e8>
 800c080:	4613      	mov	r3, r2
 800c082:	4631      	mov	r1, r6
 800c084:	4642      	mov	r2, r8
 800c086:	4628      	mov	r0, r5
 800c088:	47b8      	blx	r7
 800c08a:	3001      	adds	r0, #1
 800c08c:	f43f aee9 	beq.w	800be62 <_printf_float+0xba>
 800c090:	f104 031a 	add.w	r3, r4, #26
 800c094:	f04f 0b00 	mov.w	fp, #0
 800c098:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c09c:	9306      	str	r3, [sp, #24]
 800c09e:	e015      	b.n	800c0cc <_printf_float+0x324>
 800c0a0:	7fefffff 	.word	0x7fefffff
 800c0a4:	08011714 	.word	0x08011714
 800c0a8:	08011710 	.word	0x08011710
 800c0ac:	0801171c 	.word	0x0801171c
 800c0b0:	08011718 	.word	0x08011718
 800c0b4:	08011720 	.word	0x08011720
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	9a06      	ldr	r2, [sp, #24]
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f aecd 	beq.w	800be62 <_printf_float+0xba>
 800c0c8:	f10b 0b01 	add.w	fp, fp, #1
 800c0cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c0d0:	ebaa 0309 	sub.w	r3, sl, r9
 800c0d4:	455b      	cmp	r3, fp
 800c0d6:	dcef      	bgt.n	800c0b8 <_printf_float+0x310>
 800c0d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	44d0      	add	r8, sl
 800c0e0:	db15      	blt.n	800c10e <_printf_float+0x366>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	07da      	lsls	r2, r3, #31
 800c0e6:	d412      	bmi.n	800c10e <_printf_float+0x366>
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0ec:	eba3 020a 	sub.w	r2, r3, sl
 800c0f0:	eba3 0a01 	sub.w	sl, r3, r1
 800c0f4:	4592      	cmp	sl, r2
 800c0f6:	bfa8      	it	ge
 800c0f8:	4692      	movge	sl, r2
 800c0fa:	f1ba 0f00 	cmp.w	sl, #0
 800c0fe:	dc0e      	bgt.n	800c11e <_printf_float+0x376>
 800c100:	f04f 0800 	mov.w	r8, #0
 800c104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c108:	f104 091a 	add.w	r9, r4, #26
 800c10c:	e019      	b.n	800c142 <_printf_float+0x39a>
 800c10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c112:	4631      	mov	r1, r6
 800c114:	4628      	mov	r0, r5
 800c116:	47b8      	blx	r7
 800c118:	3001      	adds	r0, #1
 800c11a:	d1e5      	bne.n	800c0e8 <_printf_float+0x340>
 800c11c:	e6a1      	b.n	800be62 <_printf_float+0xba>
 800c11e:	4653      	mov	r3, sl
 800c120:	4642      	mov	r2, r8
 800c122:	4631      	mov	r1, r6
 800c124:	4628      	mov	r0, r5
 800c126:	47b8      	blx	r7
 800c128:	3001      	adds	r0, #1
 800c12a:	d1e9      	bne.n	800c100 <_printf_float+0x358>
 800c12c:	e699      	b.n	800be62 <_printf_float+0xba>
 800c12e:	2301      	movs	r3, #1
 800c130:	464a      	mov	r2, r9
 800c132:	4631      	mov	r1, r6
 800c134:	4628      	mov	r0, r5
 800c136:	47b8      	blx	r7
 800c138:	3001      	adds	r0, #1
 800c13a:	f43f ae92 	beq.w	800be62 <_printf_float+0xba>
 800c13e:	f108 0801 	add.w	r8, r8, #1
 800c142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	eba3 030a 	sub.w	r3, r3, sl
 800c14c:	4543      	cmp	r3, r8
 800c14e:	dcee      	bgt.n	800c12e <_printf_float+0x386>
 800c150:	e74a      	b.n	800bfe8 <_printf_float+0x240>
 800c152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c154:	2a01      	cmp	r2, #1
 800c156:	dc01      	bgt.n	800c15c <_printf_float+0x3b4>
 800c158:	07db      	lsls	r3, r3, #31
 800c15a:	d53a      	bpl.n	800c1d2 <_printf_float+0x42a>
 800c15c:	2301      	movs	r3, #1
 800c15e:	4642      	mov	r2, r8
 800c160:	4631      	mov	r1, r6
 800c162:	4628      	mov	r0, r5
 800c164:	47b8      	blx	r7
 800c166:	3001      	adds	r0, #1
 800c168:	f43f ae7b 	beq.w	800be62 <_printf_float+0xba>
 800c16c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c170:	4631      	mov	r1, r6
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	f108 0801 	add.w	r8, r8, #1
 800c17c:	f43f ae71 	beq.w	800be62 <_printf_float+0xba>
 800c180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c182:	2200      	movs	r2, #0
 800c184:	f103 3aff 	add.w	sl, r3, #4294967295
 800c188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c18c:	2300      	movs	r3, #0
 800c18e:	f7f4 fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c192:	b9c8      	cbnz	r0, 800c1c8 <_printf_float+0x420>
 800c194:	4653      	mov	r3, sl
 800c196:	4642      	mov	r2, r8
 800c198:	4631      	mov	r1, r6
 800c19a:	4628      	mov	r0, r5
 800c19c:	47b8      	blx	r7
 800c19e:	3001      	adds	r0, #1
 800c1a0:	d10e      	bne.n	800c1c0 <_printf_float+0x418>
 800c1a2:	e65e      	b.n	800be62 <_printf_float+0xba>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	47b8      	blx	r7
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	f43f ae57 	beq.w	800be62 <_printf_float+0xba>
 800c1b4:	f108 0801 	add.w	r8, r8, #1
 800c1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	4543      	cmp	r3, r8
 800c1be:	dcf1      	bgt.n	800c1a4 <_printf_float+0x3fc>
 800c1c0:	464b      	mov	r3, r9
 800c1c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1c6:	e6de      	b.n	800bf86 <_printf_float+0x1de>
 800c1c8:	f04f 0800 	mov.w	r8, #0
 800c1cc:	f104 0a1a 	add.w	sl, r4, #26
 800c1d0:	e7f2      	b.n	800c1b8 <_printf_float+0x410>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e7df      	b.n	800c196 <_printf_float+0x3ee>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	464a      	mov	r2, r9
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b8      	blx	r7
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	f43f ae3e 	beq.w	800be62 <_printf_float+0xba>
 800c1e6:	f108 0801 	add.w	r8, r8, #1
 800c1ea:	68e3      	ldr	r3, [r4, #12]
 800c1ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1ee:	1a9b      	subs	r3, r3, r2
 800c1f0:	4543      	cmp	r3, r8
 800c1f2:	dcf0      	bgt.n	800c1d6 <_printf_float+0x42e>
 800c1f4:	e6fc      	b.n	800bff0 <_printf_float+0x248>
 800c1f6:	f04f 0800 	mov.w	r8, #0
 800c1fa:	f104 0919 	add.w	r9, r4, #25
 800c1fe:	e7f4      	b.n	800c1ea <_printf_float+0x442>
 800c200:	2900      	cmp	r1, #0
 800c202:	f43f ae8b 	beq.w	800bf1c <_printf_float+0x174>
 800c206:	2300      	movs	r3, #0
 800c208:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c20c:	ab09      	add	r3, sp, #36	; 0x24
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	ec49 8b10 	vmov	d0, r8, r9
 800c214:	6022      	str	r2, [r4, #0]
 800c216:	f8cd a004 	str.w	sl, [sp, #4]
 800c21a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c21e:	4628      	mov	r0, r5
 800c220:	f7ff fd2e 	bl	800bc80 <__cvt>
 800c224:	4680      	mov	r8, r0
 800c226:	e648      	b.n	800beba <_printf_float+0x112>

0800c228 <_printf_common>:
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	4691      	mov	r9, r2
 800c22e:	461f      	mov	r7, r3
 800c230:	688a      	ldr	r2, [r1, #8]
 800c232:	690b      	ldr	r3, [r1, #16]
 800c234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c238:	4293      	cmp	r3, r2
 800c23a:	bfb8      	it	lt
 800c23c:	4613      	movlt	r3, r2
 800c23e:	f8c9 3000 	str.w	r3, [r9]
 800c242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c246:	4606      	mov	r6, r0
 800c248:	460c      	mov	r4, r1
 800c24a:	b112      	cbz	r2, 800c252 <_printf_common+0x2a>
 800c24c:	3301      	adds	r3, #1
 800c24e:	f8c9 3000 	str.w	r3, [r9]
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	0699      	lsls	r1, r3, #26
 800c256:	bf42      	ittt	mi
 800c258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c25c:	3302      	addmi	r3, #2
 800c25e:	f8c9 3000 	strmi.w	r3, [r9]
 800c262:	6825      	ldr	r5, [r4, #0]
 800c264:	f015 0506 	ands.w	r5, r5, #6
 800c268:	d107      	bne.n	800c27a <_printf_common+0x52>
 800c26a:	f104 0a19 	add.w	sl, r4, #25
 800c26e:	68e3      	ldr	r3, [r4, #12]
 800c270:	f8d9 2000 	ldr.w	r2, [r9]
 800c274:	1a9b      	subs	r3, r3, r2
 800c276:	42ab      	cmp	r3, r5
 800c278:	dc28      	bgt.n	800c2cc <_printf_common+0xa4>
 800c27a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c27e:	6822      	ldr	r2, [r4, #0]
 800c280:	3300      	adds	r3, #0
 800c282:	bf18      	it	ne
 800c284:	2301      	movne	r3, #1
 800c286:	0692      	lsls	r2, r2, #26
 800c288:	d42d      	bmi.n	800c2e6 <_printf_common+0xbe>
 800c28a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c28e:	4639      	mov	r1, r7
 800c290:	4630      	mov	r0, r6
 800c292:	47c0      	blx	r8
 800c294:	3001      	adds	r0, #1
 800c296:	d020      	beq.n	800c2da <_printf_common+0xb2>
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	68e5      	ldr	r5, [r4, #12]
 800c29c:	f8d9 2000 	ldr.w	r2, [r9]
 800c2a0:	f003 0306 	and.w	r3, r3, #6
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	bf08      	it	eq
 800c2a8:	1aad      	subeq	r5, r5, r2
 800c2aa:	68a3      	ldr	r3, [r4, #8]
 800c2ac:	6922      	ldr	r2, [r4, #16]
 800c2ae:	bf0c      	ite	eq
 800c2b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2b4:	2500      	movne	r5, #0
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	bfc4      	itt	gt
 800c2ba:	1a9b      	subgt	r3, r3, r2
 800c2bc:	18ed      	addgt	r5, r5, r3
 800c2be:	f04f 0900 	mov.w	r9, #0
 800c2c2:	341a      	adds	r4, #26
 800c2c4:	454d      	cmp	r5, r9
 800c2c6:	d11a      	bne.n	800c2fe <_printf_common+0xd6>
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	e008      	b.n	800c2de <_printf_common+0xb6>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4652      	mov	r2, sl
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	47c0      	blx	r8
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	d103      	bne.n	800c2e2 <_printf_common+0xba>
 800c2da:	f04f 30ff 	mov.w	r0, #4294967295
 800c2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e2:	3501      	adds	r5, #1
 800c2e4:	e7c3      	b.n	800c26e <_printf_common+0x46>
 800c2e6:	18e1      	adds	r1, r4, r3
 800c2e8:	1c5a      	adds	r2, r3, #1
 800c2ea:	2030      	movs	r0, #48	; 0x30
 800c2ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2f0:	4422      	add	r2, r4
 800c2f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	e7c5      	b.n	800c28a <_printf_common+0x62>
 800c2fe:	2301      	movs	r3, #1
 800c300:	4622      	mov	r2, r4
 800c302:	4639      	mov	r1, r7
 800c304:	4630      	mov	r0, r6
 800c306:	47c0      	blx	r8
 800c308:	3001      	adds	r0, #1
 800c30a:	d0e6      	beq.n	800c2da <_printf_common+0xb2>
 800c30c:	f109 0901 	add.w	r9, r9, #1
 800c310:	e7d8      	b.n	800c2c4 <_printf_common+0x9c>
	...

0800c314 <_printf_i>:
 800c314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c318:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c31c:	460c      	mov	r4, r1
 800c31e:	7e09      	ldrb	r1, [r1, #24]
 800c320:	b085      	sub	sp, #20
 800c322:	296e      	cmp	r1, #110	; 0x6e
 800c324:	4617      	mov	r7, r2
 800c326:	4606      	mov	r6, r0
 800c328:	4698      	mov	r8, r3
 800c32a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c32c:	f000 80b3 	beq.w	800c496 <_printf_i+0x182>
 800c330:	d822      	bhi.n	800c378 <_printf_i+0x64>
 800c332:	2963      	cmp	r1, #99	; 0x63
 800c334:	d036      	beq.n	800c3a4 <_printf_i+0x90>
 800c336:	d80a      	bhi.n	800c34e <_printf_i+0x3a>
 800c338:	2900      	cmp	r1, #0
 800c33a:	f000 80b9 	beq.w	800c4b0 <_printf_i+0x19c>
 800c33e:	2958      	cmp	r1, #88	; 0x58
 800c340:	f000 8083 	beq.w	800c44a <_printf_i+0x136>
 800c344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c348:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c34c:	e032      	b.n	800c3b4 <_printf_i+0xa0>
 800c34e:	2964      	cmp	r1, #100	; 0x64
 800c350:	d001      	beq.n	800c356 <_printf_i+0x42>
 800c352:	2969      	cmp	r1, #105	; 0x69
 800c354:	d1f6      	bne.n	800c344 <_printf_i+0x30>
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	6813      	ldr	r3, [r2, #0]
 800c35a:	0605      	lsls	r5, r0, #24
 800c35c:	f103 0104 	add.w	r1, r3, #4
 800c360:	d52a      	bpl.n	800c3b8 <_printf_i+0xa4>
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6011      	str	r1, [r2, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	da03      	bge.n	800c372 <_printf_i+0x5e>
 800c36a:	222d      	movs	r2, #45	; 0x2d
 800c36c:	425b      	negs	r3, r3
 800c36e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c372:	486f      	ldr	r0, [pc, #444]	; (800c530 <_printf_i+0x21c>)
 800c374:	220a      	movs	r2, #10
 800c376:	e039      	b.n	800c3ec <_printf_i+0xd8>
 800c378:	2973      	cmp	r1, #115	; 0x73
 800c37a:	f000 809d 	beq.w	800c4b8 <_printf_i+0x1a4>
 800c37e:	d808      	bhi.n	800c392 <_printf_i+0x7e>
 800c380:	296f      	cmp	r1, #111	; 0x6f
 800c382:	d020      	beq.n	800c3c6 <_printf_i+0xb2>
 800c384:	2970      	cmp	r1, #112	; 0x70
 800c386:	d1dd      	bne.n	800c344 <_printf_i+0x30>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	f043 0320 	orr.w	r3, r3, #32
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	e003      	b.n	800c39a <_printf_i+0x86>
 800c392:	2975      	cmp	r1, #117	; 0x75
 800c394:	d017      	beq.n	800c3c6 <_printf_i+0xb2>
 800c396:	2978      	cmp	r1, #120	; 0x78
 800c398:	d1d4      	bne.n	800c344 <_printf_i+0x30>
 800c39a:	2378      	movs	r3, #120	; 0x78
 800c39c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c3a0:	4864      	ldr	r0, [pc, #400]	; (800c534 <_printf_i+0x220>)
 800c3a2:	e055      	b.n	800c450 <_printf_i+0x13c>
 800c3a4:	6813      	ldr	r3, [r2, #0]
 800c3a6:	1d19      	adds	r1, r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	6011      	str	r1, [r2, #0]
 800c3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e08c      	b.n	800c4d2 <_printf_i+0x1be>
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6011      	str	r1, [r2, #0]
 800c3bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3c0:	bf18      	it	ne
 800c3c2:	b21b      	sxthne	r3, r3
 800c3c4:	e7cf      	b.n	800c366 <_printf_i+0x52>
 800c3c6:	6813      	ldr	r3, [r2, #0]
 800c3c8:	6825      	ldr	r5, [r4, #0]
 800c3ca:	1d18      	adds	r0, r3, #4
 800c3cc:	6010      	str	r0, [r2, #0]
 800c3ce:	0628      	lsls	r0, r5, #24
 800c3d0:	d501      	bpl.n	800c3d6 <_printf_i+0xc2>
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	e002      	b.n	800c3dc <_printf_i+0xc8>
 800c3d6:	0668      	lsls	r0, r5, #25
 800c3d8:	d5fb      	bpl.n	800c3d2 <_printf_i+0xbe>
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	4854      	ldr	r0, [pc, #336]	; (800c530 <_printf_i+0x21c>)
 800c3de:	296f      	cmp	r1, #111	; 0x6f
 800c3e0:	bf14      	ite	ne
 800c3e2:	220a      	movne	r2, #10
 800c3e4:	2208      	moveq	r2, #8
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c3ec:	6865      	ldr	r5, [r4, #4]
 800c3ee:	60a5      	str	r5, [r4, #8]
 800c3f0:	2d00      	cmp	r5, #0
 800c3f2:	f2c0 8095 	blt.w	800c520 <_printf_i+0x20c>
 800c3f6:	6821      	ldr	r1, [r4, #0]
 800c3f8:	f021 0104 	bic.w	r1, r1, #4
 800c3fc:	6021      	str	r1, [r4, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d13d      	bne.n	800c47e <_printf_i+0x16a>
 800c402:	2d00      	cmp	r5, #0
 800c404:	f040 808e 	bne.w	800c524 <_printf_i+0x210>
 800c408:	4665      	mov	r5, ip
 800c40a:	2a08      	cmp	r2, #8
 800c40c:	d10b      	bne.n	800c426 <_printf_i+0x112>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	07db      	lsls	r3, r3, #31
 800c412:	d508      	bpl.n	800c426 <_printf_i+0x112>
 800c414:	6923      	ldr	r3, [r4, #16]
 800c416:	6862      	ldr	r2, [r4, #4]
 800c418:	429a      	cmp	r2, r3
 800c41a:	bfde      	ittt	le
 800c41c:	2330      	movle	r3, #48	; 0x30
 800c41e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c422:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c426:	ebac 0305 	sub.w	r3, ip, r5
 800c42a:	6123      	str	r3, [r4, #16]
 800c42c:	f8cd 8000 	str.w	r8, [sp]
 800c430:	463b      	mov	r3, r7
 800c432:	aa03      	add	r2, sp, #12
 800c434:	4621      	mov	r1, r4
 800c436:	4630      	mov	r0, r6
 800c438:	f7ff fef6 	bl	800c228 <_printf_common>
 800c43c:	3001      	adds	r0, #1
 800c43e:	d14d      	bne.n	800c4dc <_printf_i+0x1c8>
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	b005      	add	sp, #20
 800c446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44a:	4839      	ldr	r0, [pc, #228]	; (800c530 <_printf_i+0x21c>)
 800c44c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c450:	6813      	ldr	r3, [r2, #0]
 800c452:	6821      	ldr	r1, [r4, #0]
 800c454:	1d1d      	adds	r5, r3, #4
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6015      	str	r5, [r2, #0]
 800c45a:	060a      	lsls	r2, r1, #24
 800c45c:	d50b      	bpl.n	800c476 <_printf_i+0x162>
 800c45e:	07ca      	lsls	r2, r1, #31
 800c460:	bf44      	itt	mi
 800c462:	f041 0120 	orrmi.w	r1, r1, #32
 800c466:	6021      	strmi	r1, [r4, #0]
 800c468:	b91b      	cbnz	r3, 800c472 <_printf_i+0x15e>
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	f022 0220 	bic.w	r2, r2, #32
 800c470:	6022      	str	r2, [r4, #0]
 800c472:	2210      	movs	r2, #16
 800c474:	e7b7      	b.n	800c3e6 <_printf_i+0xd2>
 800c476:	064d      	lsls	r5, r1, #25
 800c478:	bf48      	it	mi
 800c47a:	b29b      	uxthmi	r3, r3
 800c47c:	e7ef      	b.n	800c45e <_printf_i+0x14a>
 800c47e:	4665      	mov	r5, ip
 800c480:	fbb3 f1f2 	udiv	r1, r3, r2
 800c484:	fb02 3311 	mls	r3, r2, r1, r3
 800c488:	5cc3      	ldrb	r3, [r0, r3]
 800c48a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c48e:	460b      	mov	r3, r1
 800c490:	2900      	cmp	r1, #0
 800c492:	d1f5      	bne.n	800c480 <_printf_i+0x16c>
 800c494:	e7b9      	b.n	800c40a <_printf_i+0xf6>
 800c496:	6813      	ldr	r3, [r2, #0]
 800c498:	6825      	ldr	r5, [r4, #0]
 800c49a:	6961      	ldr	r1, [r4, #20]
 800c49c:	1d18      	adds	r0, r3, #4
 800c49e:	6010      	str	r0, [r2, #0]
 800c4a0:	0628      	lsls	r0, r5, #24
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	d501      	bpl.n	800c4aa <_printf_i+0x196>
 800c4a6:	6019      	str	r1, [r3, #0]
 800c4a8:	e002      	b.n	800c4b0 <_printf_i+0x19c>
 800c4aa:	066a      	lsls	r2, r5, #25
 800c4ac:	d5fb      	bpl.n	800c4a6 <_printf_i+0x192>
 800c4ae:	8019      	strh	r1, [r3, #0]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	6123      	str	r3, [r4, #16]
 800c4b4:	4665      	mov	r5, ip
 800c4b6:	e7b9      	b.n	800c42c <_printf_i+0x118>
 800c4b8:	6813      	ldr	r3, [r2, #0]
 800c4ba:	1d19      	adds	r1, r3, #4
 800c4bc:	6011      	str	r1, [r2, #0]
 800c4be:	681d      	ldr	r5, [r3, #0]
 800c4c0:	6862      	ldr	r2, [r4, #4]
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7f3 fe8b 	bl	80001e0 <memchr>
 800c4ca:	b108      	cbz	r0, 800c4d0 <_printf_i+0x1bc>
 800c4cc:	1b40      	subs	r0, r0, r5
 800c4ce:	6060      	str	r0, [r4, #4]
 800c4d0:	6863      	ldr	r3, [r4, #4]
 800c4d2:	6123      	str	r3, [r4, #16]
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4da:	e7a7      	b.n	800c42c <_printf_i+0x118>
 800c4dc:	6923      	ldr	r3, [r4, #16]
 800c4de:	462a      	mov	r2, r5
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	47c0      	blx	r8
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	d0aa      	beq.n	800c440 <_printf_i+0x12c>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	079b      	lsls	r3, r3, #30
 800c4ee:	d413      	bmi.n	800c518 <_printf_i+0x204>
 800c4f0:	68e0      	ldr	r0, [r4, #12]
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	4298      	cmp	r0, r3
 800c4f6:	bfb8      	it	lt
 800c4f8:	4618      	movlt	r0, r3
 800c4fa:	e7a3      	b.n	800c444 <_printf_i+0x130>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	464a      	mov	r2, r9
 800c500:	4639      	mov	r1, r7
 800c502:	4630      	mov	r0, r6
 800c504:	47c0      	blx	r8
 800c506:	3001      	adds	r0, #1
 800c508:	d09a      	beq.n	800c440 <_printf_i+0x12c>
 800c50a:	3501      	adds	r5, #1
 800c50c:	68e3      	ldr	r3, [r4, #12]
 800c50e:	9a03      	ldr	r2, [sp, #12]
 800c510:	1a9b      	subs	r3, r3, r2
 800c512:	42ab      	cmp	r3, r5
 800c514:	dcf2      	bgt.n	800c4fc <_printf_i+0x1e8>
 800c516:	e7eb      	b.n	800c4f0 <_printf_i+0x1dc>
 800c518:	2500      	movs	r5, #0
 800c51a:	f104 0919 	add.w	r9, r4, #25
 800c51e:	e7f5      	b.n	800c50c <_printf_i+0x1f8>
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1ac      	bne.n	800c47e <_printf_i+0x16a>
 800c524:	7803      	ldrb	r3, [r0, #0]
 800c526:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c52a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c52e:	e76c      	b.n	800c40a <_printf_i+0xf6>
 800c530:	08011722 	.word	0x08011722
 800c534:	08011733 	.word	0x08011733

0800c538 <iprintf>:
 800c538:	b40f      	push	{r0, r1, r2, r3}
 800c53a:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <iprintf+0x2c>)
 800c53c:	b513      	push	{r0, r1, r4, lr}
 800c53e:	681c      	ldr	r4, [r3, #0]
 800c540:	b124      	cbz	r4, 800c54c <iprintf+0x14>
 800c542:	69a3      	ldr	r3, [r4, #24]
 800c544:	b913      	cbnz	r3, 800c54c <iprintf+0x14>
 800c546:	4620      	mov	r0, r4
 800c548:	f000 fec2 	bl	800d2d0 <__sinit>
 800c54c:	ab05      	add	r3, sp, #20
 800c54e:	9a04      	ldr	r2, [sp, #16]
 800c550:	68a1      	ldr	r1, [r4, #8]
 800c552:	9301      	str	r3, [sp, #4]
 800c554:	4620      	mov	r0, r4
 800c556:	f001 fbc5 	bl	800dce4 <_vfiprintf_r>
 800c55a:	b002      	add	sp, #8
 800c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c560:	b004      	add	sp, #16
 800c562:	4770      	bx	lr
 800c564:	200000a8 	.word	0x200000a8

0800c568 <_sbrk_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4c06      	ldr	r4, [pc, #24]	; (800c584 <_sbrk_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4605      	mov	r5, r0
 800c570:	4608      	mov	r0, r1
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	f7f9 faf8 	bl	8005b68 <_sbrk>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_sbrk_r+0x1a>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_sbrk_r+0x1a>
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	20011390 	.word	0x20011390

0800c588 <siprintf>:
 800c588:	b40e      	push	{r1, r2, r3}
 800c58a:	b500      	push	{lr}
 800c58c:	b09c      	sub	sp, #112	; 0x70
 800c58e:	ab1d      	add	r3, sp, #116	; 0x74
 800c590:	9002      	str	r0, [sp, #8]
 800c592:	9006      	str	r0, [sp, #24]
 800c594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c598:	4809      	ldr	r0, [pc, #36]	; (800c5c0 <siprintf+0x38>)
 800c59a:	9107      	str	r1, [sp, #28]
 800c59c:	9104      	str	r1, [sp, #16]
 800c59e:	4909      	ldr	r1, [pc, #36]	; (800c5c4 <siprintf+0x3c>)
 800c5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a4:	9105      	str	r1, [sp, #20]
 800c5a6:	6800      	ldr	r0, [r0, #0]
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	a902      	add	r1, sp, #8
 800c5ac:	f001 fa78 	bl	800daa0 <_svfiprintf_r>
 800c5b0:	9b02      	ldr	r3, [sp, #8]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	b01c      	add	sp, #112	; 0x70
 800c5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5bc:	b003      	add	sp, #12
 800c5be:	4770      	bx	lr
 800c5c0:	200000a8 	.word	0x200000a8
 800c5c4:	ffff0208 	.word	0xffff0208

0800c5c8 <quorem>:
 800c5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	6903      	ldr	r3, [r0, #16]
 800c5ce:	690c      	ldr	r4, [r1, #16]
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	4680      	mov	r8, r0
 800c5d4:	f2c0 8082 	blt.w	800c6dc <quorem+0x114>
 800c5d8:	3c01      	subs	r4, #1
 800c5da:	f101 0714 	add.w	r7, r1, #20
 800c5de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c5e2:	f100 0614 	add.w	r6, r0, #20
 800c5e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c5ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c5ee:	eb06 030c 	add.w	r3, r6, ip
 800c5f2:	3501      	adds	r5, #1
 800c5f4:	eb07 090c 	add.w	r9, r7, ip
 800c5f8:	9301      	str	r3, [sp, #4]
 800c5fa:	fbb0 f5f5 	udiv	r5, r0, r5
 800c5fe:	b395      	cbz	r5, 800c666 <quorem+0x9e>
 800c600:	f04f 0a00 	mov.w	sl, #0
 800c604:	4638      	mov	r0, r7
 800c606:	46b6      	mov	lr, r6
 800c608:	46d3      	mov	fp, sl
 800c60a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c60e:	b293      	uxth	r3, r2
 800c610:	fb05 a303 	mla	r3, r5, r3, sl
 800c614:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c618:	b29b      	uxth	r3, r3
 800c61a:	ebab 0303 	sub.w	r3, fp, r3
 800c61e:	0c12      	lsrs	r2, r2, #16
 800c620:	f8de b000 	ldr.w	fp, [lr]
 800c624:	fb05 a202 	mla	r2, r5, r2, sl
 800c628:	fa13 f38b 	uxtah	r3, r3, fp
 800c62c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c630:	fa1f fb82 	uxth.w	fp, r2
 800c634:	f8de 2000 	ldr.w	r2, [lr]
 800c638:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c63c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c640:	b29b      	uxth	r3, r3
 800c642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c646:	4581      	cmp	r9, r0
 800c648:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c64c:	f84e 3b04 	str.w	r3, [lr], #4
 800c650:	d2db      	bcs.n	800c60a <quorem+0x42>
 800c652:	f856 300c 	ldr.w	r3, [r6, ip]
 800c656:	b933      	cbnz	r3, 800c666 <quorem+0x9e>
 800c658:	9b01      	ldr	r3, [sp, #4]
 800c65a:	3b04      	subs	r3, #4
 800c65c:	429e      	cmp	r6, r3
 800c65e:	461a      	mov	r2, r3
 800c660:	d330      	bcc.n	800c6c4 <quorem+0xfc>
 800c662:	f8c8 4010 	str.w	r4, [r8, #16]
 800c666:	4640      	mov	r0, r8
 800c668:	f001 f8ec 	bl	800d844 <__mcmp>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	db25      	blt.n	800c6bc <quorem+0xf4>
 800c670:	3501      	adds	r5, #1
 800c672:	4630      	mov	r0, r6
 800c674:	f04f 0c00 	mov.w	ip, #0
 800c678:	f857 2b04 	ldr.w	r2, [r7], #4
 800c67c:	f8d0 e000 	ldr.w	lr, [r0]
 800c680:	b293      	uxth	r3, r2
 800c682:	ebac 0303 	sub.w	r3, ip, r3
 800c686:	0c12      	lsrs	r2, r2, #16
 800c688:	fa13 f38e 	uxtah	r3, r3, lr
 800c68c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c690:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c694:	b29b      	uxth	r3, r3
 800c696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c69a:	45b9      	cmp	r9, r7
 800c69c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c6a0:	f840 3b04 	str.w	r3, [r0], #4
 800c6a4:	d2e8      	bcs.n	800c678 <quorem+0xb0>
 800c6a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c6aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c6ae:	b92a      	cbnz	r2, 800c6bc <quorem+0xf4>
 800c6b0:	3b04      	subs	r3, #4
 800c6b2:	429e      	cmp	r6, r3
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	d30b      	bcc.n	800c6d0 <quorem+0x108>
 800c6b8:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6bc:	4628      	mov	r0, r5
 800c6be:	b003      	add	sp, #12
 800c6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c4:	6812      	ldr	r2, [r2, #0]
 800c6c6:	3b04      	subs	r3, #4
 800c6c8:	2a00      	cmp	r2, #0
 800c6ca:	d1ca      	bne.n	800c662 <quorem+0x9a>
 800c6cc:	3c01      	subs	r4, #1
 800c6ce:	e7c5      	b.n	800c65c <quorem+0x94>
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	3b04      	subs	r3, #4
 800c6d4:	2a00      	cmp	r2, #0
 800c6d6:	d1ef      	bne.n	800c6b8 <quorem+0xf0>
 800c6d8:	3c01      	subs	r4, #1
 800c6da:	e7ea      	b.n	800c6b2 <quorem+0xea>
 800c6dc:	2000      	movs	r0, #0
 800c6de:	e7ee      	b.n	800c6be <quorem+0xf6>

0800c6e0 <_dtoa_r>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	ec57 6b10 	vmov	r6, r7, d0
 800c6e8:	b097      	sub	sp, #92	; 0x5c
 800c6ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6ec:	9106      	str	r1, [sp, #24]
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c6f2:	9312      	str	r3, [sp, #72]	; 0x48
 800c6f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6f8:	e9cd 6700 	strd	r6, r7, [sp]
 800c6fc:	b93d      	cbnz	r5, 800c70e <_dtoa_r+0x2e>
 800c6fe:	2010      	movs	r0, #16
 800c700:	f7ff fa06 	bl	800bb10 <malloc>
 800c704:	6260      	str	r0, [r4, #36]	; 0x24
 800c706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c70a:	6005      	str	r5, [r0, #0]
 800c70c:	60c5      	str	r5, [r0, #12]
 800c70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c710:	6819      	ldr	r1, [r3, #0]
 800c712:	b151      	cbz	r1, 800c72a <_dtoa_r+0x4a>
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	604a      	str	r2, [r1, #4]
 800c718:	2301      	movs	r3, #1
 800c71a:	4093      	lsls	r3, r2
 800c71c:	608b      	str	r3, [r1, #8]
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 feaf 	bl	800d482 <_Bfree>
 800c724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	1e3b      	subs	r3, r7, #0
 800c72c:	bfbb      	ittet	lt
 800c72e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c732:	9301      	strlt	r3, [sp, #4]
 800c734:	2300      	movge	r3, #0
 800c736:	2201      	movlt	r2, #1
 800c738:	bfac      	ite	ge
 800c73a:	f8c8 3000 	strge.w	r3, [r8]
 800c73e:	f8c8 2000 	strlt.w	r2, [r8]
 800c742:	4baf      	ldr	r3, [pc, #700]	; (800ca00 <_dtoa_r+0x320>)
 800c744:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c748:	ea33 0308 	bics.w	r3, r3, r8
 800c74c:	d114      	bne.n	800c778 <_dtoa_r+0x98>
 800c74e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c750:	f242 730f 	movw	r3, #9999	; 0x270f
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	9b00      	ldr	r3, [sp, #0]
 800c758:	b923      	cbnz	r3, 800c764 <_dtoa_r+0x84>
 800c75a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c75e:	2800      	cmp	r0, #0
 800c760:	f000 8542 	beq.w	800d1e8 <_dtoa_r+0xb08>
 800c764:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c766:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ca14 <_dtoa_r+0x334>
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 8544 	beq.w	800d1f8 <_dtoa_r+0xb18>
 800c770:	f10b 0303 	add.w	r3, fp, #3
 800c774:	f000 bd3e 	b.w	800d1f4 <_dtoa_r+0xb14>
 800c778:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c77c:	2200      	movs	r2, #0
 800c77e:	2300      	movs	r3, #0
 800c780:	4630      	mov	r0, r6
 800c782:	4639      	mov	r1, r7
 800c784:	f7f4 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c788:	4681      	mov	r9, r0
 800c78a:	b168      	cbz	r0, 800c7a8 <_dtoa_r+0xc8>
 800c78c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c78e:	2301      	movs	r3, #1
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 8524 	beq.w	800d1e2 <_dtoa_r+0xb02>
 800c79a:	4b9a      	ldr	r3, [pc, #616]	; (800ca04 <_dtoa_r+0x324>)
 800c79c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c79e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	f000 bd28 	b.w	800d1f8 <_dtoa_r+0xb18>
 800c7a8:	aa14      	add	r2, sp, #80	; 0x50
 800c7aa:	a915      	add	r1, sp, #84	; 0x54
 800c7ac:	ec47 6b10 	vmov	d0, r6, r7
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f001 f8be 	bl	800d932 <__d2b>
 800c7b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c7ba:	9004      	str	r0, [sp, #16]
 800c7bc:	2d00      	cmp	r5, #0
 800c7be:	d07c      	beq.n	800c8ba <_dtoa_r+0x1da>
 800c7c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c7c8:	46b2      	mov	sl, r6
 800c7ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c7ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	4b8b      	ldr	r3, [pc, #556]	; (800ca08 <_dtoa_r+0x328>)
 800c7da:	4650      	mov	r0, sl
 800c7dc:	4659      	mov	r1, fp
 800c7de:	f7f3 fd53 	bl	8000288 <__aeabi_dsub>
 800c7e2:	a381      	add	r3, pc, #516	; (adr r3, 800c9e8 <_dtoa_r+0x308>)
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	f7f3 ff06 	bl	80005f8 <__aeabi_dmul>
 800c7ec:	a380      	add	r3, pc, #512	; (adr r3, 800c9f0 <_dtoa_r+0x310>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	f7f3 fd4b 	bl	800028c <__adddf3>
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	460f      	mov	r7, r1
 800c7fc:	f7f3 fe92 	bl	8000524 <__aeabi_i2d>
 800c800:	a37d      	add	r3, pc, #500	; (adr r3, 800c9f8 <_dtoa_r+0x318>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	f7f3 fef7 	bl	80005f8 <__aeabi_dmul>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4630      	mov	r0, r6
 800c810:	4639      	mov	r1, r7
 800c812:	f7f3 fd3b 	bl	800028c <__adddf3>
 800c816:	4606      	mov	r6, r0
 800c818:	460f      	mov	r7, r1
 800c81a:	f7f4 f99d 	bl	8000b58 <__aeabi_d2iz>
 800c81e:	2200      	movs	r2, #0
 800c820:	4682      	mov	sl, r0
 800c822:	2300      	movs	r3, #0
 800c824:	4630      	mov	r0, r6
 800c826:	4639      	mov	r1, r7
 800c828:	f7f4 f958 	bl	8000adc <__aeabi_dcmplt>
 800c82c:	b148      	cbz	r0, 800c842 <_dtoa_r+0x162>
 800c82e:	4650      	mov	r0, sl
 800c830:	f7f3 fe78 	bl	8000524 <__aeabi_i2d>
 800c834:	4632      	mov	r2, r6
 800c836:	463b      	mov	r3, r7
 800c838:	f7f4 f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800c83c:	b908      	cbnz	r0, 800c842 <_dtoa_r+0x162>
 800c83e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c842:	f1ba 0f16 	cmp.w	sl, #22
 800c846:	d859      	bhi.n	800c8fc <_dtoa_r+0x21c>
 800c848:	4970      	ldr	r1, [pc, #448]	; (800ca0c <_dtoa_r+0x32c>)
 800c84a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c852:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c856:	f7f4 f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d050      	beq.n	800c900 <_dtoa_r+0x220>
 800c85e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c862:	2300      	movs	r3, #0
 800c864:	930f      	str	r3, [sp, #60]	; 0x3c
 800c866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c868:	1b5d      	subs	r5, r3, r5
 800c86a:	f1b5 0801 	subs.w	r8, r5, #1
 800c86e:	bf49      	itett	mi
 800c870:	f1c5 0301 	rsbmi	r3, r5, #1
 800c874:	2300      	movpl	r3, #0
 800c876:	9305      	strmi	r3, [sp, #20]
 800c878:	f04f 0800 	movmi.w	r8, #0
 800c87c:	bf58      	it	pl
 800c87e:	9305      	strpl	r3, [sp, #20]
 800c880:	f1ba 0f00 	cmp.w	sl, #0
 800c884:	db3e      	blt.n	800c904 <_dtoa_r+0x224>
 800c886:	2300      	movs	r3, #0
 800c888:	44d0      	add	r8, sl
 800c88a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	9b06      	ldr	r3, [sp, #24]
 800c892:	2b09      	cmp	r3, #9
 800c894:	f200 8090 	bhi.w	800c9b8 <_dtoa_r+0x2d8>
 800c898:	2b05      	cmp	r3, #5
 800c89a:	bfc4      	itt	gt
 800c89c:	3b04      	subgt	r3, #4
 800c89e:	9306      	strgt	r3, [sp, #24]
 800c8a0:	9b06      	ldr	r3, [sp, #24]
 800c8a2:	f1a3 0302 	sub.w	r3, r3, #2
 800c8a6:	bfcc      	ite	gt
 800c8a8:	2500      	movgt	r5, #0
 800c8aa:	2501      	movle	r5, #1
 800c8ac:	2b03      	cmp	r3, #3
 800c8ae:	f200 808f 	bhi.w	800c9d0 <_dtoa_r+0x2f0>
 800c8b2:	e8df f003 	tbb	[pc, r3]
 800c8b6:	7f7d      	.short	0x7f7d
 800c8b8:	7131      	.short	0x7131
 800c8ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c8be:	441d      	add	r5, r3
 800c8c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c8c4:	2820      	cmp	r0, #32
 800c8c6:	dd13      	ble.n	800c8f0 <_dtoa_r+0x210>
 800c8c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	fa08 f800 	lsl.w	r8, r8, r0
 800c8d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c8d6:	fa23 f000 	lsr.w	r0, r3, r0
 800c8da:	ea48 0000 	orr.w	r0, r8, r0
 800c8de:	f7f3 fe11 	bl	8000504 <__aeabi_ui2d>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	4682      	mov	sl, r0
 800c8e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c8ea:	3d01      	subs	r5, #1
 800c8ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800c8ee:	e772      	b.n	800c7d6 <_dtoa_r+0xf6>
 800c8f0:	9b00      	ldr	r3, [sp, #0]
 800c8f2:	f1c0 0020 	rsb	r0, r0, #32
 800c8f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c8fa:	e7f0      	b.n	800c8de <_dtoa_r+0x1fe>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e7b1      	b.n	800c864 <_dtoa_r+0x184>
 800c900:	900f      	str	r0, [sp, #60]	; 0x3c
 800c902:	e7b0      	b.n	800c866 <_dtoa_r+0x186>
 800c904:	9b05      	ldr	r3, [sp, #20]
 800c906:	eba3 030a 	sub.w	r3, r3, sl
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	f1ca 0300 	rsb	r3, sl, #0
 800c910:	9307      	str	r3, [sp, #28]
 800c912:	2300      	movs	r3, #0
 800c914:	930e      	str	r3, [sp, #56]	; 0x38
 800c916:	e7bb      	b.n	800c890 <_dtoa_r+0x1b0>
 800c918:	2301      	movs	r3, #1
 800c91a:	930a      	str	r3, [sp, #40]	; 0x28
 800c91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dd59      	ble.n	800c9d6 <_dtoa_r+0x2f6>
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	4699      	mov	r9, r3
 800c926:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c928:	2200      	movs	r2, #0
 800c92a:	6072      	str	r2, [r6, #4]
 800c92c:	2204      	movs	r2, #4
 800c92e:	f102 0014 	add.w	r0, r2, #20
 800c932:	4298      	cmp	r0, r3
 800c934:	6871      	ldr	r1, [r6, #4]
 800c936:	d953      	bls.n	800c9e0 <_dtoa_r+0x300>
 800c938:	4620      	mov	r0, r4
 800c93a:	f000 fd6e 	bl	800d41a <_Balloc>
 800c93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c940:	6030      	str	r0, [r6, #0]
 800c942:	f1b9 0f0e 	cmp.w	r9, #14
 800c946:	f8d3 b000 	ldr.w	fp, [r3]
 800c94a:	f200 80e6 	bhi.w	800cb1a <_dtoa_r+0x43a>
 800c94e:	2d00      	cmp	r5, #0
 800c950:	f000 80e3 	beq.w	800cb1a <_dtoa_r+0x43a>
 800c954:	ed9d 7b00 	vldr	d7, [sp]
 800c958:	f1ba 0f00 	cmp.w	sl, #0
 800c95c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c960:	dd74      	ble.n	800ca4c <_dtoa_r+0x36c>
 800c962:	4a2a      	ldr	r2, [pc, #168]	; (800ca0c <_dtoa_r+0x32c>)
 800c964:	f00a 030f 	and.w	r3, sl, #15
 800c968:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c96c:	ed93 7b00 	vldr	d7, [r3]
 800c970:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c974:	06f0      	lsls	r0, r6, #27
 800c976:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c97a:	d565      	bpl.n	800ca48 <_dtoa_r+0x368>
 800c97c:	4b24      	ldr	r3, [pc, #144]	; (800ca10 <_dtoa_r+0x330>)
 800c97e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c982:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c986:	f7f3 ff61 	bl	800084c <__aeabi_ddiv>
 800c98a:	e9cd 0100 	strd	r0, r1, [sp]
 800c98e:	f006 060f 	and.w	r6, r6, #15
 800c992:	2503      	movs	r5, #3
 800c994:	4f1e      	ldr	r7, [pc, #120]	; (800ca10 <_dtoa_r+0x330>)
 800c996:	e04c      	b.n	800ca32 <_dtoa_r+0x352>
 800c998:	2301      	movs	r3, #1
 800c99a:	930a      	str	r3, [sp, #40]	; 0x28
 800c99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c99e:	4453      	add	r3, sl
 800c9a0:	f103 0901 	add.w	r9, r3, #1
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	bfb8      	it	lt
 800c9ac:	2301      	movlt	r3, #1
 800c9ae:	e7ba      	b.n	800c926 <_dtoa_r+0x246>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e7b2      	b.n	800c91a <_dtoa_r+0x23a>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	e7f0      	b.n	800c99a <_dtoa_r+0x2ba>
 800c9b8:	2501      	movs	r5, #1
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	9306      	str	r3, [sp, #24]
 800c9be:	950a      	str	r5, [sp, #40]	; 0x28
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c4:	9302      	str	r3, [sp, #8]
 800c9c6:	4699      	mov	r9, r3
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2312      	movs	r3, #18
 800c9cc:	920b      	str	r2, [sp, #44]	; 0x2c
 800c9ce:	e7aa      	b.n	800c926 <_dtoa_r+0x246>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9d4:	e7f4      	b.n	800c9c0 <_dtoa_r+0x2e0>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	9302      	str	r3, [sp, #8]
 800c9da:	4699      	mov	r9, r3
 800c9dc:	461a      	mov	r2, r3
 800c9de:	e7f5      	b.n	800c9cc <_dtoa_r+0x2ec>
 800c9e0:	3101      	adds	r1, #1
 800c9e2:	6071      	str	r1, [r6, #4]
 800c9e4:	0052      	lsls	r2, r2, #1
 800c9e6:	e7a2      	b.n	800c92e <_dtoa_r+0x24e>
 800c9e8:	636f4361 	.word	0x636f4361
 800c9ec:	3fd287a7 	.word	0x3fd287a7
 800c9f0:	8b60c8b3 	.word	0x8b60c8b3
 800c9f4:	3fc68a28 	.word	0x3fc68a28
 800c9f8:	509f79fb 	.word	0x509f79fb
 800c9fc:	3fd34413 	.word	0x3fd34413
 800ca00:	7ff00000 	.word	0x7ff00000
 800ca04:	08011721 	.word	0x08011721
 800ca08:	3ff80000 	.word	0x3ff80000
 800ca0c:	080117e0 	.word	0x080117e0
 800ca10:	080117b8 	.word	0x080117b8
 800ca14:	0801174d 	.word	0x0801174d
 800ca18:	07f1      	lsls	r1, r6, #31
 800ca1a:	d508      	bpl.n	800ca2e <_dtoa_r+0x34e>
 800ca1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca24:	f7f3 fde8 	bl	80005f8 <__aeabi_dmul>
 800ca28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	1076      	asrs	r6, r6, #1
 800ca30:	3708      	adds	r7, #8
 800ca32:	2e00      	cmp	r6, #0
 800ca34:	d1f0      	bne.n	800ca18 <_dtoa_r+0x338>
 800ca36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca3e:	f7f3 ff05 	bl	800084c <__aeabi_ddiv>
 800ca42:	e9cd 0100 	strd	r0, r1, [sp]
 800ca46:	e01a      	b.n	800ca7e <_dtoa_r+0x39e>
 800ca48:	2502      	movs	r5, #2
 800ca4a:	e7a3      	b.n	800c994 <_dtoa_r+0x2b4>
 800ca4c:	f000 80a0 	beq.w	800cb90 <_dtoa_r+0x4b0>
 800ca50:	f1ca 0600 	rsb	r6, sl, #0
 800ca54:	4b9f      	ldr	r3, [pc, #636]	; (800ccd4 <_dtoa_r+0x5f4>)
 800ca56:	4fa0      	ldr	r7, [pc, #640]	; (800ccd8 <_dtoa_r+0x5f8>)
 800ca58:	f006 020f 	and.w	r2, r6, #15
 800ca5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca68:	f7f3 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ca6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ca70:	1136      	asrs	r6, r6, #4
 800ca72:	2300      	movs	r3, #0
 800ca74:	2502      	movs	r5, #2
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	d17f      	bne.n	800cb7a <_dtoa_r+0x49a>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e1      	bne.n	800ca42 <_dtoa_r+0x362>
 800ca7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 8087 	beq.w	800cb94 <_dtoa_r+0x4b4>
 800ca86:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4b93      	ldr	r3, [pc, #588]	; (800ccdc <_dtoa_r+0x5fc>)
 800ca8e:	4630      	mov	r0, r6
 800ca90:	4639      	mov	r1, r7
 800ca92:	f7f4 f823 	bl	8000adc <__aeabi_dcmplt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d07c      	beq.n	800cb94 <_dtoa_r+0x4b4>
 800ca9a:	f1b9 0f00 	cmp.w	r9, #0
 800ca9e:	d079      	beq.n	800cb94 <_dtoa_r+0x4b4>
 800caa0:	9b02      	ldr	r3, [sp, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	dd35      	ble.n	800cb12 <_dtoa_r+0x432>
 800caa6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800caaa:	9308      	str	r3, [sp, #32]
 800caac:	4639      	mov	r1, r7
 800caae:	2200      	movs	r2, #0
 800cab0:	4b8b      	ldr	r3, [pc, #556]	; (800cce0 <_dtoa_r+0x600>)
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7f3 fda0 	bl	80005f8 <__aeabi_dmul>
 800cab8:	e9cd 0100 	strd	r0, r1, [sp]
 800cabc:	9f02      	ldr	r7, [sp, #8]
 800cabe:	3501      	adds	r5, #1
 800cac0:	4628      	mov	r0, r5
 800cac2:	f7f3 fd2f 	bl	8000524 <__aeabi_i2d>
 800cac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caca:	f7f3 fd95 	bl	80005f8 <__aeabi_dmul>
 800cace:	2200      	movs	r2, #0
 800cad0:	4b84      	ldr	r3, [pc, #528]	; (800cce4 <_dtoa_r+0x604>)
 800cad2:	f7f3 fbdb 	bl	800028c <__adddf3>
 800cad6:	4605      	mov	r5, r0
 800cad8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cadc:	2f00      	cmp	r7, #0
 800cade:	d15d      	bne.n	800cb9c <_dtoa_r+0x4bc>
 800cae0:	2200      	movs	r2, #0
 800cae2:	4b81      	ldr	r3, [pc, #516]	; (800cce8 <_dtoa_r+0x608>)
 800cae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cae8:	f7f3 fbce 	bl	8000288 <__aeabi_dsub>
 800caec:	462a      	mov	r2, r5
 800caee:	4633      	mov	r3, r6
 800caf0:	e9cd 0100 	strd	r0, r1, [sp]
 800caf4:	f7f4 f810 	bl	8000b18 <__aeabi_dcmpgt>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f040 8288 	bne.w	800d00e <_dtoa_r+0x92e>
 800cafe:	462a      	mov	r2, r5
 800cb00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb08:	f7f3 ffe8 	bl	8000adc <__aeabi_dcmplt>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	f040 827c 	bne.w	800d00a <_dtoa_r+0x92a>
 800cb12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb16:	e9cd 2300 	strd	r2, r3, [sp]
 800cb1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f2c0 8150 	blt.w	800cdc2 <_dtoa_r+0x6e2>
 800cb22:	f1ba 0f0e 	cmp.w	sl, #14
 800cb26:	f300 814c 	bgt.w	800cdc2 <_dtoa_r+0x6e2>
 800cb2a:	4b6a      	ldr	r3, [pc, #424]	; (800ccd4 <_dtoa_r+0x5f4>)
 800cb2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb30:	ed93 7b00 	vldr	d7, [r3]
 800cb34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb3c:	f280 80d8 	bge.w	800ccf0 <_dtoa_r+0x610>
 800cb40:	f1b9 0f00 	cmp.w	r9, #0
 800cb44:	f300 80d4 	bgt.w	800ccf0 <_dtoa_r+0x610>
 800cb48:	f040 825e 	bne.w	800d008 <_dtoa_r+0x928>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4b66      	ldr	r3, [pc, #408]	; (800cce8 <_dtoa_r+0x608>)
 800cb50:	ec51 0b17 	vmov	r0, r1, d7
 800cb54:	f7f3 fd50 	bl	80005f8 <__aeabi_dmul>
 800cb58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb5c:	f7f3 ffd2 	bl	8000b04 <__aeabi_dcmpge>
 800cb60:	464f      	mov	r7, r9
 800cb62:	464e      	mov	r6, r9
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f040 8234 	bne.w	800cfd2 <_dtoa_r+0x8f2>
 800cb6a:	2331      	movs	r3, #49	; 0x31
 800cb6c:	f10b 0501 	add.w	r5, fp, #1
 800cb70:	f88b 3000 	strb.w	r3, [fp]
 800cb74:	f10a 0a01 	add.w	sl, sl, #1
 800cb78:	e22f      	b.n	800cfda <_dtoa_r+0x8fa>
 800cb7a:	07f2      	lsls	r2, r6, #31
 800cb7c:	d505      	bpl.n	800cb8a <_dtoa_r+0x4aa>
 800cb7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb82:	f7f3 fd39 	bl	80005f8 <__aeabi_dmul>
 800cb86:	3501      	adds	r5, #1
 800cb88:	2301      	movs	r3, #1
 800cb8a:	1076      	asrs	r6, r6, #1
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	e772      	b.n	800ca76 <_dtoa_r+0x396>
 800cb90:	2502      	movs	r5, #2
 800cb92:	e774      	b.n	800ca7e <_dtoa_r+0x39e>
 800cb94:	f8cd a020 	str.w	sl, [sp, #32]
 800cb98:	464f      	mov	r7, r9
 800cb9a:	e791      	b.n	800cac0 <_dtoa_r+0x3e0>
 800cb9c:	4b4d      	ldr	r3, [pc, #308]	; (800ccd4 <_dtoa_r+0x5f4>)
 800cb9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cba2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d047      	beq.n	800cc3c <_dtoa_r+0x55c>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	494e      	ldr	r1, [pc, #312]	; (800ccec <_dtoa_r+0x60c>)
 800cbb4:	f7f3 fe4a 	bl	800084c <__aeabi_ddiv>
 800cbb8:	462a      	mov	r2, r5
 800cbba:	4633      	mov	r3, r6
 800cbbc:	f7f3 fb64 	bl	8000288 <__aeabi_dsub>
 800cbc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cbc4:	465d      	mov	r5, fp
 800cbc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbca:	f7f3 ffc5 	bl	8000b58 <__aeabi_d2iz>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	f7f3 fca8 	bl	8000524 <__aeabi_i2d>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	3630      	adds	r6, #48	; 0x30
 800cbe2:	f805 6b01 	strb.w	r6, [r5], #1
 800cbe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cbea:	e9cd 0100 	strd	r0, r1, [sp]
 800cbee:	f7f3 ff75 	bl	8000adc <__aeabi_dcmplt>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d163      	bne.n	800ccbe <_dtoa_r+0x5de>
 800cbf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	4937      	ldr	r1, [pc, #220]	; (800ccdc <_dtoa_r+0x5fc>)
 800cbfe:	f7f3 fb43 	bl	8000288 <__aeabi_dsub>
 800cc02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc06:	f7f3 ff69 	bl	8000adc <__aeabi_dcmplt>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	f040 80b7 	bne.w	800cd7e <_dtoa_r+0x69e>
 800cc10:	eba5 030b 	sub.w	r3, r5, fp
 800cc14:	429f      	cmp	r7, r3
 800cc16:	f77f af7c 	ble.w	800cb12 <_dtoa_r+0x432>
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4b30      	ldr	r3, [pc, #192]	; (800cce0 <_dtoa_r+0x600>)
 800cc1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc22:	f7f3 fce9 	bl	80005f8 <__aeabi_dmul>
 800cc26:	2200      	movs	r2, #0
 800cc28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc2c:	4b2c      	ldr	r3, [pc, #176]	; (800cce0 <_dtoa_r+0x600>)
 800cc2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc32:	f7f3 fce1 	bl	80005f8 <__aeabi_dmul>
 800cc36:	e9cd 0100 	strd	r0, r1, [sp]
 800cc3a:	e7c4      	b.n	800cbc6 <_dtoa_r+0x4e6>
 800cc3c:	462a      	mov	r2, r5
 800cc3e:	4633      	mov	r3, r6
 800cc40:	f7f3 fcda 	bl	80005f8 <__aeabi_dmul>
 800cc44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc48:	eb0b 0507 	add.w	r5, fp, r7
 800cc4c:	465e      	mov	r6, fp
 800cc4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc52:	f7f3 ff81 	bl	8000b58 <__aeabi_d2iz>
 800cc56:	4607      	mov	r7, r0
 800cc58:	f7f3 fc64 	bl	8000524 <__aeabi_i2d>
 800cc5c:	3730      	adds	r7, #48	; 0x30
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc66:	f7f3 fb0f 	bl	8000288 <__aeabi_dsub>
 800cc6a:	f806 7b01 	strb.w	r7, [r6], #1
 800cc6e:	42ae      	cmp	r6, r5
 800cc70:	e9cd 0100 	strd	r0, r1, [sp]
 800cc74:	f04f 0200 	mov.w	r2, #0
 800cc78:	d126      	bne.n	800ccc8 <_dtoa_r+0x5e8>
 800cc7a:	4b1c      	ldr	r3, [pc, #112]	; (800ccec <_dtoa_r+0x60c>)
 800cc7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc80:	f7f3 fb04 	bl	800028c <__adddf3>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc8c:	f7f3 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d174      	bne.n	800cd7e <_dtoa_r+0x69e>
 800cc94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc98:	2000      	movs	r0, #0
 800cc9a:	4914      	ldr	r1, [pc, #80]	; (800ccec <_dtoa_r+0x60c>)
 800cc9c:	f7f3 faf4 	bl	8000288 <__aeabi_dsub>
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cca8:	f7f3 ff18 	bl	8000adc <__aeabi_dcmplt>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f43f af30 	beq.w	800cb12 <_dtoa_r+0x432>
 800ccb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccb6:	2b30      	cmp	r3, #48	; 0x30
 800ccb8:	f105 32ff 	add.w	r2, r5, #4294967295
 800ccbc:	d002      	beq.n	800ccc4 <_dtoa_r+0x5e4>
 800ccbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ccc2:	e04a      	b.n	800cd5a <_dtoa_r+0x67a>
 800ccc4:	4615      	mov	r5, r2
 800ccc6:	e7f4      	b.n	800ccb2 <_dtoa_r+0x5d2>
 800ccc8:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <_dtoa_r+0x600>)
 800ccca:	f7f3 fc95 	bl	80005f8 <__aeabi_dmul>
 800ccce:	e9cd 0100 	strd	r0, r1, [sp]
 800ccd2:	e7bc      	b.n	800cc4e <_dtoa_r+0x56e>
 800ccd4:	080117e0 	.word	0x080117e0
 800ccd8:	080117b8 	.word	0x080117b8
 800ccdc:	3ff00000 	.word	0x3ff00000
 800cce0:	40240000 	.word	0x40240000
 800cce4:	401c0000 	.word	0x401c0000
 800cce8:	40140000 	.word	0x40140000
 800ccec:	3fe00000 	.word	0x3fe00000
 800ccf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ccf4:	465d      	mov	r5, fp
 800ccf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 fda5 	bl	800084c <__aeabi_ddiv>
 800cd02:	f7f3 ff29 	bl	8000b58 <__aeabi_d2iz>
 800cd06:	4680      	mov	r8, r0
 800cd08:	f7f3 fc0c 	bl	8000524 <__aeabi_i2d>
 800cd0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd10:	f7f3 fc72 	bl	80005f8 <__aeabi_dmul>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cd20:	f7f3 fab2 	bl	8000288 <__aeabi_dsub>
 800cd24:	f805 6b01 	strb.w	r6, [r5], #1
 800cd28:	eba5 060b 	sub.w	r6, r5, fp
 800cd2c:	45b1      	cmp	r9, r6
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	d139      	bne.n	800cda8 <_dtoa_r+0x6c8>
 800cd34:	f7f3 faaa 	bl	800028c <__adddf3>
 800cd38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	460f      	mov	r7, r1
 800cd40:	f7f3 feea 	bl	8000b18 <__aeabi_dcmpgt>
 800cd44:	b9c8      	cbnz	r0, 800cd7a <_dtoa_r+0x69a>
 800cd46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd52:	b110      	cbz	r0, 800cd5a <_dtoa_r+0x67a>
 800cd54:	f018 0f01 	tst.w	r8, #1
 800cd58:	d10f      	bne.n	800cd7a <_dtoa_r+0x69a>
 800cd5a:	9904      	ldr	r1, [sp, #16]
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f000 fb90 	bl	800d482 <_Bfree>
 800cd62:	2300      	movs	r3, #0
 800cd64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd66:	702b      	strb	r3, [r5, #0]
 800cd68:	f10a 0301 	add.w	r3, sl, #1
 800cd6c:	6013      	str	r3, [r2, #0]
 800cd6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f000 8241 	beq.w	800d1f8 <_dtoa_r+0xb18>
 800cd76:	601d      	str	r5, [r3, #0]
 800cd78:	e23e      	b.n	800d1f8 <_dtoa_r+0xb18>
 800cd7a:	f8cd a020 	str.w	sl, [sp, #32]
 800cd7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd82:	2a39      	cmp	r2, #57	; 0x39
 800cd84:	f105 33ff 	add.w	r3, r5, #4294967295
 800cd88:	d108      	bne.n	800cd9c <_dtoa_r+0x6bc>
 800cd8a:	459b      	cmp	fp, r3
 800cd8c:	d10a      	bne.n	800cda4 <_dtoa_r+0x6c4>
 800cd8e:	9b08      	ldr	r3, [sp, #32]
 800cd90:	3301      	adds	r3, #1
 800cd92:	9308      	str	r3, [sp, #32]
 800cd94:	2330      	movs	r3, #48	; 0x30
 800cd96:	f88b 3000 	strb.w	r3, [fp]
 800cd9a:	465b      	mov	r3, fp
 800cd9c:	781a      	ldrb	r2, [r3, #0]
 800cd9e:	3201      	adds	r2, #1
 800cda0:	701a      	strb	r2, [r3, #0]
 800cda2:	e78c      	b.n	800ccbe <_dtoa_r+0x5de>
 800cda4:	461d      	mov	r5, r3
 800cda6:	e7ea      	b.n	800cd7e <_dtoa_r+0x69e>
 800cda8:	2200      	movs	r2, #0
 800cdaa:	4b9b      	ldr	r3, [pc, #620]	; (800d018 <_dtoa_r+0x938>)
 800cdac:	f7f3 fc24 	bl	80005f8 <__aeabi_dmul>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	f7f3 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d09a      	beq.n	800ccf6 <_dtoa_r+0x616>
 800cdc0:	e7cb      	b.n	800cd5a <_dtoa_r+0x67a>
 800cdc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdc4:	2a00      	cmp	r2, #0
 800cdc6:	f000 808b 	beq.w	800cee0 <_dtoa_r+0x800>
 800cdca:	9a06      	ldr	r2, [sp, #24]
 800cdcc:	2a01      	cmp	r2, #1
 800cdce:	dc6e      	bgt.n	800ceae <_dtoa_r+0x7ce>
 800cdd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d067      	beq.n	800cea6 <_dtoa_r+0x7c6>
 800cdd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdda:	9f07      	ldr	r7, [sp, #28]
 800cddc:	9d05      	ldr	r5, [sp, #20]
 800cdde:	9a05      	ldr	r2, [sp, #20]
 800cde0:	2101      	movs	r1, #1
 800cde2:	441a      	add	r2, r3
 800cde4:	4620      	mov	r0, r4
 800cde6:	9205      	str	r2, [sp, #20]
 800cde8:	4498      	add	r8, r3
 800cdea:	f000 fbea 	bl	800d5c2 <__i2b>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	dd0c      	ble.n	800ce0e <_dtoa_r+0x72e>
 800cdf4:	f1b8 0f00 	cmp.w	r8, #0
 800cdf8:	dd09      	ble.n	800ce0e <_dtoa_r+0x72e>
 800cdfa:	4545      	cmp	r5, r8
 800cdfc:	9a05      	ldr	r2, [sp, #20]
 800cdfe:	462b      	mov	r3, r5
 800ce00:	bfa8      	it	ge
 800ce02:	4643      	movge	r3, r8
 800ce04:	1ad2      	subs	r2, r2, r3
 800ce06:	9205      	str	r2, [sp, #20]
 800ce08:	1aed      	subs	r5, r5, r3
 800ce0a:	eba8 0803 	sub.w	r8, r8, r3
 800ce0e:	9b07      	ldr	r3, [sp, #28]
 800ce10:	b1eb      	cbz	r3, 800ce4e <_dtoa_r+0x76e>
 800ce12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d067      	beq.n	800cee8 <_dtoa_r+0x808>
 800ce18:	b18f      	cbz	r7, 800ce3e <_dtoa_r+0x75e>
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	463a      	mov	r2, r7
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 fc6e 	bl	800d700 <__pow5mult>
 800ce24:	9a04      	ldr	r2, [sp, #16]
 800ce26:	4601      	mov	r1, r0
 800ce28:	4606      	mov	r6, r0
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 fbd2 	bl	800d5d4 <__multiply>
 800ce30:	9904      	ldr	r1, [sp, #16]
 800ce32:	9008      	str	r0, [sp, #32]
 800ce34:	4620      	mov	r0, r4
 800ce36:	f000 fb24 	bl	800d482 <_Bfree>
 800ce3a:	9b08      	ldr	r3, [sp, #32]
 800ce3c:	9304      	str	r3, [sp, #16]
 800ce3e:	9b07      	ldr	r3, [sp, #28]
 800ce40:	1bda      	subs	r2, r3, r7
 800ce42:	d004      	beq.n	800ce4e <_dtoa_r+0x76e>
 800ce44:	9904      	ldr	r1, [sp, #16]
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 fc5a 	bl	800d700 <__pow5mult>
 800ce4c:	9004      	str	r0, [sp, #16]
 800ce4e:	2101      	movs	r1, #1
 800ce50:	4620      	mov	r0, r4
 800ce52:	f000 fbb6 	bl	800d5c2 <__i2b>
 800ce56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce58:	4607      	mov	r7, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 81d0 	beq.w	800d200 <_dtoa_r+0xb20>
 800ce60:	461a      	mov	r2, r3
 800ce62:	4601      	mov	r1, r0
 800ce64:	4620      	mov	r0, r4
 800ce66:	f000 fc4b 	bl	800d700 <__pow5mult>
 800ce6a:	9b06      	ldr	r3, [sp, #24]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	4607      	mov	r7, r0
 800ce70:	dc40      	bgt.n	800cef4 <_dtoa_r+0x814>
 800ce72:	9b00      	ldr	r3, [sp, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d139      	bne.n	800ceec <_dtoa_r+0x80c>
 800ce78:	9b01      	ldr	r3, [sp, #4]
 800ce7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d136      	bne.n	800cef0 <_dtoa_r+0x810>
 800ce82:	9b01      	ldr	r3, [sp, #4]
 800ce84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce88:	0d1b      	lsrs	r3, r3, #20
 800ce8a:	051b      	lsls	r3, r3, #20
 800ce8c:	b12b      	cbz	r3, 800ce9a <_dtoa_r+0x7ba>
 800ce8e:	9b05      	ldr	r3, [sp, #20]
 800ce90:	3301      	adds	r3, #1
 800ce92:	9305      	str	r3, [sp, #20]
 800ce94:	f108 0801 	add.w	r8, r8, #1
 800ce98:	2301      	movs	r3, #1
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d12a      	bne.n	800cef8 <_dtoa_r+0x818>
 800cea2:	2001      	movs	r0, #1
 800cea4:	e030      	b.n	800cf08 <_dtoa_r+0x828>
 800cea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cea8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ceac:	e795      	b.n	800cdda <_dtoa_r+0x6fa>
 800ceae:	9b07      	ldr	r3, [sp, #28]
 800ceb0:	f109 37ff 	add.w	r7, r9, #4294967295
 800ceb4:	42bb      	cmp	r3, r7
 800ceb6:	bfbf      	itttt	lt
 800ceb8:	9b07      	ldrlt	r3, [sp, #28]
 800ceba:	9707      	strlt	r7, [sp, #28]
 800cebc:	1afa      	sublt	r2, r7, r3
 800cebe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cec0:	bfbb      	ittet	lt
 800cec2:	189b      	addlt	r3, r3, r2
 800cec4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cec6:	1bdf      	subge	r7, r3, r7
 800cec8:	2700      	movlt	r7, #0
 800ceca:	f1b9 0f00 	cmp.w	r9, #0
 800cece:	bfb5      	itete	lt
 800ced0:	9b05      	ldrlt	r3, [sp, #20]
 800ced2:	9d05      	ldrge	r5, [sp, #20]
 800ced4:	eba3 0509 	sublt.w	r5, r3, r9
 800ced8:	464b      	movge	r3, r9
 800ceda:	bfb8      	it	lt
 800cedc:	2300      	movlt	r3, #0
 800cede:	e77e      	b.n	800cdde <_dtoa_r+0x6fe>
 800cee0:	9f07      	ldr	r7, [sp, #28]
 800cee2:	9d05      	ldr	r5, [sp, #20]
 800cee4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cee6:	e783      	b.n	800cdf0 <_dtoa_r+0x710>
 800cee8:	9a07      	ldr	r2, [sp, #28]
 800ceea:	e7ab      	b.n	800ce44 <_dtoa_r+0x764>
 800ceec:	2300      	movs	r3, #0
 800ceee:	e7d4      	b.n	800ce9a <_dtoa_r+0x7ba>
 800cef0:	9b00      	ldr	r3, [sp, #0]
 800cef2:	e7d2      	b.n	800ce9a <_dtoa_r+0x7ba>
 800cef4:	2300      	movs	r3, #0
 800cef6:	9307      	str	r3, [sp, #28]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cefe:	6918      	ldr	r0, [r3, #16]
 800cf00:	f000 fb11 	bl	800d526 <__hi0bits>
 800cf04:	f1c0 0020 	rsb	r0, r0, #32
 800cf08:	4440      	add	r0, r8
 800cf0a:	f010 001f 	ands.w	r0, r0, #31
 800cf0e:	d047      	beq.n	800cfa0 <_dtoa_r+0x8c0>
 800cf10:	f1c0 0320 	rsb	r3, r0, #32
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	dd3b      	ble.n	800cf90 <_dtoa_r+0x8b0>
 800cf18:	9b05      	ldr	r3, [sp, #20]
 800cf1a:	f1c0 001c 	rsb	r0, r0, #28
 800cf1e:	4403      	add	r3, r0
 800cf20:	9305      	str	r3, [sp, #20]
 800cf22:	4405      	add	r5, r0
 800cf24:	4480      	add	r8, r0
 800cf26:	9b05      	ldr	r3, [sp, #20]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	dd05      	ble.n	800cf38 <_dtoa_r+0x858>
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	9904      	ldr	r1, [sp, #16]
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 fc33 	bl	800d79c <__lshift>
 800cf36:	9004      	str	r0, [sp, #16]
 800cf38:	f1b8 0f00 	cmp.w	r8, #0
 800cf3c:	dd05      	ble.n	800cf4a <_dtoa_r+0x86a>
 800cf3e:	4639      	mov	r1, r7
 800cf40:	4642      	mov	r2, r8
 800cf42:	4620      	mov	r0, r4
 800cf44:	f000 fc2a 	bl	800d79c <__lshift>
 800cf48:	4607      	mov	r7, r0
 800cf4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf4c:	b353      	cbz	r3, 800cfa4 <_dtoa_r+0x8c4>
 800cf4e:	4639      	mov	r1, r7
 800cf50:	9804      	ldr	r0, [sp, #16]
 800cf52:	f000 fc77 	bl	800d844 <__mcmp>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	da24      	bge.n	800cfa4 <_dtoa_r+0x8c4>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	220a      	movs	r2, #10
 800cf5e:	9904      	ldr	r1, [sp, #16]
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 faa5 	bl	800d4b0 <__multadd>
 800cf66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf68:	9004      	str	r0, [sp, #16]
 800cf6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f000 814d 	beq.w	800d20e <_dtoa_r+0xb2e>
 800cf74:	2300      	movs	r3, #0
 800cf76:	4631      	mov	r1, r6
 800cf78:	220a      	movs	r2, #10
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 fa98 	bl	800d4b0 <__multadd>
 800cf80:	9b02      	ldr	r3, [sp, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	4606      	mov	r6, r0
 800cf86:	dc4f      	bgt.n	800d028 <_dtoa_r+0x948>
 800cf88:	9b06      	ldr	r3, [sp, #24]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	dd4c      	ble.n	800d028 <_dtoa_r+0x948>
 800cf8e:	e011      	b.n	800cfb4 <_dtoa_r+0x8d4>
 800cf90:	d0c9      	beq.n	800cf26 <_dtoa_r+0x846>
 800cf92:	9a05      	ldr	r2, [sp, #20]
 800cf94:	331c      	adds	r3, #28
 800cf96:	441a      	add	r2, r3
 800cf98:	9205      	str	r2, [sp, #20]
 800cf9a:	441d      	add	r5, r3
 800cf9c:	4498      	add	r8, r3
 800cf9e:	e7c2      	b.n	800cf26 <_dtoa_r+0x846>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	e7f6      	b.n	800cf92 <_dtoa_r+0x8b2>
 800cfa4:	f1b9 0f00 	cmp.w	r9, #0
 800cfa8:	dc38      	bgt.n	800d01c <_dtoa_r+0x93c>
 800cfaa:	9b06      	ldr	r3, [sp, #24]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	dd35      	ble.n	800d01c <_dtoa_r+0x93c>
 800cfb0:	f8cd 9008 	str.w	r9, [sp, #8]
 800cfb4:	9b02      	ldr	r3, [sp, #8]
 800cfb6:	b963      	cbnz	r3, 800cfd2 <_dtoa_r+0x8f2>
 800cfb8:	4639      	mov	r1, r7
 800cfba:	2205      	movs	r2, #5
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 fa77 	bl	800d4b0 <__multadd>
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	9804      	ldr	r0, [sp, #16]
 800cfc8:	f000 fc3c 	bl	800d844 <__mcmp>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f73f adcc 	bgt.w	800cb6a <_dtoa_r+0x48a>
 800cfd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfd4:	465d      	mov	r5, fp
 800cfd6:	ea6f 0a03 	mvn.w	sl, r3
 800cfda:	f04f 0900 	mov.w	r9, #0
 800cfde:	4639      	mov	r1, r7
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f000 fa4e 	bl	800d482 <_Bfree>
 800cfe6:	2e00      	cmp	r6, #0
 800cfe8:	f43f aeb7 	beq.w	800cd5a <_dtoa_r+0x67a>
 800cfec:	f1b9 0f00 	cmp.w	r9, #0
 800cff0:	d005      	beq.n	800cffe <_dtoa_r+0x91e>
 800cff2:	45b1      	cmp	r9, r6
 800cff4:	d003      	beq.n	800cffe <_dtoa_r+0x91e>
 800cff6:	4649      	mov	r1, r9
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fa42 	bl	800d482 <_Bfree>
 800cffe:	4631      	mov	r1, r6
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fa3e 	bl	800d482 <_Bfree>
 800d006:	e6a8      	b.n	800cd5a <_dtoa_r+0x67a>
 800d008:	2700      	movs	r7, #0
 800d00a:	463e      	mov	r6, r7
 800d00c:	e7e1      	b.n	800cfd2 <_dtoa_r+0x8f2>
 800d00e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d012:	463e      	mov	r6, r7
 800d014:	e5a9      	b.n	800cb6a <_dtoa_r+0x48a>
 800d016:	bf00      	nop
 800d018:	40240000 	.word	0x40240000
 800d01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d01e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80fa 	beq.w	800d21c <_dtoa_r+0xb3c>
 800d028:	2d00      	cmp	r5, #0
 800d02a:	dd05      	ble.n	800d038 <_dtoa_r+0x958>
 800d02c:	4631      	mov	r1, r6
 800d02e:	462a      	mov	r2, r5
 800d030:	4620      	mov	r0, r4
 800d032:	f000 fbb3 	bl	800d79c <__lshift>
 800d036:	4606      	mov	r6, r0
 800d038:	9b07      	ldr	r3, [sp, #28]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d04c      	beq.n	800d0d8 <_dtoa_r+0x9f8>
 800d03e:	6871      	ldr	r1, [r6, #4]
 800d040:	4620      	mov	r0, r4
 800d042:	f000 f9ea 	bl	800d41a <_Balloc>
 800d046:	6932      	ldr	r2, [r6, #16]
 800d048:	3202      	adds	r2, #2
 800d04a:	4605      	mov	r5, r0
 800d04c:	0092      	lsls	r2, r2, #2
 800d04e:	f106 010c 	add.w	r1, r6, #12
 800d052:	300c      	adds	r0, #12
 800d054:	f000 f9d4 	bl	800d400 <memcpy>
 800d058:	2201      	movs	r2, #1
 800d05a:	4629      	mov	r1, r5
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 fb9d 	bl	800d79c <__lshift>
 800d062:	9b00      	ldr	r3, [sp, #0]
 800d064:	f8cd b014 	str.w	fp, [sp, #20]
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	46b1      	mov	r9, r6
 800d06e:	9307      	str	r3, [sp, #28]
 800d070:	4606      	mov	r6, r0
 800d072:	4639      	mov	r1, r7
 800d074:	9804      	ldr	r0, [sp, #16]
 800d076:	f7ff faa7 	bl	800c5c8 <quorem>
 800d07a:	4649      	mov	r1, r9
 800d07c:	4605      	mov	r5, r0
 800d07e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d082:	9804      	ldr	r0, [sp, #16]
 800d084:	f000 fbde 	bl	800d844 <__mcmp>
 800d088:	4632      	mov	r2, r6
 800d08a:	9000      	str	r0, [sp, #0]
 800d08c:	4639      	mov	r1, r7
 800d08e:	4620      	mov	r0, r4
 800d090:	f000 fbf2 	bl	800d878 <__mdiff>
 800d094:	68c3      	ldr	r3, [r0, #12]
 800d096:	4602      	mov	r2, r0
 800d098:	bb03      	cbnz	r3, 800d0dc <_dtoa_r+0x9fc>
 800d09a:	4601      	mov	r1, r0
 800d09c:	9008      	str	r0, [sp, #32]
 800d09e:	9804      	ldr	r0, [sp, #16]
 800d0a0:	f000 fbd0 	bl	800d844 <__mcmp>
 800d0a4:	9a08      	ldr	r2, [sp, #32]
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	9308      	str	r3, [sp, #32]
 800d0ae:	f000 f9e8 	bl	800d482 <_Bfree>
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	b9a3      	cbnz	r3, 800d0e0 <_dtoa_r+0xa00>
 800d0b6:	9a06      	ldr	r2, [sp, #24]
 800d0b8:	b992      	cbnz	r2, 800d0e0 <_dtoa_r+0xa00>
 800d0ba:	9a07      	ldr	r2, [sp, #28]
 800d0bc:	b982      	cbnz	r2, 800d0e0 <_dtoa_r+0xa00>
 800d0be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0c2:	d029      	beq.n	800d118 <_dtoa_r+0xa38>
 800d0c4:	9b00      	ldr	r3, [sp, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	dd01      	ble.n	800d0ce <_dtoa_r+0x9ee>
 800d0ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d0ce:	9b05      	ldr	r3, [sp, #20]
 800d0d0:	1c5d      	adds	r5, r3, #1
 800d0d2:	f883 8000 	strb.w	r8, [r3]
 800d0d6:	e782      	b.n	800cfde <_dtoa_r+0x8fe>
 800d0d8:	4630      	mov	r0, r6
 800d0da:	e7c2      	b.n	800d062 <_dtoa_r+0x982>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e7e3      	b.n	800d0a8 <_dtoa_r+0x9c8>
 800d0e0:	9a00      	ldr	r2, [sp, #0]
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	db04      	blt.n	800d0f0 <_dtoa_r+0xa10>
 800d0e6:	d125      	bne.n	800d134 <_dtoa_r+0xa54>
 800d0e8:	9a06      	ldr	r2, [sp, #24]
 800d0ea:	bb1a      	cbnz	r2, 800d134 <_dtoa_r+0xa54>
 800d0ec:	9a07      	ldr	r2, [sp, #28]
 800d0ee:	bb0a      	cbnz	r2, 800d134 <_dtoa_r+0xa54>
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	ddec      	ble.n	800d0ce <_dtoa_r+0x9ee>
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	9904      	ldr	r1, [sp, #16]
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 fb4f 	bl	800d79c <__lshift>
 800d0fe:	4639      	mov	r1, r7
 800d100:	9004      	str	r0, [sp, #16]
 800d102:	f000 fb9f 	bl	800d844 <__mcmp>
 800d106:	2800      	cmp	r0, #0
 800d108:	dc03      	bgt.n	800d112 <_dtoa_r+0xa32>
 800d10a:	d1e0      	bne.n	800d0ce <_dtoa_r+0x9ee>
 800d10c:	f018 0f01 	tst.w	r8, #1
 800d110:	d0dd      	beq.n	800d0ce <_dtoa_r+0x9ee>
 800d112:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d116:	d1d8      	bne.n	800d0ca <_dtoa_r+0x9ea>
 800d118:	9b05      	ldr	r3, [sp, #20]
 800d11a:	9a05      	ldr	r2, [sp, #20]
 800d11c:	1c5d      	adds	r5, r3, #1
 800d11e:	2339      	movs	r3, #57	; 0x39
 800d120:	7013      	strb	r3, [r2, #0]
 800d122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d126:	2b39      	cmp	r3, #57	; 0x39
 800d128:	f105 32ff 	add.w	r2, r5, #4294967295
 800d12c:	d04f      	beq.n	800d1ce <_dtoa_r+0xaee>
 800d12e:	3301      	adds	r3, #1
 800d130:	7013      	strb	r3, [r2, #0]
 800d132:	e754      	b.n	800cfde <_dtoa_r+0x8fe>
 800d134:	9a05      	ldr	r2, [sp, #20]
 800d136:	2b00      	cmp	r3, #0
 800d138:	f102 0501 	add.w	r5, r2, #1
 800d13c:	dd06      	ble.n	800d14c <_dtoa_r+0xa6c>
 800d13e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d142:	d0e9      	beq.n	800d118 <_dtoa_r+0xa38>
 800d144:	f108 0801 	add.w	r8, r8, #1
 800d148:	9b05      	ldr	r3, [sp, #20]
 800d14a:	e7c2      	b.n	800d0d2 <_dtoa_r+0x9f2>
 800d14c:	9a02      	ldr	r2, [sp, #8]
 800d14e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d152:	eba5 030b 	sub.w	r3, r5, fp
 800d156:	4293      	cmp	r3, r2
 800d158:	d021      	beq.n	800d19e <_dtoa_r+0xabe>
 800d15a:	2300      	movs	r3, #0
 800d15c:	220a      	movs	r2, #10
 800d15e:	9904      	ldr	r1, [sp, #16]
 800d160:	4620      	mov	r0, r4
 800d162:	f000 f9a5 	bl	800d4b0 <__multadd>
 800d166:	45b1      	cmp	r9, r6
 800d168:	9004      	str	r0, [sp, #16]
 800d16a:	f04f 0300 	mov.w	r3, #0
 800d16e:	f04f 020a 	mov.w	r2, #10
 800d172:	4649      	mov	r1, r9
 800d174:	4620      	mov	r0, r4
 800d176:	d105      	bne.n	800d184 <_dtoa_r+0xaa4>
 800d178:	f000 f99a 	bl	800d4b0 <__multadd>
 800d17c:	4681      	mov	r9, r0
 800d17e:	4606      	mov	r6, r0
 800d180:	9505      	str	r5, [sp, #20]
 800d182:	e776      	b.n	800d072 <_dtoa_r+0x992>
 800d184:	f000 f994 	bl	800d4b0 <__multadd>
 800d188:	4631      	mov	r1, r6
 800d18a:	4681      	mov	r9, r0
 800d18c:	2300      	movs	r3, #0
 800d18e:	220a      	movs	r2, #10
 800d190:	4620      	mov	r0, r4
 800d192:	f000 f98d 	bl	800d4b0 <__multadd>
 800d196:	4606      	mov	r6, r0
 800d198:	e7f2      	b.n	800d180 <_dtoa_r+0xaa0>
 800d19a:	f04f 0900 	mov.w	r9, #0
 800d19e:	2201      	movs	r2, #1
 800d1a0:	9904      	ldr	r1, [sp, #16]
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 fafa 	bl	800d79c <__lshift>
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	9004      	str	r0, [sp, #16]
 800d1ac:	f000 fb4a 	bl	800d844 <__mcmp>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	dcb6      	bgt.n	800d122 <_dtoa_r+0xa42>
 800d1b4:	d102      	bne.n	800d1bc <_dtoa_r+0xadc>
 800d1b6:	f018 0f01 	tst.w	r8, #1
 800d1ba:	d1b2      	bne.n	800d122 <_dtoa_r+0xa42>
 800d1bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1c0:	2b30      	cmp	r3, #48	; 0x30
 800d1c2:	f105 32ff 	add.w	r2, r5, #4294967295
 800d1c6:	f47f af0a 	bne.w	800cfde <_dtoa_r+0x8fe>
 800d1ca:	4615      	mov	r5, r2
 800d1cc:	e7f6      	b.n	800d1bc <_dtoa_r+0xadc>
 800d1ce:	4593      	cmp	fp, r2
 800d1d0:	d105      	bne.n	800d1de <_dtoa_r+0xafe>
 800d1d2:	2331      	movs	r3, #49	; 0x31
 800d1d4:	f10a 0a01 	add.w	sl, sl, #1
 800d1d8:	f88b 3000 	strb.w	r3, [fp]
 800d1dc:	e6ff      	b.n	800cfde <_dtoa_r+0x8fe>
 800d1de:	4615      	mov	r5, r2
 800d1e0:	e79f      	b.n	800d122 <_dtoa_r+0xa42>
 800d1e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d248 <_dtoa_r+0xb68>
 800d1e6:	e007      	b.n	800d1f8 <_dtoa_r+0xb18>
 800d1e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d24c <_dtoa_r+0xb6c>
 800d1ee:	b11b      	cbz	r3, 800d1f8 <_dtoa_r+0xb18>
 800d1f0:	f10b 0308 	add.w	r3, fp, #8
 800d1f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d1f6:	6013      	str	r3, [r2, #0]
 800d1f8:	4658      	mov	r0, fp
 800d1fa:	b017      	add	sp, #92	; 0x5c
 800d1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d200:	9b06      	ldr	r3, [sp, #24]
 800d202:	2b01      	cmp	r3, #1
 800d204:	f77f ae35 	ble.w	800ce72 <_dtoa_r+0x792>
 800d208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d20a:	9307      	str	r3, [sp, #28]
 800d20c:	e649      	b.n	800cea2 <_dtoa_r+0x7c2>
 800d20e:	9b02      	ldr	r3, [sp, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	dc03      	bgt.n	800d21c <_dtoa_r+0xb3c>
 800d214:	9b06      	ldr	r3, [sp, #24]
 800d216:	2b02      	cmp	r3, #2
 800d218:	f73f aecc 	bgt.w	800cfb4 <_dtoa_r+0x8d4>
 800d21c:	465d      	mov	r5, fp
 800d21e:	4639      	mov	r1, r7
 800d220:	9804      	ldr	r0, [sp, #16]
 800d222:	f7ff f9d1 	bl	800c5c8 <quorem>
 800d226:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d22a:	f805 8b01 	strb.w	r8, [r5], #1
 800d22e:	9a02      	ldr	r2, [sp, #8]
 800d230:	eba5 030b 	sub.w	r3, r5, fp
 800d234:	429a      	cmp	r2, r3
 800d236:	ddb0      	ble.n	800d19a <_dtoa_r+0xaba>
 800d238:	2300      	movs	r3, #0
 800d23a:	220a      	movs	r2, #10
 800d23c:	9904      	ldr	r1, [sp, #16]
 800d23e:	4620      	mov	r0, r4
 800d240:	f000 f936 	bl	800d4b0 <__multadd>
 800d244:	9004      	str	r0, [sp, #16]
 800d246:	e7ea      	b.n	800d21e <_dtoa_r+0xb3e>
 800d248:	08011720 	.word	0x08011720
 800d24c:	08011744 	.word	0x08011744

0800d250 <std>:
 800d250:	2300      	movs	r3, #0
 800d252:	b510      	push	{r4, lr}
 800d254:	4604      	mov	r4, r0
 800d256:	e9c0 3300 	strd	r3, r3, [r0]
 800d25a:	6083      	str	r3, [r0, #8]
 800d25c:	8181      	strh	r1, [r0, #12]
 800d25e:	6643      	str	r3, [r0, #100]	; 0x64
 800d260:	81c2      	strh	r2, [r0, #14]
 800d262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d266:	6183      	str	r3, [r0, #24]
 800d268:	4619      	mov	r1, r3
 800d26a:	2208      	movs	r2, #8
 800d26c:	305c      	adds	r0, #92	; 0x5c
 800d26e:	f7fe fc57 	bl	800bb20 <memset>
 800d272:	4b05      	ldr	r3, [pc, #20]	; (800d288 <std+0x38>)
 800d274:	6263      	str	r3, [r4, #36]	; 0x24
 800d276:	4b05      	ldr	r3, [pc, #20]	; (800d28c <std+0x3c>)
 800d278:	62a3      	str	r3, [r4, #40]	; 0x28
 800d27a:	4b05      	ldr	r3, [pc, #20]	; (800d290 <std+0x40>)
 800d27c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d27e:	4b05      	ldr	r3, [pc, #20]	; (800d294 <std+0x44>)
 800d280:	6224      	str	r4, [r4, #32]
 800d282:	6323      	str	r3, [r4, #48]	; 0x30
 800d284:	bd10      	pop	{r4, pc}
 800d286:	bf00      	nop
 800d288:	0800df11 	.word	0x0800df11
 800d28c:	0800df33 	.word	0x0800df33
 800d290:	0800df6b 	.word	0x0800df6b
 800d294:	0800df8f 	.word	0x0800df8f

0800d298 <_cleanup_r>:
 800d298:	4901      	ldr	r1, [pc, #4]	; (800d2a0 <_cleanup_r+0x8>)
 800d29a:	f000 b885 	b.w	800d3a8 <_fwalk_reent>
 800d29e:	bf00      	nop
 800d2a0:	0800e269 	.word	0x0800e269

0800d2a4 <__sfmoreglue>:
 800d2a4:	b570      	push	{r4, r5, r6, lr}
 800d2a6:	1e4a      	subs	r2, r1, #1
 800d2a8:	2568      	movs	r5, #104	; 0x68
 800d2aa:	4355      	muls	r5, r2
 800d2ac:	460e      	mov	r6, r1
 800d2ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2b2:	f7fe fc8b 	bl	800bbcc <_malloc_r>
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	b140      	cbz	r0, 800d2cc <__sfmoreglue+0x28>
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d2c0:	300c      	adds	r0, #12
 800d2c2:	60a0      	str	r0, [r4, #8]
 800d2c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2c8:	f7fe fc2a 	bl	800bb20 <memset>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}

0800d2d0 <__sinit>:
 800d2d0:	6983      	ldr	r3, [r0, #24]
 800d2d2:	b510      	push	{r4, lr}
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	bb33      	cbnz	r3, 800d326 <__sinit+0x56>
 800d2d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d2dc:	6503      	str	r3, [r0, #80]	; 0x50
 800d2de:	4b12      	ldr	r3, [pc, #72]	; (800d328 <__sinit+0x58>)
 800d2e0:	4a12      	ldr	r2, [pc, #72]	; (800d32c <__sinit+0x5c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6282      	str	r2, [r0, #40]	; 0x28
 800d2e6:	4298      	cmp	r0, r3
 800d2e8:	bf04      	itt	eq
 800d2ea:	2301      	moveq	r3, #1
 800d2ec:	6183      	streq	r3, [r0, #24]
 800d2ee:	f000 f81f 	bl	800d330 <__sfp>
 800d2f2:	6060      	str	r0, [r4, #4]
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 f81b 	bl	800d330 <__sfp>
 800d2fa:	60a0      	str	r0, [r4, #8]
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 f817 	bl	800d330 <__sfp>
 800d302:	2200      	movs	r2, #0
 800d304:	60e0      	str	r0, [r4, #12]
 800d306:	2104      	movs	r1, #4
 800d308:	6860      	ldr	r0, [r4, #4]
 800d30a:	f7ff ffa1 	bl	800d250 <std>
 800d30e:	2201      	movs	r2, #1
 800d310:	2109      	movs	r1, #9
 800d312:	68a0      	ldr	r0, [r4, #8]
 800d314:	f7ff ff9c 	bl	800d250 <std>
 800d318:	2202      	movs	r2, #2
 800d31a:	2112      	movs	r1, #18
 800d31c:	68e0      	ldr	r0, [r4, #12]
 800d31e:	f7ff ff97 	bl	800d250 <std>
 800d322:	2301      	movs	r3, #1
 800d324:	61a3      	str	r3, [r4, #24]
 800d326:	bd10      	pop	{r4, pc}
 800d328:	0801170c 	.word	0x0801170c
 800d32c:	0800d299 	.word	0x0800d299

0800d330 <__sfp>:
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	4b1b      	ldr	r3, [pc, #108]	; (800d3a0 <__sfp+0x70>)
 800d334:	681e      	ldr	r6, [r3, #0]
 800d336:	69b3      	ldr	r3, [r6, #24]
 800d338:	4607      	mov	r7, r0
 800d33a:	b913      	cbnz	r3, 800d342 <__sfp+0x12>
 800d33c:	4630      	mov	r0, r6
 800d33e:	f7ff ffc7 	bl	800d2d0 <__sinit>
 800d342:	3648      	adds	r6, #72	; 0x48
 800d344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d348:	3b01      	subs	r3, #1
 800d34a:	d503      	bpl.n	800d354 <__sfp+0x24>
 800d34c:	6833      	ldr	r3, [r6, #0]
 800d34e:	b133      	cbz	r3, 800d35e <__sfp+0x2e>
 800d350:	6836      	ldr	r6, [r6, #0]
 800d352:	e7f7      	b.n	800d344 <__sfp+0x14>
 800d354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d358:	b16d      	cbz	r5, 800d376 <__sfp+0x46>
 800d35a:	3468      	adds	r4, #104	; 0x68
 800d35c:	e7f4      	b.n	800d348 <__sfp+0x18>
 800d35e:	2104      	movs	r1, #4
 800d360:	4638      	mov	r0, r7
 800d362:	f7ff ff9f 	bl	800d2a4 <__sfmoreglue>
 800d366:	6030      	str	r0, [r6, #0]
 800d368:	2800      	cmp	r0, #0
 800d36a:	d1f1      	bne.n	800d350 <__sfp+0x20>
 800d36c:	230c      	movs	r3, #12
 800d36e:	603b      	str	r3, [r7, #0]
 800d370:	4604      	mov	r4, r0
 800d372:	4620      	mov	r0, r4
 800d374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d376:	4b0b      	ldr	r3, [pc, #44]	; (800d3a4 <__sfp+0x74>)
 800d378:	6665      	str	r5, [r4, #100]	; 0x64
 800d37a:	e9c4 5500 	strd	r5, r5, [r4]
 800d37e:	60a5      	str	r5, [r4, #8]
 800d380:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d384:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d388:	2208      	movs	r2, #8
 800d38a:	4629      	mov	r1, r5
 800d38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d390:	f7fe fbc6 	bl	800bb20 <memset>
 800d394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d39c:	e7e9      	b.n	800d372 <__sfp+0x42>
 800d39e:	bf00      	nop
 800d3a0:	0801170c 	.word	0x0801170c
 800d3a4:	ffff0001 	.word	0xffff0001

0800d3a8 <_fwalk_reent>:
 800d3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4689      	mov	r9, r1
 800d3b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3b4:	2600      	movs	r6, #0
 800d3b6:	b914      	cbnz	r4, 800d3be <_fwalk_reent+0x16>
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d3c2:	3f01      	subs	r7, #1
 800d3c4:	d501      	bpl.n	800d3ca <_fwalk_reent+0x22>
 800d3c6:	6824      	ldr	r4, [r4, #0]
 800d3c8:	e7f5      	b.n	800d3b6 <_fwalk_reent+0xe>
 800d3ca:	89ab      	ldrh	r3, [r5, #12]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d907      	bls.n	800d3e0 <_fwalk_reent+0x38>
 800d3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	d003      	beq.n	800d3e0 <_fwalk_reent+0x38>
 800d3d8:	4629      	mov	r1, r5
 800d3da:	4640      	mov	r0, r8
 800d3dc:	47c8      	blx	r9
 800d3de:	4306      	orrs	r6, r0
 800d3e0:	3568      	adds	r5, #104	; 0x68
 800d3e2:	e7ee      	b.n	800d3c2 <_fwalk_reent+0x1a>

0800d3e4 <_localeconv_r>:
 800d3e4:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <_localeconv_r+0x14>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6a18      	ldr	r0, [r3, #32]
 800d3ea:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <_localeconv_r+0x18>)
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	bf08      	it	eq
 800d3f0:	4618      	moveq	r0, r3
 800d3f2:	30f0      	adds	r0, #240	; 0xf0
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	200000a8 	.word	0x200000a8
 800d3fc:	2000010c 	.word	0x2000010c

0800d400 <memcpy>:
 800d400:	b510      	push	{r4, lr}
 800d402:	1e43      	subs	r3, r0, #1
 800d404:	440a      	add	r2, r1
 800d406:	4291      	cmp	r1, r2
 800d408:	d100      	bne.n	800d40c <memcpy+0xc>
 800d40a:	bd10      	pop	{r4, pc}
 800d40c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d410:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d414:	e7f7      	b.n	800d406 <memcpy+0x6>

0800d416 <__malloc_lock>:
 800d416:	4770      	bx	lr

0800d418 <__malloc_unlock>:
 800d418:	4770      	bx	lr

0800d41a <_Balloc>:
 800d41a:	b570      	push	{r4, r5, r6, lr}
 800d41c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d41e:	4604      	mov	r4, r0
 800d420:	460e      	mov	r6, r1
 800d422:	b93d      	cbnz	r5, 800d434 <_Balloc+0x1a>
 800d424:	2010      	movs	r0, #16
 800d426:	f7fe fb73 	bl	800bb10 <malloc>
 800d42a:	6260      	str	r0, [r4, #36]	; 0x24
 800d42c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d430:	6005      	str	r5, [r0, #0]
 800d432:	60c5      	str	r5, [r0, #12]
 800d434:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d436:	68eb      	ldr	r3, [r5, #12]
 800d438:	b183      	cbz	r3, 800d45c <_Balloc+0x42>
 800d43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d442:	b9b8      	cbnz	r0, 800d474 <_Balloc+0x5a>
 800d444:	2101      	movs	r1, #1
 800d446:	fa01 f506 	lsl.w	r5, r1, r6
 800d44a:	1d6a      	adds	r2, r5, #5
 800d44c:	0092      	lsls	r2, r2, #2
 800d44e:	4620      	mov	r0, r4
 800d450:	f000 fabe 	bl	800d9d0 <_calloc_r>
 800d454:	b160      	cbz	r0, 800d470 <_Balloc+0x56>
 800d456:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d45a:	e00e      	b.n	800d47a <_Balloc+0x60>
 800d45c:	2221      	movs	r2, #33	; 0x21
 800d45e:	2104      	movs	r1, #4
 800d460:	4620      	mov	r0, r4
 800d462:	f000 fab5 	bl	800d9d0 <_calloc_r>
 800d466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d468:	60e8      	str	r0, [r5, #12]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1e4      	bne.n	800d43a <_Balloc+0x20>
 800d470:	2000      	movs	r0, #0
 800d472:	bd70      	pop	{r4, r5, r6, pc}
 800d474:	6802      	ldr	r2, [r0, #0]
 800d476:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d47a:	2300      	movs	r3, #0
 800d47c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d480:	e7f7      	b.n	800d472 <_Balloc+0x58>

0800d482 <_Bfree>:
 800d482:	b570      	push	{r4, r5, r6, lr}
 800d484:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d486:	4606      	mov	r6, r0
 800d488:	460d      	mov	r5, r1
 800d48a:	b93c      	cbnz	r4, 800d49c <_Bfree+0x1a>
 800d48c:	2010      	movs	r0, #16
 800d48e:	f7fe fb3f 	bl	800bb10 <malloc>
 800d492:	6270      	str	r0, [r6, #36]	; 0x24
 800d494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d498:	6004      	str	r4, [r0, #0]
 800d49a:	60c4      	str	r4, [r0, #12]
 800d49c:	b13d      	cbz	r5, 800d4ae <_Bfree+0x2c>
 800d49e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4a0:	686a      	ldr	r2, [r5, #4]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4a8:	6029      	str	r1, [r5, #0]
 800d4aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}

0800d4b0 <__multadd>:
 800d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b4:	690d      	ldr	r5, [r1, #16]
 800d4b6:	461f      	mov	r7, r3
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	f101 0c14 	add.w	ip, r1, #20
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f8dc 0000 	ldr.w	r0, [ip]
 800d4c6:	b281      	uxth	r1, r0
 800d4c8:	fb02 7101 	mla	r1, r2, r1, r7
 800d4cc:	0c0f      	lsrs	r7, r1, #16
 800d4ce:	0c00      	lsrs	r0, r0, #16
 800d4d0:	fb02 7000 	mla	r0, r2, r0, r7
 800d4d4:	b289      	uxth	r1, r1
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d4dc:	429d      	cmp	r5, r3
 800d4de:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d4e2:	f84c 1b04 	str.w	r1, [ip], #4
 800d4e6:	dcec      	bgt.n	800d4c2 <__multadd+0x12>
 800d4e8:	b1d7      	cbz	r7, 800d520 <__multadd+0x70>
 800d4ea:	68a3      	ldr	r3, [r4, #8]
 800d4ec:	42ab      	cmp	r3, r5
 800d4ee:	dc12      	bgt.n	800d516 <__multadd+0x66>
 800d4f0:	6861      	ldr	r1, [r4, #4]
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	3101      	adds	r1, #1
 800d4f6:	f7ff ff90 	bl	800d41a <_Balloc>
 800d4fa:	6922      	ldr	r2, [r4, #16]
 800d4fc:	3202      	adds	r2, #2
 800d4fe:	f104 010c 	add.w	r1, r4, #12
 800d502:	4680      	mov	r8, r0
 800d504:	0092      	lsls	r2, r2, #2
 800d506:	300c      	adds	r0, #12
 800d508:	f7ff ff7a 	bl	800d400 <memcpy>
 800d50c:	4621      	mov	r1, r4
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff ffb7 	bl	800d482 <_Bfree>
 800d514:	4644      	mov	r4, r8
 800d516:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d51a:	3501      	adds	r5, #1
 800d51c:	615f      	str	r7, [r3, #20]
 800d51e:	6125      	str	r5, [r4, #16]
 800d520:	4620      	mov	r0, r4
 800d522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d526 <__hi0bits>:
 800d526:	0c02      	lsrs	r2, r0, #16
 800d528:	0412      	lsls	r2, r2, #16
 800d52a:	4603      	mov	r3, r0
 800d52c:	b9b2      	cbnz	r2, 800d55c <__hi0bits+0x36>
 800d52e:	0403      	lsls	r3, r0, #16
 800d530:	2010      	movs	r0, #16
 800d532:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d536:	bf04      	itt	eq
 800d538:	021b      	lsleq	r3, r3, #8
 800d53a:	3008      	addeq	r0, #8
 800d53c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d540:	bf04      	itt	eq
 800d542:	011b      	lsleq	r3, r3, #4
 800d544:	3004      	addeq	r0, #4
 800d546:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d54a:	bf04      	itt	eq
 800d54c:	009b      	lsleq	r3, r3, #2
 800d54e:	3002      	addeq	r0, #2
 800d550:	2b00      	cmp	r3, #0
 800d552:	db06      	blt.n	800d562 <__hi0bits+0x3c>
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	d503      	bpl.n	800d560 <__hi0bits+0x3a>
 800d558:	3001      	adds	r0, #1
 800d55a:	4770      	bx	lr
 800d55c:	2000      	movs	r0, #0
 800d55e:	e7e8      	b.n	800d532 <__hi0bits+0xc>
 800d560:	2020      	movs	r0, #32
 800d562:	4770      	bx	lr

0800d564 <__lo0bits>:
 800d564:	6803      	ldr	r3, [r0, #0]
 800d566:	f013 0207 	ands.w	r2, r3, #7
 800d56a:	4601      	mov	r1, r0
 800d56c:	d00b      	beq.n	800d586 <__lo0bits+0x22>
 800d56e:	07da      	lsls	r2, r3, #31
 800d570:	d423      	bmi.n	800d5ba <__lo0bits+0x56>
 800d572:	0798      	lsls	r0, r3, #30
 800d574:	bf49      	itett	mi
 800d576:	085b      	lsrmi	r3, r3, #1
 800d578:	089b      	lsrpl	r3, r3, #2
 800d57a:	2001      	movmi	r0, #1
 800d57c:	600b      	strmi	r3, [r1, #0]
 800d57e:	bf5c      	itt	pl
 800d580:	600b      	strpl	r3, [r1, #0]
 800d582:	2002      	movpl	r0, #2
 800d584:	4770      	bx	lr
 800d586:	b298      	uxth	r0, r3
 800d588:	b9a8      	cbnz	r0, 800d5b6 <__lo0bits+0x52>
 800d58a:	0c1b      	lsrs	r3, r3, #16
 800d58c:	2010      	movs	r0, #16
 800d58e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d592:	bf04      	itt	eq
 800d594:	0a1b      	lsreq	r3, r3, #8
 800d596:	3008      	addeq	r0, #8
 800d598:	071a      	lsls	r2, r3, #28
 800d59a:	bf04      	itt	eq
 800d59c:	091b      	lsreq	r3, r3, #4
 800d59e:	3004      	addeq	r0, #4
 800d5a0:	079a      	lsls	r2, r3, #30
 800d5a2:	bf04      	itt	eq
 800d5a4:	089b      	lsreq	r3, r3, #2
 800d5a6:	3002      	addeq	r0, #2
 800d5a8:	07da      	lsls	r2, r3, #31
 800d5aa:	d402      	bmi.n	800d5b2 <__lo0bits+0x4e>
 800d5ac:	085b      	lsrs	r3, r3, #1
 800d5ae:	d006      	beq.n	800d5be <__lo0bits+0x5a>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	600b      	str	r3, [r1, #0]
 800d5b4:	4770      	bx	lr
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	e7e9      	b.n	800d58e <__lo0bits+0x2a>
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	4770      	bx	lr
 800d5be:	2020      	movs	r0, #32
 800d5c0:	4770      	bx	lr

0800d5c2 <__i2b>:
 800d5c2:	b510      	push	{r4, lr}
 800d5c4:	460c      	mov	r4, r1
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	f7ff ff27 	bl	800d41a <_Balloc>
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	6144      	str	r4, [r0, #20]
 800d5d0:	6102      	str	r2, [r0, #16]
 800d5d2:	bd10      	pop	{r4, pc}

0800d5d4 <__multiply>:
 800d5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	4614      	mov	r4, r2
 800d5da:	690a      	ldr	r2, [r1, #16]
 800d5dc:	6923      	ldr	r3, [r4, #16]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	bfb8      	it	lt
 800d5e2:	460b      	movlt	r3, r1
 800d5e4:	4688      	mov	r8, r1
 800d5e6:	bfbc      	itt	lt
 800d5e8:	46a0      	movlt	r8, r4
 800d5ea:	461c      	movlt	r4, r3
 800d5ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d5f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5fc:	eb07 0609 	add.w	r6, r7, r9
 800d600:	42b3      	cmp	r3, r6
 800d602:	bfb8      	it	lt
 800d604:	3101      	addlt	r1, #1
 800d606:	f7ff ff08 	bl	800d41a <_Balloc>
 800d60a:	f100 0514 	add.w	r5, r0, #20
 800d60e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d612:	462b      	mov	r3, r5
 800d614:	2200      	movs	r2, #0
 800d616:	4573      	cmp	r3, lr
 800d618:	d316      	bcc.n	800d648 <__multiply+0x74>
 800d61a:	f104 0214 	add.w	r2, r4, #20
 800d61e:	f108 0114 	add.w	r1, r8, #20
 800d622:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d626:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	9201      	str	r2, [sp, #4]
 800d630:	4293      	cmp	r3, r2
 800d632:	d80c      	bhi.n	800d64e <__multiply+0x7a>
 800d634:	2e00      	cmp	r6, #0
 800d636:	dd03      	ble.n	800d640 <__multiply+0x6c>
 800d638:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d05d      	beq.n	800d6fc <__multiply+0x128>
 800d640:	6106      	str	r6, [r0, #16]
 800d642:	b003      	add	sp, #12
 800d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d648:	f843 2b04 	str.w	r2, [r3], #4
 800d64c:	e7e3      	b.n	800d616 <__multiply+0x42>
 800d64e:	f8b2 b000 	ldrh.w	fp, [r2]
 800d652:	f1bb 0f00 	cmp.w	fp, #0
 800d656:	d023      	beq.n	800d6a0 <__multiply+0xcc>
 800d658:	4689      	mov	r9, r1
 800d65a:	46ac      	mov	ip, r5
 800d65c:	f04f 0800 	mov.w	r8, #0
 800d660:	f859 4b04 	ldr.w	r4, [r9], #4
 800d664:	f8dc a000 	ldr.w	sl, [ip]
 800d668:	b2a3      	uxth	r3, r4
 800d66a:	fa1f fa8a 	uxth.w	sl, sl
 800d66e:	fb0b a303 	mla	r3, fp, r3, sl
 800d672:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d676:	f8dc 4000 	ldr.w	r4, [ip]
 800d67a:	4443      	add	r3, r8
 800d67c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d680:	fb0b 840a 	mla	r4, fp, sl, r8
 800d684:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d688:	46e2      	mov	sl, ip
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d690:	454f      	cmp	r7, r9
 800d692:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d696:	f84a 3b04 	str.w	r3, [sl], #4
 800d69a:	d82b      	bhi.n	800d6f4 <__multiply+0x120>
 800d69c:	f8cc 8004 	str.w	r8, [ip, #4]
 800d6a0:	9b01      	ldr	r3, [sp, #4]
 800d6a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d6a6:	3204      	adds	r2, #4
 800d6a8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ac:	d020      	beq.n	800d6f0 <__multiply+0x11c>
 800d6ae:	682b      	ldr	r3, [r5, #0]
 800d6b0:	4689      	mov	r9, r1
 800d6b2:	46a8      	mov	r8, r5
 800d6b4:	f04f 0b00 	mov.w	fp, #0
 800d6b8:	f8b9 c000 	ldrh.w	ip, [r9]
 800d6bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d6c0:	fb0a 440c 	mla	r4, sl, ip, r4
 800d6c4:	445c      	add	r4, fp
 800d6c6:	46c4      	mov	ip, r8
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d6ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d6d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d6da:	0c1b      	lsrs	r3, r3, #16
 800d6dc:	fb0a b303 	mla	r3, sl, r3, fp
 800d6e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d6e4:	454f      	cmp	r7, r9
 800d6e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d6ea:	d805      	bhi.n	800d6f8 <__multiply+0x124>
 800d6ec:	f8c8 3004 	str.w	r3, [r8, #4]
 800d6f0:	3504      	adds	r5, #4
 800d6f2:	e79b      	b.n	800d62c <__multiply+0x58>
 800d6f4:	46d4      	mov	ip, sl
 800d6f6:	e7b3      	b.n	800d660 <__multiply+0x8c>
 800d6f8:	46e0      	mov	r8, ip
 800d6fa:	e7dd      	b.n	800d6b8 <__multiply+0xe4>
 800d6fc:	3e01      	subs	r6, #1
 800d6fe:	e799      	b.n	800d634 <__multiply+0x60>

0800d700 <__pow5mult>:
 800d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d704:	4615      	mov	r5, r2
 800d706:	f012 0203 	ands.w	r2, r2, #3
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	d007      	beq.n	800d720 <__pow5mult+0x20>
 800d710:	3a01      	subs	r2, #1
 800d712:	4c21      	ldr	r4, [pc, #132]	; (800d798 <__pow5mult+0x98>)
 800d714:	2300      	movs	r3, #0
 800d716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d71a:	f7ff fec9 	bl	800d4b0 <__multadd>
 800d71e:	4607      	mov	r7, r0
 800d720:	10ad      	asrs	r5, r5, #2
 800d722:	d035      	beq.n	800d790 <__pow5mult+0x90>
 800d724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d726:	b93c      	cbnz	r4, 800d738 <__pow5mult+0x38>
 800d728:	2010      	movs	r0, #16
 800d72a:	f7fe f9f1 	bl	800bb10 <malloc>
 800d72e:	6270      	str	r0, [r6, #36]	; 0x24
 800d730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d734:	6004      	str	r4, [r0, #0]
 800d736:	60c4      	str	r4, [r0, #12]
 800d738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d73c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d740:	b94c      	cbnz	r4, 800d756 <__pow5mult+0x56>
 800d742:	f240 2171 	movw	r1, #625	; 0x271
 800d746:	4630      	mov	r0, r6
 800d748:	f7ff ff3b 	bl	800d5c2 <__i2b>
 800d74c:	2300      	movs	r3, #0
 800d74e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d752:	4604      	mov	r4, r0
 800d754:	6003      	str	r3, [r0, #0]
 800d756:	f04f 0800 	mov.w	r8, #0
 800d75a:	07eb      	lsls	r3, r5, #31
 800d75c:	d50a      	bpl.n	800d774 <__pow5mult+0x74>
 800d75e:	4639      	mov	r1, r7
 800d760:	4622      	mov	r2, r4
 800d762:	4630      	mov	r0, r6
 800d764:	f7ff ff36 	bl	800d5d4 <__multiply>
 800d768:	4639      	mov	r1, r7
 800d76a:	4681      	mov	r9, r0
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7ff fe88 	bl	800d482 <_Bfree>
 800d772:	464f      	mov	r7, r9
 800d774:	106d      	asrs	r5, r5, #1
 800d776:	d00b      	beq.n	800d790 <__pow5mult+0x90>
 800d778:	6820      	ldr	r0, [r4, #0]
 800d77a:	b938      	cbnz	r0, 800d78c <__pow5mult+0x8c>
 800d77c:	4622      	mov	r2, r4
 800d77e:	4621      	mov	r1, r4
 800d780:	4630      	mov	r0, r6
 800d782:	f7ff ff27 	bl	800d5d4 <__multiply>
 800d786:	6020      	str	r0, [r4, #0]
 800d788:	f8c0 8000 	str.w	r8, [r0]
 800d78c:	4604      	mov	r4, r0
 800d78e:	e7e4      	b.n	800d75a <__pow5mult+0x5a>
 800d790:	4638      	mov	r0, r7
 800d792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d796:	bf00      	nop
 800d798:	080118a8 	.word	0x080118a8

0800d79c <__lshift>:
 800d79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	6849      	ldr	r1, [r1, #4]
 800d7aa:	eb0a 0903 	add.w	r9, sl, r3
 800d7ae:	68a3      	ldr	r3, [r4, #8]
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	4616      	mov	r6, r2
 800d7b4:	f109 0501 	add.w	r5, r9, #1
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	db32      	blt.n	800d822 <__lshift+0x86>
 800d7bc:	4638      	mov	r0, r7
 800d7be:	f7ff fe2c 	bl	800d41a <_Balloc>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4680      	mov	r8, r0
 800d7c6:	f100 0114 	add.w	r1, r0, #20
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	4553      	cmp	r3, sl
 800d7ce:	db2b      	blt.n	800d828 <__lshift+0x8c>
 800d7d0:	6920      	ldr	r0, [r4, #16]
 800d7d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7d6:	f104 0314 	add.w	r3, r4, #20
 800d7da:	f016 021f 	ands.w	r2, r6, #31
 800d7de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7e6:	d025      	beq.n	800d834 <__lshift+0x98>
 800d7e8:	f1c2 0e20 	rsb	lr, r2, #32
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	681e      	ldr	r6, [r3, #0]
 800d7f0:	468a      	mov	sl, r1
 800d7f2:	4096      	lsls	r6, r2
 800d7f4:	4330      	orrs	r0, r6
 800d7f6:	f84a 0b04 	str.w	r0, [sl], #4
 800d7fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800d7fe:	459c      	cmp	ip, r3
 800d800:	fa20 f00e 	lsr.w	r0, r0, lr
 800d804:	d814      	bhi.n	800d830 <__lshift+0x94>
 800d806:	6048      	str	r0, [r1, #4]
 800d808:	b108      	cbz	r0, 800d80e <__lshift+0x72>
 800d80a:	f109 0502 	add.w	r5, r9, #2
 800d80e:	3d01      	subs	r5, #1
 800d810:	4638      	mov	r0, r7
 800d812:	f8c8 5010 	str.w	r5, [r8, #16]
 800d816:	4621      	mov	r1, r4
 800d818:	f7ff fe33 	bl	800d482 <_Bfree>
 800d81c:	4640      	mov	r0, r8
 800d81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d822:	3101      	adds	r1, #1
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	e7c7      	b.n	800d7b8 <__lshift+0x1c>
 800d828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d82c:	3301      	adds	r3, #1
 800d82e:	e7cd      	b.n	800d7cc <__lshift+0x30>
 800d830:	4651      	mov	r1, sl
 800d832:	e7dc      	b.n	800d7ee <__lshift+0x52>
 800d834:	3904      	subs	r1, #4
 800d836:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d83e:	459c      	cmp	ip, r3
 800d840:	d8f9      	bhi.n	800d836 <__lshift+0x9a>
 800d842:	e7e4      	b.n	800d80e <__lshift+0x72>

0800d844 <__mcmp>:
 800d844:	6903      	ldr	r3, [r0, #16]
 800d846:	690a      	ldr	r2, [r1, #16]
 800d848:	1a9b      	subs	r3, r3, r2
 800d84a:	b530      	push	{r4, r5, lr}
 800d84c:	d10c      	bne.n	800d868 <__mcmp+0x24>
 800d84e:	0092      	lsls	r2, r2, #2
 800d850:	3014      	adds	r0, #20
 800d852:	3114      	adds	r1, #20
 800d854:	1884      	adds	r4, r0, r2
 800d856:	4411      	add	r1, r2
 800d858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d85c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d860:	4295      	cmp	r5, r2
 800d862:	d003      	beq.n	800d86c <__mcmp+0x28>
 800d864:	d305      	bcc.n	800d872 <__mcmp+0x2e>
 800d866:	2301      	movs	r3, #1
 800d868:	4618      	mov	r0, r3
 800d86a:	bd30      	pop	{r4, r5, pc}
 800d86c:	42a0      	cmp	r0, r4
 800d86e:	d3f3      	bcc.n	800d858 <__mcmp+0x14>
 800d870:	e7fa      	b.n	800d868 <__mcmp+0x24>
 800d872:	f04f 33ff 	mov.w	r3, #4294967295
 800d876:	e7f7      	b.n	800d868 <__mcmp+0x24>

0800d878 <__mdiff>:
 800d878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d87c:	460d      	mov	r5, r1
 800d87e:	4607      	mov	r7, r0
 800d880:	4611      	mov	r1, r2
 800d882:	4628      	mov	r0, r5
 800d884:	4614      	mov	r4, r2
 800d886:	f7ff ffdd 	bl	800d844 <__mcmp>
 800d88a:	1e06      	subs	r6, r0, #0
 800d88c:	d108      	bne.n	800d8a0 <__mdiff+0x28>
 800d88e:	4631      	mov	r1, r6
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff fdc2 	bl	800d41a <_Balloc>
 800d896:	2301      	movs	r3, #1
 800d898:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a0:	bfa4      	itt	ge
 800d8a2:	4623      	movge	r3, r4
 800d8a4:	462c      	movge	r4, r5
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	6861      	ldr	r1, [r4, #4]
 800d8aa:	bfa6      	itte	ge
 800d8ac:	461d      	movge	r5, r3
 800d8ae:	2600      	movge	r6, #0
 800d8b0:	2601      	movlt	r6, #1
 800d8b2:	f7ff fdb2 	bl	800d41a <_Balloc>
 800d8b6:	692b      	ldr	r3, [r5, #16]
 800d8b8:	60c6      	str	r6, [r0, #12]
 800d8ba:	6926      	ldr	r6, [r4, #16]
 800d8bc:	f105 0914 	add.w	r9, r5, #20
 800d8c0:	f104 0214 	add.w	r2, r4, #20
 800d8c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d8c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d8cc:	f100 0514 	add.w	r5, r0, #20
 800d8d0:	f04f 0e00 	mov.w	lr, #0
 800d8d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800d8d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d8dc:	fa1e f18a 	uxtah	r1, lr, sl
 800d8e0:	b2a3      	uxth	r3, r4
 800d8e2:	1ac9      	subs	r1, r1, r3
 800d8e4:	0c23      	lsrs	r3, r4, #16
 800d8e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d8ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d8ee:	b289      	uxth	r1, r1
 800d8f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d8f4:	45c8      	cmp	r8, r9
 800d8f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d8fa:	4694      	mov	ip, r2
 800d8fc:	f845 3b04 	str.w	r3, [r5], #4
 800d900:	d8e8      	bhi.n	800d8d4 <__mdiff+0x5c>
 800d902:	45bc      	cmp	ip, r7
 800d904:	d304      	bcc.n	800d910 <__mdiff+0x98>
 800d906:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d90a:	b183      	cbz	r3, 800d92e <__mdiff+0xb6>
 800d90c:	6106      	str	r6, [r0, #16]
 800d90e:	e7c5      	b.n	800d89c <__mdiff+0x24>
 800d910:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d914:	fa1e f381 	uxtah	r3, lr, r1
 800d918:	141a      	asrs	r2, r3, #16
 800d91a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d91e:	b29b      	uxth	r3, r3
 800d920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d924:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d928:	f845 3b04 	str.w	r3, [r5], #4
 800d92c:	e7e9      	b.n	800d902 <__mdiff+0x8a>
 800d92e:	3e01      	subs	r6, #1
 800d930:	e7e9      	b.n	800d906 <__mdiff+0x8e>

0800d932 <__d2b>:
 800d932:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d936:	460e      	mov	r6, r1
 800d938:	2101      	movs	r1, #1
 800d93a:	ec59 8b10 	vmov	r8, r9, d0
 800d93e:	4615      	mov	r5, r2
 800d940:	f7ff fd6b 	bl	800d41a <_Balloc>
 800d944:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d948:	4607      	mov	r7, r0
 800d94a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d94e:	bb34      	cbnz	r4, 800d99e <__d2b+0x6c>
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	f1b8 0300 	subs.w	r3, r8, #0
 800d956:	d027      	beq.n	800d9a8 <__d2b+0x76>
 800d958:	a802      	add	r0, sp, #8
 800d95a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d95e:	f7ff fe01 	bl	800d564 <__lo0bits>
 800d962:	9900      	ldr	r1, [sp, #0]
 800d964:	b1f0      	cbz	r0, 800d9a4 <__d2b+0x72>
 800d966:	9a01      	ldr	r2, [sp, #4]
 800d968:	f1c0 0320 	rsb	r3, r0, #32
 800d96c:	fa02 f303 	lsl.w	r3, r2, r3
 800d970:	430b      	orrs	r3, r1
 800d972:	40c2      	lsrs	r2, r0
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	9201      	str	r2, [sp, #4]
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	61bb      	str	r3, [r7, #24]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	bf14      	ite	ne
 800d980:	2102      	movne	r1, #2
 800d982:	2101      	moveq	r1, #1
 800d984:	6139      	str	r1, [r7, #16]
 800d986:	b1c4      	cbz	r4, 800d9ba <__d2b+0x88>
 800d988:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d98c:	4404      	add	r4, r0
 800d98e:	6034      	str	r4, [r6, #0]
 800d990:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d994:	6028      	str	r0, [r5, #0]
 800d996:	4638      	mov	r0, r7
 800d998:	b003      	add	sp, #12
 800d99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d99e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9a2:	e7d5      	b.n	800d950 <__d2b+0x1e>
 800d9a4:	6179      	str	r1, [r7, #20]
 800d9a6:	e7e7      	b.n	800d978 <__d2b+0x46>
 800d9a8:	a801      	add	r0, sp, #4
 800d9aa:	f7ff fddb 	bl	800d564 <__lo0bits>
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	617b      	str	r3, [r7, #20]
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	6139      	str	r1, [r7, #16]
 800d9b6:	3020      	adds	r0, #32
 800d9b8:	e7e5      	b.n	800d986 <__d2b+0x54>
 800d9ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d9be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9c2:	6030      	str	r0, [r6, #0]
 800d9c4:	6918      	ldr	r0, [r3, #16]
 800d9c6:	f7ff fdae 	bl	800d526 <__hi0bits>
 800d9ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d9ce:	e7e1      	b.n	800d994 <__d2b+0x62>

0800d9d0 <_calloc_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	fb02 f401 	mul.w	r4, r2, r1
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	f7fe f8f8 	bl	800bbcc <_malloc_r>
 800d9dc:	4605      	mov	r5, r0
 800d9de:	b118      	cbz	r0, 800d9e8 <_calloc_r+0x18>
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	f7fe f89c 	bl	800bb20 <memset>
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	bd38      	pop	{r3, r4, r5, pc}

0800d9ec <__ssputs_r>:
 800d9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f0:	688e      	ldr	r6, [r1, #8]
 800d9f2:	429e      	cmp	r6, r3
 800d9f4:	4682      	mov	sl, r0
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	4690      	mov	r8, r2
 800d9fa:	4699      	mov	r9, r3
 800d9fc:	d837      	bhi.n	800da6e <__ssputs_r+0x82>
 800d9fe:	898a      	ldrh	r2, [r1, #12]
 800da00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da04:	d031      	beq.n	800da6a <__ssputs_r+0x7e>
 800da06:	6825      	ldr	r5, [r4, #0]
 800da08:	6909      	ldr	r1, [r1, #16]
 800da0a:	1a6f      	subs	r7, r5, r1
 800da0c:	6965      	ldr	r5, [r4, #20]
 800da0e:	2302      	movs	r3, #2
 800da10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da14:	fb95 f5f3 	sdiv	r5, r5, r3
 800da18:	f109 0301 	add.w	r3, r9, #1
 800da1c:	443b      	add	r3, r7
 800da1e:	429d      	cmp	r5, r3
 800da20:	bf38      	it	cc
 800da22:	461d      	movcc	r5, r3
 800da24:	0553      	lsls	r3, r2, #21
 800da26:	d530      	bpl.n	800da8a <__ssputs_r+0x9e>
 800da28:	4629      	mov	r1, r5
 800da2a:	f7fe f8cf 	bl	800bbcc <_malloc_r>
 800da2e:	4606      	mov	r6, r0
 800da30:	b950      	cbnz	r0, 800da48 <__ssputs_r+0x5c>
 800da32:	230c      	movs	r3, #12
 800da34:	f8ca 3000 	str.w	r3, [sl]
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da3e:	81a3      	strh	r3, [r4, #12]
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da48:	463a      	mov	r2, r7
 800da4a:	6921      	ldr	r1, [r4, #16]
 800da4c:	f7ff fcd8 	bl	800d400 <memcpy>
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	6126      	str	r6, [r4, #16]
 800da5e:	6165      	str	r5, [r4, #20]
 800da60:	443e      	add	r6, r7
 800da62:	1bed      	subs	r5, r5, r7
 800da64:	6026      	str	r6, [r4, #0]
 800da66:	60a5      	str	r5, [r4, #8]
 800da68:	464e      	mov	r6, r9
 800da6a:	454e      	cmp	r6, r9
 800da6c:	d900      	bls.n	800da70 <__ssputs_r+0x84>
 800da6e:	464e      	mov	r6, r9
 800da70:	4632      	mov	r2, r6
 800da72:	4641      	mov	r1, r8
 800da74:	6820      	ldr	r0, [r4, #0]
 800da76:	f000 fca9 	bl	800e3cc <memmove>
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	1b9b      	subs	r3, r3, r6
 800da7e:	60a3      	str	r3, [r4, #8]
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	441e      	add	r6, r3
 800da84:	6026      	str	r6, [r4, #0]
 800da86:	2000      	movs	r0, #0
 800da88:	e7dc      	b.n	800da44 <__ssputs_r+0x58>
 800da8a:	462a      	mov	r2, r5
 800da8c:	f000 fcb7 	bl	800e3fe <_realloc_r>
 800da90:	4606      	mov	r6, r0
 800da92:	2800      	cmp	r0, #0
 800da94:	d1e2      	bne.n	800da5c <__ssputs_r+0x70>
 800da96:	6921      	ldr	r1, [r4, #16]
 800da98:	4650      	mov	r0, sl
 800da9a:	f7fe f849 	bl	800bb30 <_free_r>
 800da9e:	e7c8      	b.n	800da32 <__ssputs_r+0x46>

0800daa0 <_svfiprintf_r>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	461d      	mov	r5, r3
 800daa6:	898b      	ldrh	r3, [r1, #12]
 800daa8:	061f      	lsls	r7, r3, #24
 800daaa:	b09d      	sub	sp, #116	; 0x74
 800daac:	4680      	mov	r8, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	4616      	mov	r6, r2
 800dab2:	d50f      	bpl.n	800dad4 <_svfiprintf_r+0x34>
 800dab4:	690b      	ldr	r3, [r1, #16]
 800dab6:	b96b      	cbnz	r3, 800dad4 <_svfiprintf_r+0x34>
 800dab8:	2140      	movs	r1, #64	; 0x40
 800daba:	f7fe f887 	bl	800bbcc <_malloc_r>
 800dabe:	6020      	str	r0, [r4, #0]
 800dac0:	6120      	str	r0, [r4, #16]
 800dac2:	b928      	cbnz	r0, 800dad0 <_svfiprintf_r+0x30>
 800dac4:	230c      	movs	r3, #12
 800dac6:	f8c8 3000 	str.w	r3, [r8]
 800daca:	f04f 30ff 	mov.w	r0, #4294967295
 800dace:	e0c8      	b.n	800dc62 <_svfiprintf_r+0x1c2>
 800dad0:	2340      	movs	r3, #64	; 0x40
 800dad2:	6163      	str	r3, [r4, #20]
 800dad4:	2300      	movs	r3, #0
 800dad6:	9309      	str	r3, [sp, #36]	; 0x24
 800dad8:	2320      	movs	r3, #32
 800dada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dade:	2330      	movs	r3, #48	; 0x30
 800dae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dae4:	9503      	str	r5, [sp, #12]
 800dae6:	f04f 0b01 	mov.w	fp, #1
 800daea:	4637      	mov	r7, r6
 800daec:	463d      	mov	r5, r7
 800daee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800daf2:	b10b      	cbz	r3, 800daf8 <_svfiprintf_r+0x58>
 800daf4:	2b25      	cmp	r3, #37	; 0x25
 800daf6:	d13e      	bne.n	800db76 <_svfiprintf_r+0xd6>
 800daf8:	ebb7 0a06 	subs.w	sl, r7, r6
 800dafc:	d00b      	beq.n	800db16 <_svfiprintf_r+0x76>
 800dafe:	4653      	mov	r3, sl
 800db00:	4632      	mov	r2, r6
 800db02:	4621      	mov	r1, r4
 800db04:	4640      	mov	r0, r8
 800db06:	f7ff ff71 	bl	800d9ec <__ssputs_r>
 800db0a:	3001      	adds	r0, #1
 800db0c:	f000 80a4 	beq.w	800dc58 <_svfiprintf_r+0x1b8>
 800db10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db12:	4453      	add	r3, sl
 800db14:	9309      	str	r3, [sp, #36]	; 0x24
 800db16:	783b      	ldrb	r3, [r7, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 809d 	beq.w	800dc58 <_svfiprintf_r+0x1b8>
 800db1e:	2300      	movs	r3, #0
 800db20:	f04f 32ff 	mov.w	r2, #4294967295
 800db24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db28:	9304      	str	r3, [sp, #16]
 800db2a:	9307      	str	r3, [sp, #28]
 800db2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db30:	931a      	str	r3, [sp, #104]	; 0x68
 800db32:	462f      	mov	r7, r5
 800db34:	2205      	movs	r2, #5
 800db36:	f817 1b01 	ldrb.w	r1, [r7], #1
 800db3a:	4850      	ldr	r0, [pc, #320]	; (800dc7c <_svfiprintf_r+0x1dc>)
 800db3c:	f7f2 fb50 	bl	80001e0 <memchr>
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	b9d0      	cbnz	r0, 800db7a <_svfiprintf_r+0xda>
 800db44:	06d9      	lsls	r1, r3, #27
 800db46:	bf44      	itt	mi
 800db48:	2220      	movmi	r2, #32
 800db4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db4e:	071a      	lsls	r2, r3, #28
 800db50:	bf44      	itt	mi
 800db52:	222b      	movmi	r2, #43	; 0x2b
 800db54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db58:	782a      	ldrb	r2, [r5, #0]
 800db5a:	2a2a      	cmp	r2, #42	; 0x2a
 800db5c:	d015      	beq.n	800db8a <_svfiprintf_r+0xea>
 800db5e:	9a07      	ldr	r2, [sp, #28]
 800db60:	462f      	mov	r7, r5
 800db62:	2000      	movs	r0, #0
 800db64:	250a      	movs	r5, #10
 800db66:	4639      	mov	r1, r7
 800db68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db6c:	3b30      	subs	r3, #48	; 0x30
 800db6e:	2b09      	cmp	r3, #9
 800db70:	d94d      	bls.n	800dc0e <_svfiprintf_r+0x16e>
 800db72:	b1b8      	cbz	r0, 800dba4 <_svfiprintf_r+0x104>
 800db74:	e00f      	b.n	800db96 <_svfiprintf_r+0xf6>
 800db76:	462f      	mov	r7, r5
 800db78:	e7b8      	b.n	800daec <_svfiprintf_r+0x4c>
 800db7a:	4a40      	ldr	r2, [pc, #256]	; (800dc7c <_svfiprintf_r+0x1dc>)
 800db7c:	1a80      	subs	r0, r0, r2
 800db7e:	fa0b f000 	lsl.w	r0, fp, r0
 800db82:	4318      	orrs	r0, r3
 800db84:	9004      	str	r0, [sp, #16]
 800db86:	463d      	mov	r5, r7
 800db88:	e7d3      	b.n	800db32 <_svfiprintf_r+0x92>
 800db8a:	9a03      	ldr	r2, [sp, #12]
 800db8c:	1d11      	adds	r1, r2, #4
 800db8e:	6812      	ldr	r2, [r2, #0]
 800db90:	9103      	str	r1, [sp, #12]
 800db92:	2a00      	cmp	r2, #0
 800db94:	db01      	blt.n	800db9a <_svfiprintf_r+0xfa>
 800db96:	9207      	str	r2, [sp, #28]
 800db98:	e004      	b.n	800dba4 <_svfiprintf_r+0x104>
 800db9a:	4252      	negs	r2, r2
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	9207      	str	r2, [sp, #28]
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	783b      	ldrb	r3, [r7, #0]
 800dba6:	2b2e      	cmp	r3, #46	; 0x2e
 800dba8:	d10c      	bne.n	800dbc4 <_svfiprintf_r+0x124>
 800dbaa:	787b      	ldrb	r3, [r7, #1]
 800dbac:	2b2a      	cmp	r3, #42	; 0x2a
 800dbae:	d133      	bne.n	800dc18 <_svfiprintf_r+0x178>
 800dbb0:	9b03      	ldr	r3, [sp, #12]
 800dbb2:	1d1a      	adds	r2, r3, #4
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	9203      	str	r2, [sp, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	bfb8      	it	lt
 800dbbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbc0:	3702      	adds	r7, #2
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	4d2e      	ldr	r5, [pc, #184]	; (800dc80 <_svfiprintf_r+0x1e0>)
 800dbc6:	7839      	ldrb	r1, [r7, #0]
 800dbc8:	2203      	movs	r2, #3
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f7f2 fb08 	bl	80001e0 <memchr>
 800dbd0:	b138      	cbz	r0, 800dbe2 <_svfiprintf_r+0x142>
 800dbd2:	2340      	movs	r3, #64	; 0x40
 800dbd4:	1b40      	subs	r0, r0, r5
 800dbd6:	fa03 f000 	lsl.w	r0, r3, r0
 800dbda:	9b04      	ldr	r3, [sp, #16]
 800dbdc:	4303      	orrs	r3, r0
 800dbde:	3701      	adds	r7, #1
 800dbe0:	9304      	str	r3, [sp, #16]
 800dbe2:	7839      	ldrb	r1, [r7, #0]
 800dbe4:	4827      	ldr	r0, [pc, #156]	; (800dc84 <_svfiprintf_r+0x1e4>)
 800dbe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbea:	2206      	movs	r2, #6
 800dbec:	1c7e      	adds	r6, r7, #1
 800dbee:	f7f2 faf7 	bl	80001e0 <memchr>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d038      	beq.n	800dc68 <_svfiprintf_r+0x1c8>
 800dbf6:	4b24      	ldr	r3, [pc, #144]	; (800dc88 <_svfiprintf_r+0x1e8>)
 800dbf8:	bb13      	cbnz	r3, 800dc40 <_svfiprintf_r+0x1a0>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	3307      	adds	r3, #7
 800dbfe:	f023 0307 	bic.w	r3, r3, #7
 800dc02:	3308      	adds	r3, #8
 800dc04:	9303      	str	r3, [sp, #12]
 800dc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc08:	444b      	add	r3, r9
 800dc0a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc0c:	e76d      	b.n	800daea <_svfiprintf_r+0x4a>
 800dc0e:	fb05 3202 	mla	r2, r5, r2, r3
 800dc12:	2001      	movs	r0, #1
 800dc14:	460f      	mov	r7, r1
 800dc16:	e7a6      	b.n	800db66 <_svfiprintf_r+0xc6>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	3701      	adds	r7, #1
 800dc1c:	9305      	str	r3, [sp, #20]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	250a      	movs	r5, #10
 800dc22:	4638      	mov	r0, r7
 800dc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc28:	3a30      	subs	r2, #48	; 0x30
 800dc2a:	2a09      	cmp	r2, #9
 800dc2c:	d903      	bls.n	800dc36 <_svfiprintf_r+0x196>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d0c8      	beq.n	800dbc4 <_svfiprintf_r+0x124>
 800dc32:	9105      	str	r1, [sp, #20]
 800dc34:	e7c6      	b.n	800dbc4 <_svfiprintf_r+0x124>
 800dc36:	fb05 2101 	mla	r1, r5, r1, r2
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	4607      	mov	r7, r0
 800dc3e:	e7f0      	b.n	800dc22 <_svfiprintf_r+0x182>
 800dc40:	ab03      	add	r3, sp, #12
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	4622      	mov	r2, r4
 800dc46:	4b11      	ldr	r3, [pc, #68]	; (800dc8c <_svfiprintf_r+0x1ec>)
 800dc48:	a904      	add	r1, sp, #16
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	f7fe f8ac 	bl	800bda8 <_printf_float>
 800dc50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc54:	4681      	mov	r9, r0
 800dc56:	d1d6      	bne.n	800dc06 <_svfiprintf_r+0x166>
 800dc58:	89a3      	ldrh	r3, [r4, #12]
 800dc5a:	065b      	lsls	r3, r3, #25
 800dc5c:	f53f af35 	bmi.w	800daca <_svfiprintf_r+0x2a>
 800dc60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc62:	b01d      	add	sp, #116	; 0x74
 800dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc68:	ab03      	add	r3, sp, #12
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4622      	mov	r2, r4
 800dc6e:	4b07      	ldr	r3, [pc, #28]	; (800dc8c <_svfiprintf_r+0x1ec>)
 800dc70:	a904      	add	r1, sp, #16
 800dc72:	4640      	mov	r0, r8
 800dc74:	f7fe fb4e 	bl	800c314 <_printf_i>
 800dc78:	e7ea      	b.n	800dc50 <_svfiprintf_r+0x1b0>
 800dc7a:	bf00      	nop
 800dc7c:	080118b4 	.word	0x080118b4
 800dc80:	080118ba 	.word	0x080118ba
 800dc84:	080118be 	.word	0x080118be
 800dc88:	0800bda9 	.word	0x0800bda9
 800dc8c:	0800d9ed 	.word	0x0800d9ed

0800dc90 <__sfputc_r>:
 800dc90:	6893      	ldr	r3, [r2, #8]
 800dc92:	3b01      	subs	r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	b410      	push	{r4}
 800dc98:	6093      	str	r3, [r2, #8]
 800dc9a:	da08      	bge.n	800dcae <__sfputc_r+0x1e>
 800dc9c:	6994      	ldr	r4, [r2, #24]
 800dc9e:	42a3      	cmp	r3, r4
 800dca0:	db01      	blt.n	800dca6 <__sfputc_r+0x16>
 800dca2:	290a      	cmp	r1, #10
 800dca4:	d103      	bne.n	800dcae <__sfputc_r+0x1e>
 800dca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcaa:	f000 b975 	b.w	800df98 <__swbuf_r>
 800dcae:	6813      	ldr	r3, [r2, #0]
 800dcb0:	1c58      	adds	r0, r3, #1
 800dcb2:	6010      	str	r0, [r2, #0]
 800dcb4:	7019      	strb	r1, [r3, #0]
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcbc:	4770      	bx	lr

0800dcbe <__sfputs_r>:
 800dcbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc0:	4606      	mov	r6, r0
 800dcc2:	460f      	mov	r7, r1
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	18d5      	adds	r5, r2, r3
 800dcc8:	42ac      	cmp	r4, r5
 800dcca:	d101      	bne.n	800dcd0 <__sfputs_r+0x12>
 800dccc:	2000      	movs	r0, #0
 800dcce:	e007      	b.n	800dce0 <__sfputs_r+0x22>
 800dcd0:	463a      	mov	r2, r7
 800dcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7ff ffda 	bl	800dc90 <__sfputc_r>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d1f3      	bne.n	800dcc8 <__sfputs_r+0xa>
 800dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dce4 <_vfiprintf_r>:
 800dce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	460c      	mov	r4, r1
 800dcea:	b09d      	sub	sp, #116	; 0x74
 800dcec:	4617      	mov	r7, r2
 800dcee:	461d      	mov	r5, r3
 800dcf0:	4606      	mov	r6, r0
 800dcf2:	b118      	cbz	r0, 800dcfc <_vfiprintf_r+0x18>
 800dcf4:	6983      	ldr	r3, [r0, #24]
 800dcf6:	b90b      	cbnz	r3, 800dcfc <_vfiprintf_r+0x18>
 800dcf8:	f7ff faea 	bl	800d2d0 <__sinit>
 800dcfc:	4b7c      	ldr	r3, [pc, #496]	; (800def0 <_vfiprintf_r+0x20c>)
 800dcfe:	429c      	cmp	r4, r3
 800dd00:	d158      	bne.n	800ddb4 <_vfiprintf_r+0xd0>
 800dd02:	6874      	ldr	r4, [r6, #4]
 800dd04:	89a3      	ldrh	r3, [r4, #12]
 800dd06:	0718      	lsls	r0, r3, #28
 800dd08:	d55e      	bpl.n	800ddc8 <_vfiprintf_r+0xe4>
 800dd0a:	6923      	ldr	r3, [r4, #16]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d05b      	beq.n	800ddc8 <_vfiprintf_r+0xe4>
 800dd10:	2300      	movs	r3, #0
 800dd12:	9309      	str	r3, [sp, #36]	; 0x24
 800dd14:	2320      	movs	r3, #32
 800dd16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd1a:	2330      	movs	r3, #48	; 0x30
 800dd1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd20:	9503      	str	r5, [sp, #12]
 800dd22:	f04f 0b01 	mov.w	fp, #1
 800dd26:	46b8      	mov	r8, r7
 800dd28:	4645      	mov	r5, r8
 800dd2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dd2e:	b10b      	cbz	r3, 800dd34 <_vfiprintf_r+0x50>
 800dd30:	2b25      	cmp	r3, #37	; 0x25
 800dd32:	d154      	bne.n	800ddde <_vfiprintf_r+0xfa>
 800dd34:	ebb8 0a07 	subs.w	sl, r8, r7
 800dd38:	d00b      	beq.n	800dd52 <_vfiprintf_r+0x6e>
 800dd3a:	4653      	mov	r3, sl
 800dd3c:	463a      	mov	r2, r7
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4630      	mov	r0, r6
 800dd42:	f7ff ffbc 	bl	800dcbe <__sfputs_r>
 800dd46:	3001      	adds	r0, #1
 800dd48:	f000 80c2 	beq.w	800ded0 <_vfiprintf_r+0x1ec>
 800dd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4e:	4453      	add	r3, sl
 800dd50:	9309      	str	r3, [sp, #36]	; 0x24
 800dd52:	f898 3000 	ldrb.w	r3, [r8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 80ba 	beq.w	800ded0 <_vfiprintf_r+0x1ec>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd66:	9304      	str	r3, [sp, #16]
 800dd68:	9307      	str	r3, [sp, #28]
 800dd6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd6e:	931a      	str	r3, [sp, #104]	; 0x68
 800dd70:	46a8      	mov	r8, r5
 800dd72:	2205      	movs	r2, #5
 800dd74:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dd78:	485e      	ldr	r0, [pc, #376]	; (800def4 <_vfiprintf_r+0x210>)
 800dd7a:	f7f2 fa31 	bl	80001e0 <memchr>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	bb78      	cbnz	r0, 800dde2 <_vfiprintf_r+0xfe>
 800dd82:	06d9      	lsls	r1, r3, #27
 800dd84:	bf44      	itt	mi
 800dd86:	2220      	movmi	r2, #32
 800dd88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd8c:	071a      	lsls	r2, r3, #28
 800dd8e:	bf44      	itt	mi
 800dd90:	222b      	movmi	r2, #43	; 0x2b
 800dd92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd96:	782a      	ldrb	r2, [r5, #0]
 800dd98:	2a2a      	cmp	r2, #42	; 0x2a
 800dd9a:	d02a      	beq.n	800ddf2 <_vfiprintf_r+0x10e>
 800dd9c:	9a07      	ldr	r2, [sp, #28]
 800dd9e:	46a8      	mov	r8, r5
 800dda0:	2000      	movs	r0, #0
 800dda2:	250a      	movs	r5, #10
 800dda4:	4641      	mov	r1, r8
 800dda6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddaa:	3b30      	subs	r3, #48	; 0x30
 800ddac:	2b09      	cmp	r3, #9
 800ddae:	d969      	bls.n	800de84 <_vfiprintf_r+0x1a0>
 800ddb0:	b360      	cbz	r0, 800de0c <_vfiprintf_r+0x128>
 800ddb2:	e024      	b.n	800ddfe <_vfiprintf_r+0x11a>
 800ddb4:	4b50      	ldr	r3, [pc, #320]	; (800def8 <_vfiprintf_r+0x214>)
 800ddb6:	429c      	cmp	r4, r3
 800ddb8:	d101      	bne.n	800ddbe <_vfiprintf_r+0xda>
 800ddba:	68b4      	ldr	r4, [r6, #8]
 800ddbc:	e7a2      	b.n	800dd04 <_vfiprintf_r+0x20>
 800ddbe:	4b4f      	ldr	r3, [pc, #316]	; (800defc <_vfiprintf_r+0x218>)
 800ddc0:	429c      	cmp	r4, r3
 800ddc2:	bf08      	it	eq
 800ddc4:	68f4      	ldreq	r4, [r6, #12]
 800ddc6:	e79d      	b.n	800dd04 <_vfiprintf_r+0x20>
 800ddc8:	4621      	mov	r1, r4
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f000 f948 	bl	800e060 <__swsetup_r>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d09d      	beq.n	800dd10 <_vfiprintf_r+0x2c>
 800ddd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd8:	b01d      	add	sp, #116	; 0x74
 800ddda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddde:	46a8      	mov	r8, r5
 800dde0:	e7a2      	b.n	800dd28 <_vfiprintf_r+0x44>
 800dde2:	4a44      	ldr	r2, [pc, #272]	; (800def4 <_vfiprintf_r+0x210>)
 800dde4:	1a80      	subs	r0, r0, r2
 800dde6:	fa0b f000 	lsl.w	r0, fp, r0
 800ddea:	4318      	orrs	r0, r3
 800ddec:	9004      	str	r0, [sp, #16]
 800ddee:	4645      	mov	r5, r8
 800ddf0:	e7be      	b.n	800dd70 <_vfiprintf_r+0x8c>
 800ddf2:	9a03      	ldr	r2, [sp, #12]
 800ddf4:	1d11      	adds	r1, r2, #4
 800ddf6:	6812      	ldr	r2, [r2, #0]
 800ddf8:	9103      	str	r1, [sp, #12]
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	db01      	blt.n	800de02 <_vfiprintf_r+0x11e>
 800ddfe:	9207      	str	r2, [sp, #28]
 800de00:	e004      	b.n	800de0c <_vfiprintf_r+0x128>
 800de02:	4252      	negs	r2, r2
 800de04:	f043 0302 	orr.w	r3, r3, #2
 800de08:	9207      	str	r2, [sp, #28]
 800de0a:	9304      	str	r3, [sp, #16]
 800de0c:	f898 3000 	ldrb.w	r3, [r8]
 800de10:	2b2e      	cmp	r3, #46	; 0x2e
 800de12:	d10e      	bne.n	800de32 <_vfiprintf_r+0x14e>
 800de14:	f898 3001 	ldrb.w	r3, [r8, #1]
 800de18:	2b2a      	cmp	r3, #42	; 0x2a
 800de1a:	d138      	bne.n	800de8e <_vfiprintf_r+0x1aa>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	1d1a      	adds	r2, r3, #4
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	9203      	str	r2, [sp, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	bfb8      	it	lt
 800de28:	f04f 33ff 	movlt.w	r3, #4294967295
 800de2c:	f108 0802 	add.w	r8, r8, #2
 800de30:	9305      	str	r3, [sp, #20]
 800de32:	4d33      	ldr	r5, [pc, #204]	; (800df00 <_vfiprintf_r+0x21c>)
 800de34:	f898 1000 	ldrb.w	r1, [r8]
 800de38:	2203      	movs	r2, #3
 800de3a:	4628      	mov	r0, r5
 800de3c:	f7f2 f9d0 	bl	80001e0 <memchr>
 800de40:	b140      	cbz	r0, 800de54 <_vfiprintf_r+0x170>
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	1b40      	subs	r0, r0, r5
 800de46:	fa03 f000 	lsl.w	r0, r3, r0
 800de4a:	9b04      	ldr	r3, [sp, #16]
 800de4c:	4303      	orrs	r3, r0
 800de4e:	f108 0801 	add.w	r8, r8, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	f898 1000 	ldrb.w	r1, [r8]
 800de58:	482a      	ldr	r0, [pc, #168]	; (800df04 <_vfiprintf_r+0x220>)
 800de5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de5e:	2206      	movs	r2, #6
 800de60:	f108 0701 	add.w	r7, r8, #1
 800de64:	f7f2 f9bc 	bl	80001e0 <memchr>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d037      	beq.n	800dedc <_vfiprintf_r+0x1f8>
 800de6c:	4b26      	ldr	r3, [pc, #152]	; (800df08 <_vfiprintf_r+0x224>)
 800de6e:	bb1b      	cbnz	r3, 800deb8 <_vfiprintf_r+0x1d4>
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	3307      	adds	r3, #7
 800de74:	f023 0307 	bic.w	r3, r3, #7
 800de78:	3308      	adds	r3, #8
 800de7a:	9303      	str	r3, [sp, #12]
 800de7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7e:	444b      	add	r3, r9
 800de80:	9309      	str	r3, [sp, #36]	; 0x24
 800de82:	e750      	b.n	800dd26 <_vfiprintf_r+0x42>
 800de84:	fb05 3202 	mla	r2, r5, r2, r3
 800de88:	2001      	movs	r0, #1
 800de8a:	4688      	mov	r8, r1
 800de8c:	e78a      	b.n	800dda4 <_vfiprintf_r+0xc0>
 800de8e:	2300      	movs	r3, #0
 800de90:	f108 0801 	add.w	r8, r8, #1
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	4619      	mov	r1, r3
 800de98:	250a      	movs	r5, #10
 800de9a:	4640      	mov	r0, r8
 800de9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dea0:	3a30      	subs	r2, #48	; 0x30
 800dea2:	2a09      	cmp	r2, #9
 800dea4:	d903      	bls.n	800deae <_vfiprintf_r+0x1ca>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d0c3      	beq.n	800de32 <_vfiprintf_r+0x14e>
 800deaa:	9105      	str	r1, [sp, #20]
 800deac:	e7c1      	b.n	800de32 <_vfiprintf_r+0x14e>
 800deae:	fb05 2101 	mla	r1, r5, r1, r2
 800deb2:	2301      	movs	r3, #1
 800deb4:	4680      	mov	r8, r0
 800deb6:	e7f0      	b.n	800de9a <_vfiprintf_r+0x1b6>
 800deb8:	ab03      	add	r3, sp, #12
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	4622      	mov	r2, r4
 800debe:	4b13      	ldr	r3, [pc, #76]	; (800df0c <_vfiprintf_r+0x228>)
 800dec0:	a904      	add	r1, sp, #16
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7fd ff70 	bl	800bda8 <_printf_float>
 800dec8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800decc:	4681      	mov	r9, r0
 800dece:	d1d5      	bne.n	800de7c <_vfiprintf_r+0x198>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	065b      	lsls	r3, r3, #25
 800ded4:	f53f af7e 	bmi.w	800ddd4 <_vfiprintf_r+0xf0>
 800ded8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deda:	e77d      	b.n	800ddd8 <_vfiprintf_r+0xf4>
 800dedc:	ab03      	add	r3, sp, #12
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	4622      	mov	r2, r4
 800dee2:	4b0a      	ldr	r3, [pc, #40]	; (800df0c <_vfiprintf_r+0x228>)
 800dee4:	a904      	add	r1, sp, #16
 800dee6:	4630      	mov	r0, r6
 800dee8:	f7fe fa14 	bl	800c314 <_printf_i>
 800deec:	e7ec      	b.n	800dec8 <_vfiprintf_r+0x1e4>
 800deee:	bf00      	nop
 800def0:	08011774 	.word	0x08011774
 800def4:	080118b4 	.word	0x080118b4
 800def8:	08011794 	.word	0x08011794
 800defc:	08011754 	.word	0x08011754
 800df00:	080118ba 	.word	0x080118ba
 800df04:	080118be 	.word	0x080118be
 800df08:	0800bda9 	.word	0x0800bda9
 800df0c:	0800dcbf 	.word	0x0800dcbf

0800df10 <__sread>:
 800df10:	b510      	push	{r4, lr}
 800df12:	460c      	mov	r4, r1
 800df14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df18:	f000 fa98 	bl	800e44c <_read_r>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	bfab      	itete	ge
 800df20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df22:	89a3      	ldrhlt	r3, [r4, #12]
 800df24:	181b      	addge	r3, r3, r0
 800df26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df2a:	bfac      	ite	ge
 800df2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800df2e:	81a3      	strhlt	r3, [r4, #12]
 800df30:	bd10      	pop	{r4, pc}

0800df32 <__swrite>:
 800df32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df36:	461f      	mov	r7, r3
 800df38:	898b      	ldrh	r3, [r1, #12]
 800df3a:	05db      	lsls	r3, r3, #23
 800df3c:	4605      	mov	r5, r0
 800df3e:	460c      	mov	r4, r1
 800df40:	4616      	mov	r6, r2
 800df42:	d505      	bpl.n	800df50 <__swrite+0x1e>
 800df44:	2302      	movs	r3, #2
 800df46:	2200      	movs	r2, #0
 800df48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4c:	f000 f9b6 	bl	800e2bc <_lseek_r>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	4632      	mov	r2, r6
 800df5e:	463b      	mov	r3, r7
 800df60:	4628      	mov	r0, r5
 800df62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df66:	f000 b869 	b.w	800e03c <_write_r>

0800df6a <__sseek>:
 800df6a:	b510      	push	{r4, lr}
 800df6c:	460c      	mov	r4, r1
 800df6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df72:	f000 f9a3 	bl	800e2bc <_lseek_r>
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	bf15      	itete	ne
 800df7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800df7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df86:	81a3      	strheq	r3, [r4, #12]
 800df88:	bf18      	it	ne
 800df8a:	81a3      	strhne	r3, [r4, #12]
 800df8c:	bd10      	pop	{r4, pc}

0800df8e <__sclose>:
 800df8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df92:	f000 b8d3 	b.w	800e13c <_close_r>
	...

0800df98 <__swbuf_r>:
 800df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9a:	460e      	mov	r6, r1
 800df9c:	4614      	mov	r4, r2
 800df9e:	4605      	mov	r5, r0
 800dfa0:	b118      	cbz	r0, 800dfaa <__swbuf_r+0x12>
 800dfa2:	6983      	ldr	r3, [r0, #24]
 800dfa4:	b90b      	cbnz	r3, 800dfaa <__swbuf_r+0x12>
 800dfa6:	f7ff f993 	bl	800d2d0 <__sinit>
 800dfaa:	4b21      	ldr	r3, [pc, #132]	; (800e030 <__swbuf_r+0x98>)
 800dfac:	429c      	cmp	r4, r3
 800dfae:	d12a      	bne.n	800e006 <__swbuf_r+0x6e>
 800dfb0:	686c      	ldr	r4, [r5, #4]
 800dfb2:	69a3      	ldr	r3, [r4, #24]
 800dfb4:	60a3      	str	r3, [r4, #8]
 800dfb6:	89a3      	ldrh	r3, [r4, #12]
 800dfb8:	071a      	lsls	r2, r3, #28
 800dfba:	d52e      	bpl.n	800e01a <__swbuf_r+0x82>
 800dfbc:	6923      	ldr	r3, [r4, #16]
 800dfbe:	b363      	cbz	r3, 800e01a <__swbuf_r+0x82>
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	6820      	ldr	r0, [r4, #0]
 800dfc4:	1ac0      	subs	r0, r0, r3
 800dfc6:	6963      	ldr	r3, [r4, #20]
 800dfc8:	b2f6      	uxtb	r6, r6
 800dfca:	4283      	cmp	r3, r0
 800dfcc:	4637      	mov	r7, r6
 800dfce:	dc04      	bgt.n	800dfda <__swbuf_r+0x42>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f000 f948 	bl	800e268 <_fflush_r>
 800dfd8:	bb28      	cbnz	r0, 800e026 <__swbuf_r+0x8e>
 800dfda:	68a3      	ldr	r3, [r4, #8]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	60a3      	str	r3, [r4, #8]
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	6022      	str	r2, [r4, #0]
 800dfe6:	701e      	strb	r6, [r3, #0]
 800dfe8:	6963      	ldr	r3, [r4, #20]
 800dfea:	3001      	adds	r0, #1
 800dfec:	4283      	cmp	r3, r0
 800dfee:	d004      	beq.n	800dffa <__swbuf_r+0x62>
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	07db      	lsls	r3, r3, #31
 800dff4:	d519      	bpl.n	800e02a <__swbuf_r+0x92>
 800dff6:	2e0a      	cmp	r6, #10
 800dff8:	d117      	bne.n	800e02a <__swbuf_r+0x92>
 800dffa:	4621      	mov	r1, r4
 800dffc:	4628      	mov	r0, r5
 800dffe:	f000 f933 	bl	800e268 <_fflush_r>
 800e002:	b190      	cbz	r0, 800e02a <__swbuf_r+0x92>
 800e004:	e00f      	b.n	800e026 <__swbuf_r+0x8e>
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <__swbuf_r+0x9c>)
 800e008:	429c      	cmp	r4, r3
 800e00a:	d101      	bne.n	800e010 <__swbuf_r+0x78>
 800e00c:	68ac      	ldr	r4, [r5, #8]
 800e00e:	e7d0      	b.n	800dfb2 <__swbuf_r+0x1a>
 800e010:	4b09      	ldr	r3, [pc, #36]	; (800e038 <__swbuf_r+0xa0>)
 800e012:	429c      	cmp	r4, r3
 800e014:	bf08      	it	eq
 800e016:	68ec      	ldreq	r4, [r5, #12]
 800e018:	e7cb      	b.n	800dfb2 <__swbuf_r+0x1a>
 800e01a:	4621      	mov	r1, r4
 800e01c:	4628      	mov	r0, r5
 800e01e:	f000 f81f 	bl	800e060 <__swsetup_r>
 800e022:	2800      	cmp	r0, #0
 800e024:	d0cc      	beq.n	800dfc0 <__swbuf_r+0x28>
 800e026:	f04f 37ff 	mov.w	r7, #4294967295
 800e02a:	4638      	mov	r0, r7
 800e02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e02e:	bf00      	nop
 800e030:	08011774 	.word	0x08011774
 800e034:	08011794 	.word	0x08011794
 800e038:	08011754 	.word	0x08011754

0800e03c <_write_r>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	4c07      	ldr	r4, [pc, #28]	; (800e05c <_write_r+0x20>)
 800e040:	4605      	mov	r5, r0
 800e042:	4608      	mov	r0, r1
 800e044:	4611      	mov	r1, r2
 800e046:	2200      	movs	r2, #0
 800e048:	6022      	str	r2, [r4, #0]
 800e04a:	461a      	mov	r2, r3
 800e04c:	f7f7 fd3b 	bl	8005ac6 <_write>
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	d102      	bne.n	800e05a <_write_r+0x1e>
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	b103      	cbz	r3, 800e05a <_write_r+0x1e>
 800e058:	602b      	str	r3, [r5, #0]
 800e05a:	bd38      	pop	{r3, r4, r5, pc}
 800e05c:	20011390 	.word	0x20011390

0800e060 <__swsetup_r>:
 800e060:	4b32      	ldr	r3, [pc, #200]	; (800e12c <__swsetup_r+0xcc>)
 800e062:	b570      	push	{r4, r5, r6, lr}
 800e064:	681d      	ldr	r5, [r3, #0]
 800e066:	4606      	mov	r6, r0
 800e068:	460c      	mov	r4, r1
 800e06a:	b125      	cbz	r5, 800e076 <__swsetup_r+0x16>
 800e06c:	69ab      	ldr	r3, [r5, #24]
 800e06e:	b913      	cbnz	r3, 800e076 <__swsetup_r+0x16>
 800e070:	4628      	mov	r0, r5
 800e072:	f7ff f92d 	bl	800d2d0 <__sinit>
 800e076:	4b2e      	ldr	r3, [pc, #184]	; (800e130 <__swsetup_r+0xd0>)
 800e078:	429c      	cmp	r4, r3
 800e07a:	d10f      	bne.n	800e09c <__swsetup_r+0x3c>
 800e07c:	686c      	ldr	r4, [r5, #4]
 800e07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e082:	b29a      	uxth	r2, r3
 800e084:	0715      	lsls	r5, r2, #28
 800e086:	d42c      	bmi.n	800e0e2 <__swsetup_r+0x82>
 800e088:	06d0      	lsls	r0, r2, #27
 800e08a:	d411      	bmi.n	800e0b0 <__swsetup_r+0x50>
 800e08c:	2209      	movs	r2, #9
 800e08e:	6032      	str	r2, [r6, #0]
 800e090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e094:	81a3      	strh	r3, [r4, #12]
 800e096:	f04f 30ff 	mov.w	r0, #4294967295
 800e09a:	e03e      	b.n	800e11a <__swsetup_r+0xba>
 800e09c:	4b25      	ldr	r3, [pc, #148]	; (800e134 <__swsetup_r+0xd4>)
 800e09e:	429c      	cmp	r4, r3
 800e0a0:	d101      	bne.n	800e0a6 <__swsetup_r+0x46>
 800e0a2:	68ac      	ldr	r4, [r5, #8]
 800e0a4:	e7eb      	b.n	800e07e <__swsetup_r+0x1e>
 800e0a6:	4b24      	ldr	r3, [pc, #144]	; (800e138 <__swsetup_r+0xd8>)
 800e0a8:	429c      	cmp	r4, r3
 800e0aa:	bf08      	it	eq
 800e0ac:	68ec      	ldreq	r4, [r5, #12]
 800e0ae:	e7e6      	b.n	800e07e <__swsetup_r+0x1e>
 800e0b0:	0751      	lsls	r1, r2, #29
 800e0b2:	d512      	bpl.n	800e0da <__swsetup_r+0x7a>
 800e0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0b6:	b141      	cbz	r1, 800e0ca <__swsetup_r+0x6a>
 800e0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0bc:	4299      	cmp	r1, r3
 800e0be:	d002      	beq.n	800e0c6 <__swsetup_r+0x66>
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f7fd fd35 	bl	800bb30 <_free_r>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0d0:	81a3      	strh	r3, [r4, #12]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	6063      	str	r3, [r4, #4]
 800e0d6:	6923      	ldr	r3, [r4, #16]
 800e0d8:	6023      	str	r3, [r4, #0]
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	f043 0308 	orr.w	r3, r3, #8
 800e0e0:	81a3      	strh	r3, [r4, #12]
 800e0e2:	6923      	ldr	r3, [r4, #16]
 800e0e4:	b94b      	cbnz	r3, 800e0fa <__swsetup_r+0x9a>
 800e0e6:	89a3      	ldrh	r3, [r4, #12]
 800e0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0f0:	d003      	beq.n	800e0fa <__swsetup_r+0x9a>
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f000 f917 	bl	800e328 <__smakebuf_r>
 800e0fa:	89a2      	ldrh	r2, [r4, #12]
 800e0fc:	f012 0301 	ands.w	r3, r2, #1
 800e100:	d00c      	beq.n	800e11c <__swsetup_r+0xbc>
 800e102:	2300      	movs	r3, #0
 800e104:	60a3      	str	r3, [r4, #8]
 800e106:	6963      	ldr	r3, [r4, #20]
 800e108:	425b      	negs	r3, r3
 800e10a:	61a3      	str	r3, [r4, #24]
 800e10c:	6923      	ldr	r3, [r4, #16]
 800e10e:	b953      	cbnz	r3, 800e126 <__swsetup_r+0xc6>
 800e110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e114:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e118:	d1ba      	bne.n	800e090 <__swsetup_r+0x30>
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	0792      	lsls	r2, r2, #30
 800e11e:	bf58      	it	pl
 800e120:	6963      	ldrpl	r3, [r4, #20]
 800e122:	60a3      	str	r3, [r4, #8]
 800e124:	e7f2      	b.n	800e10c <__swsetup_r+0xac>
 800e126:	2000      	movs	r0, #0
 800e128:	e7f7      	b.n	800e11a <__swsetup_r+0xba>
 800e12a:	bf00      	nop
 800e12c:	200000a8 	.word	0x200000a8
 800e130:	08011774 	.word	0x08011774
 800e134:	08011794 	.word	0x08011794
 800e138:	08011754 	.word	0x08011754

0800e13c <_close_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4c06      	ldr	r4, [pc, #24]	; (800e158 <_close_r+0x1c>)
 800e140:	2300      	movs	r3, #0
 800e142:	4605      	mov	r5, r0
 800e144:	4608      	mov	r0, r1
 800e146:	6023      	str	r3, [r4, #0]
 800e148:	f7f7 fcd9 	bl	8005afe <_close>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_close_r+0x1a>
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	b103      	cbz	r3, 800e156 <_close_r+0x1a>
 800e154:	602b      	str	r3, [r5, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20011390 	.word	0x20011390

0800e15c <__sflush_r>:
 800e15c:	898a      	ldrh	r2, [r1, #12]
 800e15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e162:	4605      	mov	r5, r0
 800e164:	0710      	lsls	r0, r2, #28
 800e166:	460c      	mov	r4, r1
 800e168:	d458      	bmi.n	800e21c <__sflush_r+0xc0>
 800e16a:	684b      	ldr	r3, [r1, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dc05      	bgt.n	800e17c <__sflush_r+0x20>
 800e170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e172:	2b00      	cmp	r3, #0
 800e174:	dc02      	bgt.n	800e17c <__sflush_r+0x20>
 800e176:	2000      	movs	r0, #0
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e17e:	2e00      	cmp	r6, #0
 800e180:	d0f9      	beq.n	800e176 <__sflush_r+0x1a>
 800e182:	2300      	movs	r3, #0
 800e184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e188:	682f      	ldr	r7, [r5, #0]
 800e18a:	6a21      	ldr	r1, [r4, #32]
 800e18c:	602b      	str	r3, [r5, #0]
 800e18e:	d032      	beq.n	800e1f6 <__sflush_r+0x9a>
 800e190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	075a      	lsls	r2, r3, #29
 800e196:	d505      	bpl.n	800e1a4 <__sflush_r+0x48>
 800e198:	6863      	ldr	r3, [r4, #4]
 800e19a:	1ac0      	subs	r0, r0, r3
 800e19c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e19e:	b10b      	cbz	r3, 800e1a4 <__sflush_r+0x48>
 800e1a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1a2:	1ac0      	subs	r0, r0, r3
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1aa:	6a21      	ldr	r1, [r4, #32]
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	47b0      	blx	r6
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	d106      	bne.n	800e1c4 <__sflush_r+0x68>
 800e1b6:	6829      	ldr	r1, [r5, #0]
 800e1b8:	291d      	cmp	r1, #29
 800e1ba:	d848      	bhi.n	800e24e <__sflush_r+0xf2>
 800e1bc:	4a29      	ldr	r2, [pc, #164]	; (800e264 <__sflush_r+0x108>)
 800e1be:	40ca      	lsrs	r2, r1
 800e1c0:	07d6      	lsls	r6, r2, #31
 800e1c2:	d544      	bpl.n	800e24e <__sflush_r+0xf2>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	6062      	str	r2, [r4, #4]
 800e1c8:	04d9      	lsls	r1, r3, #19
 800e1ca:	6922      	ldr	r2, [r4, #16]
 800e1cc:	6022      	str	r2, [r4, #0]
 800e1ce:	d504      	bpl.n	800e1da <__sflush_r+0x7e>
 800e1d0:	1c42      	adds	r2, r0, #1
 800e1d2:	d101      	bne.n	800e1d8 <__sflush_r+0x7c>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b903      	cbnz	r3, 800e1da <__sflush_r+0x7e>
 800e1d8:	6560      	str	r0, [r4, #84]	; 0x54
 800e1da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1dc:	602f      	str	r7, [r5, #0]
 800e1de:	2900      	cmp	r1, #0
 800e1e0:	d0c9      	beq.n	800e176 <__sflush_r+0x1a>
 800e1e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1e6:	4299      	cmp	r1, r3
 800e1e8:	d002      	beq.n	800e1f0 <__sflush_r+0x94>
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f7fd fca0 	bl	800bb30 <_free_r>
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	6360      	str	r0, [r4, #52]	; 0x34
 800e1f4:	e7c0      	b.n	800e178 <__sflush_r+0x1c>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	47b0      	blx	r6
 800e1fc:	1c41      	adds	r1, r0, #1
 800e1fe:	d1c8      	bne.n	800e192 <__sflush_r+0x36>
 800e200:	682b      	ldr	r3, [r5, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0c5      	beq.n	800e192 <__sflush_r+0x36>
 800e206:	2b1d      	cmp	r3, #29
 800e208:	d001      	beq.n	800e20e <__sflush_r+0xb2>
 800e20a:	2b16      	cmp	r3, #22
 800e20c:	d101      	bne.n	800e212 <__sflush_r+0xb6>
 800e20e:	602f      	str	r7, [r5, #0]
 800e210:	e7b1      	b.n	800e176 <__sflush_r+0x1a>
 800e212:	89a3      	ldrh	r3, [r4, #12]
 800e214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e218:	81a3      	strh	r3, [r4, #12]
 800e21a:	e7ad      	b.n	800e178 <__sflush_r+0x1c>
 800e21c:	690f      	ldr	r7, [r1, #16]
 800e21e:	2f00      	cmp	r7, #0
 800e220:	d0a9      	beq.n	800e176 <__sflush_r+0x1a>
 800e222:	0793      	lsls	r3, r2, #30
 800e224:	680e      	ldr	r6, [r1, #0]
 800e226:	bf08      	it	eq
 800e228:	694b      	ldreq	r3, [r1, #20]
 800e22a:	600f      	str	r7, [r1, #0]
 800e22c:	bf18      	it	ne
 800e22e:	2300      	movne	r3, #0
 800e230:	eba6 0807 	sub.w	r8, r6, r7
 800e234:	608b      	str	r3, [r1, #8]
 800e236:	f1b8 0f00 	cmp.w	r8, #0
 800e23a:	dd9c      	ble.n	800e176 <__sflush_r+0x1a>
 800e23c:	4643      	mov	r3, r8
 800e23e:	463a      	mov	r2, r7
 800e240:	6a21      	ldr	r1, [r4, #32]
 800e242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e244:	4628      	mov	r0, r5
 800e246:	47b0      	blx	r6
 800e248:	2800      	cmp	r0, #0
 800e24a:	dc06      	bgt.n	800e25a <__sflush_r+0xfe>
 800e24c:	89a3      	ldrh	r3, [r4, #12]
 800e24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e252:	81a3      	strh	r3, [r4, #12]
 800e254:	f04f 30ff 	mov.w	r0, #4294967295
 800e258:	e78e      	b.n	800e178 <__sflush_r+0x1c>
 800e25a:	4407      	add	r7, r0
 800e25c:	eba8 0800 	sub.w	r8, r8, r0
 800e260:	e7e9      	b.n	800e236 <__sflush_r+0xda>
 800e262:	bf00      	nop
 800e264:	20400001 	.word	0x20400001

0800e268 <_fflush_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	690b      	ldr	r3, [r1, #16]
 800e26c:	4605      	mov	r5, r0
 800e26e:	460c      	mov	r4, r1
 800e270:	b1db      	cbz	r3, 800e2aa <_fflush_r+0x42>
 800e272:	b118      	cbz	r0, 800e27c <_fflush_r+0x14>
 800e274:	6983      	ldr	r3, [r0, #24]
 800e276:	b90b      	cbnz	r3, 800e27c <_fflush_r+0x14>
 800e278:	f7ff f82a 	bl	800d2d0 <__sinit>
 800e27c:	4b0c      	ldr	r3, [pc, #48]	; (800e2b0 <_fflush_r+0x48>)
 800e27e:	429c      	cmp	r4, r3
 800e280:	d109      	bne.n	800e296 <_fflush_r+0x2e>
 800e282:	686c      	ldr	r4, [r5, #4]
 800e284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e288:	b17b      	cbz	r3, 800e2aa <_fflush_r+0x42>
 800e28a:	4621      	mov	r1, r4
 800e28c:	4628      	mov	r0, r5
 800e28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e292:	f7ff bf63 	b.w	800e15c <__sflush_r>
 800e296:	4b07      	ldr	r3, [pc, #28]	; (800e2b4 <_fflush_r+0x4c>)
 800e298:	429c      	cmp	r4, r3
 800e29a:	d101      	bne.n	800e2a0 <_fflush_r+0x38>
 800e29c:	68ac      	ldr	r4, [r5, #8]
 800e29e:	e7f1      	b.n	800e284 <_fflush_r+0x1c>
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <_fflush_r+0x50>)
 800e2a2:	429c      	cmp	r4, r3
 800e2a4:	bf08      	it	eq
 800e2a6:	68ec      	ldreq	r4, [r5, #12]
 800e2a8:	e7ec      	b.n	800e284 <_fflush_r+0x1c>
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	bd38      	pop	{r3, r4, r5, pc}
 800e2ae:	bf00      	nop
 800e2b0:	08011774 	.word	0x08011774
 800e2b4:	08011794 	.word	0x08011794
 800e2b8:	08011754 	.word	0x08011754

0800e2bc <_lseek_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4c07      	ldr	r4, [pc, #28]	; (800e2dc <_lseek_r+0x20>)
 800e2c0:	4605      	mov	r5, r0
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	6022      	str	r2, [r4, #0]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f7f7 fc3e 	bl	8005b4c <_lseek>
 800e2d0:	1c43      	adds	r3, r0, #1
 800e2d2:	d102      	bne.n	800e2da <_lseek_r+0x1e>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	b103      	cbz	r3, 800e2da <_lseek_r+0x1e>
 800e2d8:	602b      	str	r3, [r5, #0]
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
 800e2dc:	20011390 	.word	0x20011390

0800e2e0 <__swhatbuf_r>:
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	460e      	mov	r6, r1
 800e2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2e8:	2900      	cmp	r1, #0
 800e2ea:	b096      	sub	sp, #88	; 0x58
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	461d      	mov	r5, r3
 800e2f0:	da07      	bge.n	800e302 <__swhatbuf_r+0x22>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	89b3      	ldrh	r3, [r6, #12]
 800e2f8:	061a      	lsls	r2, r3, #24
 800e2fa:	d410      	bmi.n	800e31e <__swhatbuf_r+0x3e>
 800e2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e300:	e00e      	b.n	800e320 <__swhatbuf_r+0x40>
 800e302:	466a      	mov	r2, sp
 800e304:	f000 f8c2 	bl	800e48c <_fstat_r>
 800e308:	2800      	cmp	r0, #0
 800e30a:	dbf2      	blt.n	800e2f2 <__swhatbuf_r+0x12>
 800e30c:	9a01      	ldr	r2, [sp, #4]
 800e30e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e316:	425a      	negs	r2, r3
 800e318:	415a      	adcs	r2, r3
 800e31a:	602a      	str	r2, [r5, #0]
 800e31c:	e7ee      	b.n	800e2fc <__swhatbuf_r+0x1c>
 800e31e:	2340      	movs	r3, #64	; 0x40
 800e320:	2000      	movs	r0, #0
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	b016      	add	sp, #88	; 0x58
 800e326:	bd70      	pop	{r4, r5, r6, pc}

0800e328 <__smakebuf_r>:
 800e328:	898b      	ldrh	r3, [r1, #12]
 800e32a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e32c:	079d      	lsls	r5, r3, #30
 800e32e:	4606      	mov	r6, r0
 800e330:	460c      	mov	r4, r1
 800e332:	d507      	bpl.n	800e344 <__smakebuf_r+0x1c>
 800e334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	6123      	str	r3, [r4, #16]
 800e33c:	2301      	movs	r3, #1
 800e33e:	6163      	str	r3, [r4, #20]
 800e340:	b002      	add	sp, #8
 800e342:	bd70      	pop	{r4, r5, r6, pc}
 800e344:	ab01      	add	r3, sp, #4
 800e346:	466a      	mov	r2, sp
 800e348:	f7ff ffca 	bl	800e2e0 <__swhatbuf_r>
 800e34c:	9900      	ldr	r1, [sp, #0]
 800e34e:	4605      	mov	r5, r0
 800e350:	4630      	mov	r0, r6
 800e352:	f7fd fc3b 	bl	800bbcc <_malloc_r>
 800e356:	b948      	cbnz	r0, 800e36c <__smakebuf_r+0x44>
 800e358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e35c:	059a      	lsls	r2, r3, #22
 800e35e:	d4ef      	bmi.n	800e340 <__smakebuf_r+0x18>
 800e360:	f023 0303 	bic.w	r3, r3, #3
 800e364:	f043 0302 	orr.w	r3, r3, #2
 800e368:	81a3      	strh	r3, [r4, #12]
 800e36a:	e7e3      	b.n	800e334 <__smakebuf_r+0xc>
 800e36c:	4b0d      	ldr	r3, [pc, #52]	; (800e3a4 <__smakebuf_r+0x7c>)
 800e36e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	6020      	str	r0, [r4, #0]
 800e374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	9b00      	ldr	r3, [sp, #0]
 800e37c:	6163      	str	r3, [r4, #20]
 800e37e:	9b01      	ldr	r3, [sp, #4]
 800e380:	6120      	str	r0, [r4, #16]
 800e382:	b15b      	cbz	r3, 800e39c <__smakebuf_r+0x74>
 800e384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e388:	4630      	mov	r0, r6
 800e38a:	f000 f891 	bl	800e4b0 <_isatty_r>
 800e38e:	b128      	cbz	r0, 800e39c <__smakebuf_r+0x74>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	f023 0303 	bic.w	r3, r3, #3
 800e396:	f043 0301 	orr.w	r3, r3, #1
 800e39a:	81a3      	strh	r3, [r4, #12]
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	431d      	orrs	r5, r3
 800e3a0:	81a5      	strh	r5, [r4, #12]
 800e3a2:	e7cd      	b.n	800e340 <__smakebuf_r+0x18>
 800e3a4:	0800d299 	.word	0x0800d299

0800e3a8 <__ascii_mbtowc>:
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	b901      	cbnz	r1, 800e3ae <__ascii_mbtowc+0x6>
 800e3ac:	a901      	add	r1, sp, #4
 800e3ae:	b142      	cbz	r2, 800e3c2 <__ascii_mbtowc+0x1a>
 800e3b0:	b14b      	cbz	r3, 800e3c6 <__ascii_mbtowc+0x1e>
 800e3b2:	7813      	ldrb	r3, [r2, #0]
 800e3b4:	600b      	str	r3, [r1, #0]
 800e3b6:	7812      	ldrb	r2, [r2, #0]
 800e3b8:	1c10      	adds	r0, r2, #0
 800e3ba:	bf18      	it	ne
 800e3bc:	2001      	movne	r0, #1
 800e3be:	b002      	add	sp, #8
 800e3c0:	4770      	bx	lr
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	e7fb      	b.n	800e3be <__ascii_mbtowc+0x16>
 800e3c6:	f06f 0001 	mvn.w	r0, #1
 800e3ca:	e7f8      	b.n	800e3be <__ascii_mbtowc+0x16>

0800e3cc <memmove>:
 800e3cc:	4288      	cmp	r0, r1
 800e3ce:	b510      	push	{r4, lr}
 800e3d0:	eb01 0302 	add.w	r3, r1, r2
 800e3d4:	d807      	bhi.n	800e3e6 <memmove+0x1a>
 800e3d6:	1e42      	subs	r2, r0, #1
 800e3d8:	4299      	cmp	r1, r3
 800e3da:	d00a      	beq.n	800e3f2 <memmove+0x26>
 800e3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e3e4:	e7f8      	b.n	800e3d8 <memmove+0xc>
 800e3e6:	4283      	cmp	r3, r0
 800e3e8:	d9f5      	bls.n	800e3d6 <memmove+0xa>
 800e3ea:	1881      	adds	r1, r0, r2
 800e3ec:	1ad2      	subs	r2, r2, r3
 800e3ee:	42d3      	cmn	r3, r2
 800e3f0:	d100      	bne.n	800e3f4 <memmove+0x28>
 800e3f2:	bd10      	pop	{r4, pc}
 800e3f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e3fc:	e7f7      	b.n	800e3ee <memmove+0x22>

0800e3fe <_realloc_r>:
 800e3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e400:	4607      	mov	r7, r0
 800e402:	4614      	mov	r4, r2
 800e404:	460e      	mov	r6, r1
 800e406:	b921      	cbnz	r1, 800e412 <_realloc_r+0x14>
 800e408:	4611      	mov	r1, r2
 800e40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e40e:	f7fd bbdd 	b.w	800bbcc <_malloc_r>
 800e412:	b922      	cbnz	r2, 800e41e <_realloc_r+0x20>
 800e414:	f7fd fb8c 	bl	800bb30 <_free_r>
 800e418:	4625      	mov	r5, r4
 800e41a:	4628      	mov	r0, r5
 800e41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e41e:	f000 f857 	bl	800e4d0 <_malloc_usable_size_r>
 800e422:	42a0      	cmp	r0, r4
 800e424:	d20f      	bcs.n	800e446 <_realloc_r+0x48>
 800e426:	4621      	mov	r1, r4
 800e428:	4638      	mov	r0, r7
 800e42a:	f7fd fbcf 	bl	800bbcc <_malloc_r>
 800e42e:	4605      	mov	r5, r0
 800e430:	2800      	cmp	r0, #0
 800e432:	d0f2      	beq.n	800e41a <_realloc_r+0x1c>
 800e434:	4631      	mov	r1, r6
 800e436:	4622      	mov	r2, r4
 800e438:	f7fe ffe2 	bl	800d400 <memcpy>
 800e43c:	4631      	mov	r1, r6
 800e43e:	4638      	mov	r0, r7
 800e440:	f7fd fb76 	bl	800bb30 <_free_r>
 800e444:	e7e9      	b.n	800e41a <_realloc_r+0x1c>
 800e446:	4635      	mov	r5, r6
 800e448:	e7e7      	b.n	800e41a <_realloc_r+0x1c>
	...

0800e44c <_read_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4c07      	ldr	r4, [pc, #28]	; (800e46c <_read_r+0x20>)
 800e450:	4605      	mov	r5, r0
 800e452:	4608      	mov	r0, r1
 800e454:	4611      	mov	r1, r2
 800e456:	2200      	movs	r2, #0
 800e458:	6022      	str	r2, [r4, #0]
 800e45a:	461a      	mov	r2, r3
 800e45c:	f7f7 fb16 	bl	8005a8c <_read>
 800e460:	1c43      	adds	r3, r0, #1
 800e462:	d102      	bne.n	800e46a <_read_r+0x1e>
 800e464:	6823      	ldr	r3, [r4, #0]
 800e466:	b103      	cbz	r3, 800e46a <_read_r+0x1e>
 800e468:	602b      	str	r3, [r5, #0]
 800e46a:	bd38      	pop	{r3, r4, r5, pc}
 800e46c:	20011390 	.word	0x20011390

0800e470 <__ascii_wctomb>:
 800e470:	b149      	cbz	r1, 800e486 <__ascii_wctomb+0x16>
 800e472:	2aff      	cmp	r2, #255	; 0xff
 800e474:	bf85      	ittet	hi
 800e476:	238a      	movhi	r3, #138	; 0x8a
 800e478:	6003      	strhi	r3, [r0, #0]
 800e47a:	700a      	strbls	r2, [r1, #0]
 800e47c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e480:	bf98      	it	ls
 800e482:	2001      	movls	r0, #1
 800e484:	4770      	bx	lr
 800e486:	4608      	mov	r0, r1
 800e488:	4770      	bx	lr
	...

0800e48c <_fstat_r>:
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	4c07      	ldr	r4, [pc, #28]	; (800e4ac <_fstat_r+0x20>)
 800e490:	2300      	movs	r3, #0
 800e492:	4605      	mov	r5, r0
 800e494:	4608      	mov	r0, r1
 800e496:	4611      	mov	r1, r2
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	f7f7 fb3c 	bl	8005b16 <_fstat>
 800e49e:	1c43      	adds	r3, r0, #1
 800e4a0:	d102      	bne.n	800e4a8 <_fstat_r+0x1c>
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	b103      	cbz	r3, 800e4a8 <_fstat_r+0x1c>
 800e4a6:	602b      	str	r3, [r5, #0]
 800e4a8:	bd38      	pop	{r3, r4, r5, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20011390 	.word	0x20011390

0800e4b0 <_isatty_r>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	4c06      	ldr	r4, [pc, #24]	; (800e4cc <_isatty_r+0x1c>)
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	6023      	str	r3, [r4, #0]
 800e4bc:	f7f7 fb3b 	bl	8005b36 <_isatty>
 800e4c0:	1c43      	adds	r3, r0, #1
 800e4c2:	d102      	bne.n	800e4ca <_isatty_r+0x1a>
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	b103      	cbz	r3, 800e4ca <_isatty_r+0x1a>
 800e4c8:	602b      	str	r3, [r5, #0]
 800e4ca:	bd38      	pop	{r3, r4, r5, pc}
 800e4cc:	20011390 	.word	0x20011390

0800e4d0 <_malloc_usable_size_r>:
 800e4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d4:	1f18      	subs	r0, r3, #4
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	bfbc      	itt	lt
 800e4da:	580b      	ldrlt	r3, [r1, r0]
 800e4dc:	18c0      	addlt	r0, r0, r3
 800e4de:	4770      	bx	lr

0800e4e0 <exp>:
 800e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4e2:	ed2d 8b02 	vpush	{d8}
 800e4e6:	4e38      	ldr	r6, [pc, #224]	; (800e5c8 <exp+0xe8>)
 800e4e8:	b08b      	sub	sp, #44	; 0x2c
 800e4ea:	ec55 4b10 	vmov	r4, r5, d0
 800e4ee:	f000 f873 	bl	800e5d8 <__ieee754_exp>
 800e4f2:	f996 3000 	ldrsb.w	r3, [r6]
 800e4f6:	eeb0 8a40 	vmov.f32	s16, s0
 800e4fa:	eef0 8a60 	vmov.f32	s17, s1
 800e4fe:	3301      	adds	r3, #1
 800e500:	d02c      	beq.n	800e55c <exp+0x7c>
 800e502:	ec45 4b10 	vmov	d0, r4, r5
 800e506:	f000 f9d5 	bl	800e8b4 <finite>
 800e50a:	b338      	cbz	r0, 800e55c <exp+0x7c>
 800e50c:	a32a      	add	r3, pc, #168	; (adr r3, 800e5b8 <exp+0xd8>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	4620      	mov	r0, r4
 800e514:	4629      	mov	r1, r5
 800e516:	f7f2 faff 	bl	8000b18 <__aeabi_dcmpgt>
 800e51a:	4607      	mov	r7, r0
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d030      	beq.n	800e582 <exp+0xa2>
 800e520:	2303      	movs	r3, #3
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	4b29      	ldr	r3, [pc, #164]	; (800e5cc <exp+0xec>)
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	2300      	movs	r3, #0
 800e52a:	9308      	str	r3, [sp, #32]
 800e52c:	f996 3000 	ldrsb.w	r3, [r6]
 800e530:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800e534:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e538:	b9c3      	cbnz	r3, 800e56c <exp+0x8c>
 800e53a:	4b25      	ldr	r3, [pc, #148]	; (800e5d0 <exp+0xf0>)
 800e53c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e540:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e544:	4668      	mov	r0, sp
 800e546:	f000 f9bd 	bl	800e8c4 <matherr>
 800e54a:	b1a8      	cbz	r0, 800e578 <exp+0x98>
 800e54c:	9b08      	ldr	r3, [sp, #32]
 800e54e:	b11b      	cbz	r3, 800e558 <exp+0x78>
 800e550:	f7fd fab4 	bl	800babc <__errno>
 800e554:	9b08      	ldr	r3, [sp, #32]
 800e556:	6003      	str	r3, [r0, #0]
 800e558:	ed9d 8b06 	vldr	d8, [sp, #24]
 800e55c:	eeb0 0a48 	vmov.f32	s0, s16
 800e560:	eef0 0a68 	vmov.f32	s1, s17
 800e564:	b00b      	add	sp, #44	; 0x2c
 800e566:	ecbd 8b02 	vpop	{d8}
 800e56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e56c:	4919      	ldr	r1, [pc, #100]	; (800e5d4 <exp+0xf4>)
 800e56e:	2000      	movs	r0, #0
 800e570:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e574:	2b02      	cmp	r3, #2
 800e576:	d1e5      	bne.n	800e544 <exp+0x64>
 800e578:	f7fd faa0 	bl	800babc <__errno>
 800e57c:	2322      	movs	r3, #34	; 0x22
 800e57e:	6003      	str	r3, [r0, #0]
 800e580:	e7e4      	b.n	800e54c <exp+0x6c>
 800e582:	a30f      	add	r3, pc, #60	; (adr r3, 800e5c0 <exp+0xe0>)
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	4620      	mov	r0, r4
 800e58a:	4629      	mov	r1, r5
 800e58c:	f7f2 faa6 	bl	8000adc <__aeabi_dcmplt>
 800e590:	2800      	cmp	r0, #0
 800e592:	d0e3      	beq.n	800e55c <exp+0x7c>
 800e594:	2304      	movs	r3, #4
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <exp+0xec>)
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e5a4:	9708      	str	r7, [sp, #32]
 800e5a6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800e5aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e5ae:	f996 3000 	ldrsb.w	r3, [r6]
 800e5b2:	e7df      	b.n	800e574 <exp+0x94>
 800e5b4:	f3af 8000 	nop.w
 800e5b8:	fefa39ef 	.word	0xfefa39ef
 800e5bc:	40862e42 	.word	0x40862e42
 800e5c0:	d52d3051 	.word	0xd52d3051
 800e5c4:	c0874910 	.word	0xc0874910
 800e5c8:	20000278 	.word	0x20000278
 800e5cc:	080119d0 	.word	0x080119d0
 800e5d0:	47efffff 	.word	0x47efffff
 800e5d4:	7ff00000 	.word	0x7ff00000

0800e5d8 <__ieee754_exp>:
 800e5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5dc:	ec55 4b10 	vmov	r4, r5, d0
 800e5e0:	4aab      	ldr	r2, [pc, #684]	; (800e890 <__ieee754_exp+0x2b8>)
 800e5e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e5e6:	4296      	cmp	r6, r2
 800e5e8:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800e5ec:	d932      	bls.n	800e654 <__ieee754_exp+0x7c>
 800e5ee:	4aa9      	ldr	r2, [pc, #676]	; (800e894 <__ieee754_exp+0x2bc>)
 800e5f0:	4296      	cmp	r6, r2
 800e5f2:	d913      	bls.n	800e61c <__ieee754_exp+0x44>
 800e5f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e5f8:	4323      	orrs	r3, r4
 800e5fa:	ee10 2a10 	vmov	r2, s0
 800e5fe:	d007      	beq.n	800e610 <__ieee754_exp+0x38>
 800e600:	462b      	mov	r3, r5
 800e602:	4620      	mov	r0, r4
 800e604:	4629      	mov	r1, r5
 800e606:	f7f1 fe41 	bl	800028c <__adddf3>
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
 800e60e:	e000      	b.n	800e612 <__ieee754_exp+0x3a>
 800e610:	b9ef      	cbnz	r7, 800e64e <__ieee754_exp+0x76>
 800e612:	ec45 4b10 	vmov	d0, r4, r5
 800e616:	b004      	add	sp, #16
 800e618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e61c:	a386      	add	r3, pc, #536	; (adr r3, 800e838 <__ieee754_exp+0x260>)
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	ee10 0a10 	vmov	r0, s0
 800e626:	4629      	mov	r1, r5
 800e628:	f7f2 fa76 	bl	8000b18 <__aeabi_dcmpgt>
 800e62c:	b138      	cbz	r0, 800e63e <__ieee754_exp+0x66>
 800e62e:	a384      	add	r3, pc, #528	; (adr r3, 800e840 <__ieee754_exp+0x268>)
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	4610      	mov	r0, r2
 800e636:	4619      	mov	r1, r3
 800e638:	f7f1 ffde 	bl	80005f8 <__aeabi_dmul>
 800e63c:	e7e5      	b.n	800e60a <__ieee754_exp+0x32>
 800e63e:	a382      	add	r3, pc, #520	; (adr r3, 800e848 <__ieee754_exp+0x270>)
 800e640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e644:	4620      	mov	r0, r4
 800e646:	4629      	mov	r1, r5
 800e648:	f7f2 fa48 	bl	8000adc <__aeabi_dcmplt>
 800e64c:	b130      	cbz	r0, 800e65c <__ieee754_exp+0x84>
 800e64e:	2400      	movs	r4, #0
 800e650:	2500      	movs	r5, #0
 800e652:	e7de      	b.n	800e612 <__ieee754_exp+0x3a>
 800e654:	4b90      	ldr	r3, [pc, #576]	; (800e898 <__ieee754_exp+0x2c0>)
 800e656:	429e      	cmp	r6, r3
 800e658:	f240 80a6 	bls.w	800e7a8 <__ieee754_exp+0x1d0>
 800e65c:	4b8f      	ldr	r3, [pc, #572]	; (800e89c <__ieee754_exp+0x2c4>)
 800e65e:	429e      	cmp	r6, r3
 800e660:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800e664:	d875      	bhi.n	800e752 <__ieee754_exp+0x17a>
 800e666:	4b8e      	ldr	r3, [pc, #568]	; (800e8a0 <__ieee754_exp+0x2c8>)
 800e668:	4e8e      	ldr	r6, [pc, #568]	; (800e8a4 <__ieee754_exp+0x2cc>)
 800e66a:	4443      	add	r3, r8
 800e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e670:	4620      	mov	r0, r4
 800e672:	4629      	mov	r1, r5
 800e674:	f7f1 fe08 	bl	8000288 <__aeabi_dsub>
 800e678:	4446      	add	r6, r8
 800e67a:	e9cd 0100 	strd	r0, r1, [sp]
 800e67e:	e9d6 8900 	ldrd	r8, r9, [r6]
 800e682:	f1c7 0a01 	rsb	sl, r7, #1
 800e686:	ebaa 0a07 	sub.w	sl, sl, r7
 800e68a:	4642      	mov	r2, r8
 800e68c:	464b      	mov	r3, r9
 800e68e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e692:	f7f1 fdf9 	bl	8000288 <__aeabi_dsub>
 800e696:	4604      	mov	r4, r0
 800e698:	460d      	mov	r5, r1
 800e69a:	4622      	mov	r2, r4
 800e69c:	462b      	mov	r3, r5
 800e69e:	4620      	mov	r0, r4
 800e6a0:	4629      	mov	r1, r5
 800e6a2:	f7f1 ffa9 	bl	80005f8 <__aeabi_dmul>
 800e6a6:	a36a      	add	r3, pc, #424	; (adr r3, 800e850 <__ieee754_exp+0x278>)
 800e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	460f      	mov	r7, r1
 800e6b0:	f7f1 ffa2 	bl	80005f8 <__aeabi_dmul>
 800e6b4:	a368      	add	r3, pc, #416	; (adr r3, 800e858 <__ieee754_exp+0x280>)
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	4632      	mov	r2, r6
 800e6c0:	463b      	mov	r3, r7
 800e6c2:	f7f1 ff99 	bl	80005f8 <__aeabi_dmul>
 800e6c6:	a366      	add	r3, pc, #408	; (adr r3, 800e860 <__ieee754_exp+0x288>)
 800e6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6cc:	f7f1 fdde 	bl	800028c <__adddf3>
 800e6d0:	4632      	mov	r2, r6
 800e6d2:	463b      	mov	r3, r7
 800e6d4:	f7f1 ff90 	bl	80005f8 <__aeabi_dmul>
 800e6d8:	a363      	add	r3, pc, #396	; (adr r3, 800e868 <__ieee754_exp+0x290>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f1 fdd3 	bl	8000288 <__aeabi_dsub>
 800e6e2:	4632      	mov	r2, r6
 800e6e4:	463b      	mov	r3, r7
 800e6e6:	f7f1 ff87 	bl	80005f8 <__aeabi_dmul>
 800e6ea:	a361      	add	r3, pc, #388	; (adr r3, 800e870 <__ieee754_exp+0x298>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f7f1 fdcc 	bl	800028c <__adddf3>
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	f7f1 ff7e 	bl	80005f8 <__aeabi_dmul>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4620      	mov	r0, r4
 800e702:	4629      	mov	r1, r5
 800e704:	f7f1 fdc0 	bl	8000288 <__aeabi_dsub>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4606      	mov	r6, r0
 800e70e:	460f      	mov	r7, r1
 800e710:	4620      	mov	r0, r4
 800e712:	4629      	mov	r1, r5
 800e714:	f7f1 ff70 	bl	80005f8 <__aeabi_dmul>
 800e718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e71c:	f1ba 0f00 	cmp.w	sl, #0
 800e720:	d15c      	bne.n	800e7dc <__ieee754_exp+0x204>
 800e722:	2200      	movs	r2, #0
 800e724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e728:	4630      	mov	r0, r6
 800e72a:	4639      	mov	r1, r7
 800e72c:	f7f1 fdac 	bl	8000288 <__aeabi_dsub>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e738:	f7f2 f888 	bl	800084c <__aeabi_ddiv>
 800e73c:	4622      	mov	r2, r4
 800e73e:	462b      	mov	r3, r5
 800e740:	f7f1 fda2 	bl	8000288 <__aeabi_dsub>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	2000      	movs	r0, #0
 800e74a:	4957      	ldr	r1, [pc, #348]	; (800e8a8 <__ieee754_exp+0x2d0>)
 800e74c:	f7f1 fd9c 	bl	8000288 <__aeabi_dsub>
 800e750:	e75b      	b.n	800e60a <__ieee754_exp+0x32>
 800e752:	4e56      	ldr	r6, [pc, #344]	; (800e8ac <__ieee754_exp+0x2d4>)
 800e754:	a348      	add	r3, pc, #288	; (adr r3, 800e878 <__ieee754_exp+0x2a0>)
 800e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75a:	4446      	add	r6, r8
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	f7f1 ff4a 	bl	80005f8 <__aeabi_dmul>
 800e764:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e768:	f7f1 fd90 	bl	800028c <__adddf3>
 800e76c:	f7f2 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800e770:	4682      	mov	sl, r0
 800e772:	f7f1 fed7 	bl	8000524 <__aeabi_i2d>
 800e776:	a342      	add	r3, pc, #264	; (adr r3, 800e880 <__ieee754_exp+0x2a8>)
 800e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77c:	4606      	mov	r6, r0
 800e77e:	460f      	mov	r7, r1
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4620      	mov	r0, r4
 800e78a:	4629      	mov	r1, r5
 800e78c:	f7f1 fd7c 	bl	8000288 <__aeabi_dsub>
 800e790:	a33d      	add	r3, pc, #244	; (adr r3, 800e888 <__ieee754_exp+0x2b0>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	e9cd 0100 	strd	r0, r1, [sp]
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	f7f1 ff2b 	bl	80005f8 <__aeabi_dmul>
 800e7a2:	4680      	mov	r8, r0
 800e7a4:	4689      	mov	r9, r1
 800e7a6:	e770      	b.n	800e68a <__ieee754_exp+0xb2>
 800e7a8:	4b41      	ldr	r3, [pc, #260]	; (800e8b0 <__ieee754_exp+0x2d8>)
 800e7aa:	429e      	cmp	r6, r3
 800e7ac:	d811      	bhi.n	800e7d2 <__ieee754_exp+0x1fa>
 800e7ae:	a324      	add	r3, pc, #144	; (adr r3, 800e840 <__ieee754_exp+0x268>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	ee10 0a10 	vmov	r0, s0
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	f7f1 fd67 	bl	800028c <__adddf3>
 800e7be:	2200      	movs	r2, #0
 800e7c0:	4b39      	ldr	r3, [pc, #228]	; (800e8a8 <__ieee754_exp+0x2d0>)
 800e7c2:	f7f2 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 800e7c6:	b138      	cbz	r0, 800e7d8 <__ieee754_exp+0x200>
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	4b37      	ldr	r3, [pc, #220]	; (800e8a8 <__ieee754_exp+0x2d0>)
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	e719      	b.n	800e606 <__ieee754_exp+0x2e>
 800e7d2:	f04f 0a00 	mov.w	sl, #0
 800e7d6:	e760      	b.n	800e69a <__ieee754_exp+0xc2>
 800e7d8:	4682      	mov	sl, r0
 800e7da:	e75e      	b.n	800e69a <__ieee754_exp+0xc2>
 800e7dc:	4632      	mov	r2, r6
 800e7de:	463b      	mov	r3, r7
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e7e6:	f7f1 fd4f 	bl	8000288 <__aeabi_dsub>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f2:	f7f2 f82b 	bl	800084c <__aeabi_ddiv>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	4649      	mov	r1, r9
 800e7fe:	f7f1 fd43 	bl	8000288 <__aeabi_dsub>
 800e802:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e806:	f7f1 fd3f 	bl	8000288 <__aeabi_dsub>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	2000      	movs	r0, #0
 800e810:	4925      	ldr	r1, [pc, #148]	; (800e8a8 <__ieee754_exp+0x2d0>)
 800e812:	f7f1 fd39 	bl	8000288 <__aeabi_dsub>
 800e816:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e81a:	4592      	cmp	sl, r2
 800e81c:	db02      	blt.n	800e824 <__ieee754_exp+0x24c>
 800e81e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e822:	e6f2      	b.n	800e60a <__ieee754_exp+0x32>
 800e824:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e828:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e82c:	2200      	movs	r2, #0
 800e82e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e832:	e701      	b.n	800e638 <__ieee754_exp+0x60>
 800e834:	f3af 8000 	nop.w
 800e838:	fefa39ef 	.word	0xfefa39ef
 800e83c:	40862e42 	.word	0x40862e42
 800e840:	8800759c 	.word	0x8800759c
 800e844:	7e37e43c 	.word	0x7e37e43c
 800e848:	d52d3051 	.word	0xd52d3051
 800e84c:	c0874910 	.word	0xc0874910
 800e850:	72bea4d0 	.word	0x72bea4d0
 800e854:	3e663769 	.word	0x3e663769
 800e858:	c5d26bf1 	.word	0xc5d26bf1
 800e85c:	3ebbbd41 	.word	0x3ebbbd41
 800e860:	af25de2c 	.word	0xaf25de2c
 800e864:	3f11566a 	.word	0x3f11566a
 800e868:	16bebd93 	.word	0x16bebd93
 800e86c:	3f66c16c 	.word	0x3f66c16c
 800e870:	5555553e 	.word	0x5555553e
 800e874:	3fc55555 	.word	0x3fc55555
 800e878:	652b82fe 	.word	0x652b82fe
 800e87c:	3ff71547 	.word	0x3ff71547
 800e880:	fee00000 	.word	0xfee00000
 800e884:	3fe62e42 	.word	0x3fe62e42
 800e888:	35793c76 	.word	0x35793c76
 800e88c:	3dea39ef 	.word	0x3dea39ef
 800e890:	40862e41 	.word	0x40862e41
 800e894:	7fefffff 	.word	0x7fefffff
 800e898:	3fd62e42 	.word	0x3fd62e42
 800e89c:	3ff0a2b1 	.word	0x3ff0a2b1
 800e8a0:	080119e8 	.word	0x080119e8
 800e8a4:	080119f8 	.word	0x080119f8
 800e8a8:	3ff00000 	.word	0x3ff00000
 800e8ac:	080119d8 	.word	0x080119d8
 800e8b0:	3e2fffff 	.word	0x3e2fffff

0800e8b4 <finite>:
 800e8b4:	ee10 3a90 	vmov	r3, s1
 800e8b8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e8bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e8c0:	0fc0      	lsrs	r0, r0, #31
 800e8c2:	4770      	bx	lr

0800e8c4 <matherr>:
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	4770      	bx	lr

0800e8c8 <_init>:
 800e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ca:	bf00      	nop
 800e8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ce:	bc08      	pop	{r3}
 800e8d0:	469e      	mov	lr, r3
 800e8d2:	4770      	bx	lr

0800e8d4 <_fini>:
 800e8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d6:	bf00      	nop
 800e8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8da:	bc08      	pop	{r3}
 800e8dc:	469e      	mov	lr, r3
 800e8de:	4770      	bx	lr
